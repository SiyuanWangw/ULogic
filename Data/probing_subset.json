[
 {
  "s_rule": "CanFeed(Person X, Animal Y):- Own(Person X, Animal Y);",
  "v_rule": "If Person X owns Animal Y, then Person X can feed Animal Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRescue(Person X, Animal Y):- Trained(Person X, Animal Y);",
  "v_rule": "If Person X is trained to rescue Animal Y, then Person X can rescue Animal Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBurn(Person X, Material Y):- HasAccessToFire(Person X, Material Y);",
  "v_rule": "If Person X has access to fire and Material Y, then Person X can burn Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanInhale(Person X, Substance Y):- Breathe(Person X, Substance Y);",
  "v_rule": "If Person X can breathe Substance Y, then Person X can inhale Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDispose(Person X, Substance Y):- Receive(Person X, Substance Y);",
  "v_rule": "If Person X receives Substance Y, then Person X can dispose Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanProduce(Person X, Substance Y):- HasResources(Person X, Substance Y);",
  "v_rule": "If Person X has resources for Substance Y, then Person X can produce Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanProduce(Person X, Substance Y):- TrainedIn(Person X, Substance Y);",
  "v_rule": "If Person X is trained in making Substance Y, then Person X can produce Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanReactTo(Person X, Substance Y):- Allergic(Person X, Substance Y);",
  "v_rule": "If Person X is allergic to Substance Y, then Person X can react to Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAbsorb(Person X, Substance Y):- Eat(Person X, Substance Y);",
  "v_rule": "If Person X can eat Substance Y, then Person X can absorb Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeExposedTo(Person X, Substance Y):- WorksWith(Person X, Substance Y);",
  "v_rule": "If Person X works with Substance Y, then Person X can be exposed to Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Person X, Furniture Y):- Own(Person X, Furniture Y);",
  "v_rule": "If Person X owns Furniture Y, then Person X can use Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMove(Person X, Furniture Y):- HasHelp(Person X, Furniture Y);",
  "v_rule": "If Person X has help to move Furniture Y, then Person X can move Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanWater(Person X, Plant Y):- Own(Person X, Plant Y);",
  "v_rule": "If Person X owns Plant Y, then Person X can water Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStoreWith(Person X, Furniture Y):- Rent(Person X, Furniture Y);",
  "v_rule": "If Person X rents Furniture Y, then Person X can store with Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanJoin(Person X, Organization Y):- Qualify(Person X, Organization Y);",
  "v_rule": "If Person X qualifies for Organization Y, then Person X can join Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanLead(Person X, Organization Y):- IsCEO(Person X, Organization Y);",
  "v_rule": "If Person X is the CEO of Organization Y, then Person X can lead Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCollaborate(Person X, Organization Y):- Member(Person X, Organization Y);",
  "v_rule": "If Person X is a member of Organization Y, then Person X can collaborate with Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDonate(Person X, Organization Y):- Affiliated(Person X, Organization Y);",
  "v_rule": "If Person X is affiliated with Organization Y, then Person X can donate to Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDonate(Person X, Organization Y):- HasExcess(Person X, Organization Y);",
  "v_rule": "If Person X has excess Y, then Person X can donate Y to Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanVisit(Person X, Natural Place Y):- HasTransport(Person X, Natural Place Y);",
  "v_rule": "If Person X has transport to Natural Place Y, then Person X can visit Natural Place Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCamp(Person X, Natural Place Y):- HasCampingGear(Person X, Natural Place Y);",
  "v_rule": "If Person X has camping gear for Natural Place Y, then Person X can camp in Natural Place Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanOrganize(Person X, Event Y):- Responsible(Person X, Event Y);",
  "v_rule": "If Person X is responsible for Event Y, then Person X can organize Event Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAttend(Person X, Event Y):- Organize(Person X, Event Y);",
  "v_rule": "If Person X organizes Event Y, then Person X can attend Event Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanIdentify(Person X, Plant Y):- Studied(Person X, Plant Y);",
  "v_rule": "If Person X studied Plant Y, then Person X can identify Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanSpeakAt(Person X, Event Y):- Organizer(Person X, Event Y);",
  "v_rule": "If Person X is the organizer of Event Y, then Person X can speak at Event Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanVolunteerAt(Person X, Event Y):- LivesNear(Person X, Event Y);",
  "v_rule": "If Person X lives near Event Y, then Person X can volunteer at Event Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanWatch(Person X, Show Y):- Subscribe(Person X, Show Y);",
  "v_rule": "If Person X subscribes to Show Y, then Person X can watch Show Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPerformIn(Person X, Show Y):- Cast(Person X, Show Y);",
  "v_rule": "If Person X is cast in Show Y, then Person X can perform in Show Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanProduce(Person X, Show Y):- Fund(Person X, Show Y);",
  "v_rule": "If Person X funds Show Y, then Person X can produce Show Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanWriteFor(Person X, Show Y):- Created(Person X, Show Y);",
  "v_rule": "If Person X created Show Y, then Person X can write for Show Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCollect(Person X, Artwork Y):- Buy(Person X, Artwork Y);",
  "v_rule": "If Person X buys Artwork Y, then Person X can collect Artwork Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDisplay(Person X, Artwork Y):- Own(Person X, Artwork Y);",
  "v_rule": "If Person X owns Artwork Y, then Person X can display Artwork Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanImitate(Person X, Artwork Y):- Practiced(Person X, Artwork Y);",
  "v_rule": "If Person X practiced Artwork Y, then Person X can imitate Artwork Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanApplyFor(Person X, Job Y):- HaveRequiredSkills(Person X, Job Y);",
  "v_rule": "If Person X has the required skills for Job Y, then Person X can apply for Job Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPerform(Person X, Job Y):- Trained(Person X, Job Y);",
  "v_rule": "If Person X is trained for Job Y, then Person X can perform Job Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanEarnFrom(Person X, Job Y):- Employed(Person X, Job Y);",
  "v_rule": "If Person X is employed in Job Y, then Person X can earn from Job Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanEat(Person X, Food Y):- Likes(Person X, Food Y);",
  "v_rule": "If Person X likes Food Y, then Person X can eat Food Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanSpecializeIn(Person X, Job Y):- HaveExperienceIn(Person X, Job Y);",
  "v_rule": "If Person X has experience in Y, then Person X can specialize in Job Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPlay(Person X, Game Y):- HaveExperience(Person X, Game Y);",
  "v_rule": "If Person X has experience with Game Y, then Person X can play Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanLose(Person X, Game Y):- Play(Person X, Game Y);",
  "v_rule": "If Person X plays Game Y, then Person X can lose Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Game Y):- Want(Person X, Game Y);",
  "v_rule": "If Person X wants Game Y, then Person X can buy Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Game Y):- Available(Game Y, Person X);",
  "v_rule": "If Game Y is available to Person X, then Person X can buy Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCompete(Person X, Game Y):- Expert(Person X, Game Y);",
  "v_rule": "If Person X is an expert in Game Y, then Person X can compete in Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCompete(Person X, Game Y):- KnowRules(Person X, Game Y);",
  "v_rule": "If Person X knows the rules of Game Y, then Person X can compete in Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDrive(Person X, Vehicle Y):- HasLicense(Person X, Vehicle Y);",
  "v_rule": "If Person X has a license for Vehicle Y, then Person X can drive Vehicle Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRide(Person X, Vehicle Y):- Own(Person X, Vehicle Y);",
  "v_rule": "If Person X owns Vehicle Y, then Person X can ride Vehicle Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Food Y):- HaveMoney(Person X, Food Y);",
  "v_rule": "If Person X has money Y, then Person X can buy Food Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRepair(Person X, Tool Y):- Experienced(Person X, Tool Y);",
  "v_rule": "If Person X is experienced with Tool Y, then Person X can repair Tool Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotFeed(Person X, Animal Y):- Forbidden(Person X, Animal Y);",
  "v_rule": "If it is forbidden for Person X to feed Animal Y, then Person X cannot feed Animal Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotRide(Person X, Animal Y):- AfraidOf(Person X, Animal Y);",
  "v_rule": "If Person X is afraid of Animal Y, then Person X cannot ride Animal Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotManipulate(Person X, Material Y):- LackSkill(Person X, Material Y);",
  "v_rule": "If Person X lacks the skill to manipulate Material Y, then Person X cannot manipulate Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotManipulate(Person X, Material Y):- Prohibited(Person X, Material Y);",
  "v_rule": "If Person X is prohibited from manipulating Material Y, then Person X cannot manipulate Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotProduce(Person X, Substance Y):- LackKnowledge(Person X, Substance Y);",
  "v_rule": "If Person X lacks knowledge about Substance Y, then Person X cannot produce Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAbsorb(Person X, Substance Y):- LackEnzyme(Person X, Substance Y);",
  "v_rule": "If Person X lacks the enzyme to process Substance Y, then Person X cannot absorb Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotRepair(Person X, Furniture Y):- LackTool(Person X, Furniture Y);",
  "v_rule": "If Person X lacks the necessary tool to repair Furniture Y, then Person X cannot repair Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotSleepOn(Person X, Furniture Y):- IsAllergic(Person X, Furniture Y);",
  "v_rule": "If Person X is allergic to Furniture Y, then Person X cannot sleep on Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotSleepOn(Person X, Furniture Y):- IsTooSmall(Person X, Furniture Y);",
  "v_rule": "If Furniture Y is too small for Person X, then Person X cannot sleep on Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotJoin(Person X, Organization Y):- Banned(Person X, Organization Y);",
  "v_rule": "If Person X is banned from Organization Y, then Person X cannot join Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotLead(Person X, Organization Y):- LackLeadershipSkills(Person X, Organization Y);",
  "v_rule": "If Person X lacks leadership skills for Organization Y, then Person X cannot lead Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotWorkFor(Person X, Organization Y):- FiredFrom(Person X, Organization Y);",
  "v_rule": "If Person X was fired from Organization Y, then Person X cannot work for Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrune(Person X, Plant Y):- LackKnowledge(Person X, Plant Y);",
  "v_rule": "If Person X lacks the knowledge to prune Plant Y, then Person X cannot prune Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotHike(Person X, Natural Place Y):- NoProperEquipment(Person X, Natural Place Y);",
  "v_rule": "If Person X does not have proper equipment for Natural Place Y, then Person X cannot hike Natural Place Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrune(Person X, Plant Y):- PhysicallyUnable(Person X, Plant Y);",
  "v_rule": "If Person X is physically unable to prune Plant Y, then Person X cannot prune Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotSponsor(Person X, Event Y):- LackFunds(Person X, Event Y);",
  "v_rule": "If Person X lacks funds for Event Y, then Person X cannot sponsor Event Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotSponsor(Person X, Event Y):- LegalRestrictions(Person X, Event Y);",
  "v_rule": "If there are legal restrictions preventing Person X from sponsoring Event Y, then Person X cannot sponsor Event Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotWater(Person X, Plant Y):- Absent(Person X, Plant Y);",
  "v_rule": "If Person X is absent from Plant Y, then Person X cannot water Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotRecord(Person X, Show Y):- NoRecordingDevice(Person X, Show Y);",
  "v_rule": "If Person X has no recording device, then Person X cannot record Show Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPlant(Person X, Plant Y):- NoAccess(Person X, Plant Y);",
  "v_rule": "If Person X does not have access to Plant Y, then Person X cannot plant Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDisplay(Person X, Artwork Y):- NoSpace(Person X, Artwork Y);",
  "v_rule": "If Person X has no space for Artwork Y, then Person X cannot display Artwork Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPerform(Person X, Job Y):- LackSkill(Person X, Job Y);",
  "v_rule": "If Person X lacks the skills for Job Y, then Person X cannot perform Job Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Game Y):- TooExpensive(Game Y, Person X);",
  "v_rule": "If Game Y is too expensive for Person X, then Person X cannot buy Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotCompete(Person X, Game Y):- Disqualified(Person X, Game Y);",
  "v_rule": "If Person X is disqualified from Game Y, then Person X cannot compete in Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPark(Person X, Vehicle Y):- NoLicense(Person X, Vehicle Y);",
  "v_rule": "If Person X does not have a license for Vehicle Y, then Person X cannot park Vehicle Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotUse(Person X, Tool Y):- ToolIsBroken(Person X, Tool Y);",
  "v_rule": "If Tool Y is broken for Person X, then Person X cannot use Tool Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Tool Y):- LackMoney(Person X, Tool Y);",
  "v_rule": "If Person X lacks money for Tool Y, then Person X cannot buy Tool Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Tool Y):- ToolUnavailable(Person X, Tool Y);",
  "v_rule": "If Tool Y is unavailable to Person X, then Person X cannot buy Tool Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotUseForMedicine(Person X, Plant Y):- Toxic(Plant Y, Person X);",
  "v_rule": "If Plant Y is toxic to Person X, then Person X cannot use Plant Y for medicine.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotInvent(Person X, Tool Y):- LackResources(Person X, Tool Y);",
  "v_rule": "If Person X lacks the resources to create Tool Y, then Person X cannot invent Tool Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotImprove(Person X, Tool Y):- NoAccess(Person X, Tool Y);",
  "v_rule": "If Person X has no access to Tool Y, then Person X cannot improve Tool Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotInstall(Person X, Technology Y):- PhysicalInability(Person X, Technology Y);",
  "v_rule": "If Person X has a physical inability to handle Technology Y, then Person X cannot install Technology Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotTroubleshoot(Person X, Technology Y):- LackExperience(Person X, Technology Y);",
  "v_rule": "If Person X lacks experience with Technology Y, then Person X cannot troubleshoot Technology Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotUpgrade(Person X, Technology Y):- LackResources(Person X, Technology Y);",
  "v_rule": "If Person X lacks resources for Technology Y, then Person X cannot upgrade Technology Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Animal Y):- Care(Person X, Animal Y);",
  "v_rule": "If Person X cares for Animal Y, then Person X can access Animal Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Alcohol Y):- Receive(Person X, Alcohol Y);",
  "v_rule": "If Person X receives Alcohol Y, then Person X can access Alcohol Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Facility Y):- Rent(Organization X, Facility Y);",
  "v_rule": "If Organization X rents Facility Y, then Organization X can access Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Natural Place Y):- Own(Organization X, Natural Place Y);",
  "v_rule": "If Organization X owns Natural Place Y, then Organization X can access Natural Place Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Material Y):- Lease(Organization X, Material Y);",
  "v_rule": "If Organization X leases Material Y, then Organization X can access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Platform Y):- Subscribes(Organization X, Platform Y);",
  "v_rule": "If Organization X subscribes to Platform Y, then Organization X can access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Disease Y):- Treat(Organization X, Disease Y);",
  "v_rule": "If Organization X treats Disease Y, then Organization X can access Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Artwork Y):- Loan(Organization X, Artwork Y);",
  "v_rule": "If Organization X has Artwork Y on loan, then Organization X can access Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Artwork Y):- Exhibit(Organization X, Artwork Y);",
  "v_rule": "If Organization X exhibits Artwork Y, then Organization X can access Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Job Y):- Posted(Organization X, Job Y);",
  "v_rule": "If Organization X posted Job Y, then Organization X can access Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Alcohol Y):- Sell(Organization X, Alcohol Y);",
  "v_rule": "If Organization X sells Alcohol Y, then Organization X can access Alcohol Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Publication Y):- Publish(Organization X, Publication Y);",
  "v_rule": "If Organization X publishes Publication Y, then Organization X can access Publication Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Financial Product Y):- Sell(Financial Product Y, Organization X);",
  "v_rule": "If Financial Product Y is sold to Organization X, then Organization X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Financial Product Y):- Partner(Organization X, Financial Product Y);",
  "v_rule": "If Organization X is a partner with Financial Product Y, then Organization X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Financial Product Y):- License(Organization X, Financial Product Y);",
  "v_rule": "If Organization X has a license for Financial Product Y, then Organization X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Legislation Y):- Authorized(Organization X, Legislation Y);",
  "v_rule": "If Organization X is authorized for Legislation Y, then Organization X can access Legislation Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Food Y):- Buy(Organization X, Food Y);",
  "v_rule": "If Organization X buys Food Y, then Organization X can access Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Event Y):- Registered(Vehicle X, Event Y);",
  "v_rule": "If Vehicle X is registered for Event Y, then Vehicle X can access Event Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Drug Y):- Prescribed(Person X, Drug Y);",
  "v_rule": "If Person X is prescribed Drug Y, then Person X can access Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Animal Y):- Transport(Vehicle X, Animal Y);",
  "v_rule": "If Vehicle X can transport Animal Y, then Vehicle X can access Animal Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Technology Y):- Upgraded(Vehicle X, Technology Y);",
  "v_rule": "If Vehicle X is upgraded with Technology Y, then Vehicle X can access Technology Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Technology Y):- Installed(Vehicle X, Technology Y);",
  "v_rule": "If Technology Y is installed in Vehicle X, then Vehicle X can access Technology Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Drug Y):- Transport(Vehicle X, Drug Y);",
  "v_rule": "If Vehicle X transports Drug Y, then Vehicle X can access Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Electronic Device Y):- Integrated(Vehicle X, Electronic Device Y);",
  "v_rule": "If Electronic Device Y is integrated into Vehicle X, then Vehicle X can access Electronic Device Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Plant Y):- Allowed(Vehicle X, Plant Y);",
  "v_rule": "If Vehicle X is allowed in Plant Y, then Vehicle X can access Plant Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Material Y):- Load(Vehicle X, Material Y);",
  "v_rule": "If Vehicle X can load Material Y, then Vehicle X can access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Natural Phenomenon Y):- AdaptedTo(Vehicle X, Natural Phenomenon Y);",
  "v_rule": "If Vehicle X is adapted to Natural Phenomenon Y, then Vehicle X can access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Alcohol Y):- Store(Vehicle X, Alcohol Y);",
  "v_rule": "If Vehicle X stores Alcohol Y, then Vehicle X can access Alcohol Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Food Y):- Store(Vehicle X, Food Y);",
  "v_rule": "If Vehicle X can store Food Y, then Vehicle X can access Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Event X, Animal Y):- Participate(Animal Y, Event X);",
  "v_rule": "If Animal Y participates in Event X, then Animal Y can access Event X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Event X, Technology Y):- Featured(Event X, Technology Y);",
  "v_rule": "If Technology Y is featured at Event X, then Event X can access Technology Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Event X, Plant Y):- Organized(Event X, Plant Y);",
  "v_rule": "If Event X is organized at Plant Y, then Event X can access Plant Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Event X, Facility Y):- Booked(Event X, Facility Y);",
  "v_rule": "If Event X booked Facility Y, then Event X can access Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Plant Y):- Forbidden(Person X, Plant Y);",
  "v_rule": "If Plant Y is forbidden to Person X, then Person X cannot access Plant Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Drug Y):- Unavailable(Animal X, Drug Y);",
  "v_rule": "If Drug Y is unavailable to Animal X, then Animal X cannot access Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Material Y):- IsProhibited(Material Y, Animal X);",
  "v_rule": "If Material Y is prohibited for Animal X, then Animal X cannot access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Technology X, Game Y):- Restricted(Technology X, Game Y);",
  "v_rule": "If Technology X is restricted from Game Y, then Technology X cannot access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Technology X, Job Y):- Unavailable(Technology X, Job Y);",
  "v_rule": "If Technology X is unavailable in Job Y, then Technology X cannot be accessed for Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Technology X, Legislation Y):- Prohibits(Legislation Y, Technology X);",
  "v_rule": "If Legislation Y prohibits Technology X, then Technology X cannot be accessed due to Legislation Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Drug X, Legislation Y):- Prohibited(Drug X, Legislation Y);",
  "v_rule": "If Drug X is prohibited by Legislation Y, then Drug X cannot be accessed under Legislation Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Tool X, Substance Y):- Prohibited(Tool X, Substance Y);",
  "v_rule": "If Tool X is prohibited from accessing Substance Y, then Tool X cannot access Substance Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Artwork Y):- Sold(Artwork Y, Person X);",
  "v_rule": "If Artwork Y is sold by Person X, then Person X cannot access Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Electronic Device X, Electronic Device Y):- Blocked(Electronic Device X, Electronic Device Y);",
  "v_rule": "If Electronic Device X is blocked from Electronic Device Y, then Electronic Device X cannot access Electronic Device Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Artwork Y):- Lost(Person X, Artwork Y);",
  "v_rule": "If Person X lost Artwork Y, then Person X cannot access Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Substance X, Facility Y):- Restricted(Substance X, Facility Y);",
  "v_rule": "If Substance X is restricted in Facility Y, then Substance X cannot be accessed in Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Substance X, Material Y):- IsImpermeable(Material Y, Substance X);",
  "v_rule": "If Material Y is impermeable to Substance X, then Substance X cannot access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Plant X, Plant Y):- SeparatedByWall(Plant X, Plant Y);",
  "v_rule": "If Plant X is separated by a wall from Plant Y, then Plant X cannot access Plant Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Plant X, Natural Phenomenon Y):- Isolated(Plant X, Natural Phenomenon Y);",
  "v_rule": "If Plant X is isolated from Natural Phenomenon Y, then Plant X cannot access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Authorization Y):- Revoked(Person X, Authorization Y);",
  "v_rule": "If Authorization Y is revoked from Person X, then Person X cannot access Authorization Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Facility X, Material Y):- Depleted(Facility X, Material Y);",
  "v_rule": "If Material Y is depleted in Facility X, then Facility X cannot access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Facility X, Game Y):- LackEquipment(Facility X, Game Y);",
  "v_rule": "If Facility X lacks the equipment for Game Y, then Facility X cannot access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Facility X, Job Y):- Unavailable(Facility X, Job Y);",
  "v_rule": "If Facility X is unavailable for Job Y, then Job Y cannot access Facility X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Facility X, Alcohol Y):- AlcoholFree(Facility X, Alcohol Y);",
  "v_rule": "If Facility X is alcohol-free, then Facility X cannot access Alcohol Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Facility X, Show Y):- Closed(Facility X, Show Y);",
  "v_rule": "If Facility X is closed during Show Y, then Facility X cannot access Show Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Facility X, Food Y):- Prohibit(Facility X, Food Y);",
  "v_rule": "If Facility X prohibits Food Y, then Food Y cannot be accessed at Facility X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Natural Place X, Material Y):- Lack(Natural Place X, Material Y);",
  "v_rule": "If Natural Place X lacks Material Y, then Material Y cannot be accessed in Natural Place X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Natural Place X, Material Y):- Prohibit(Natural Place X, Material Y);",
  "v_rule": "If Material Y is prohibited in Natural Place X, then Material Y cannot be accessed in Natural Place X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Natural Place X, Natural Phenomenon Y):- BlockedBy(Natural Place X, Natural Phenomenon Y);",
  "v_rule": "If Natural Place X is blocked by Natural Phenomenon Y, then Natural Place X cannot be accessed due to Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Animal Y):- Protect(Animal Y, Organization X);",
  "v_rule": "If Animal Y is protected from Organization X, then Organization X cannot access Animal Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Artwork X, Publication Y):- Removed(Artwork X, Publication Y);",
  "v_rule": "If Artwork X is removed from Publication Y, then Artwork X cannot be accessed in Publication Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Job X, Alcohol Y):- Prohibited(Job X, Alcohol Y);",
  "v_rule": "If Alcohol Y is prohibited in Job X, then Job X cannot access Alcohol Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Food Y):- LackOfFunds(Organization X, Food Y);",
  "v_rule": "If Organization X lacks funds for Food Y, then Organization X cannot access Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Job X, Food Y):- Forbidden(Job X, Food Y);",
  "v_rule": "If Food Y is forbidden for Job X, then Job X cannot access Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Alcohol X, Show Y):- AlcoholFree(Show Y, Alcohol X);",
  "v_rule": "If Show Y is alcohol-free, then Alcohol X cannot be accessed at Show Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 1,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LivesIn(Person X, Region Y):- MovedTo(Person X, Region Y);",
  "v_rule": "If Person X moved to Region Y, then Person X lives in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "FoundIn(Animal X, Region Y):- Migrated(Animal X, Region Y);",
  "v_rule": "If Animal X migrated to Region Y, then Animal X can be found in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AccessibleIn(Publication X, Region Y):- PublishedIn(Publication X, Region Y);",
  "v_rule": "If Publication X is published in Region Y, then Publication X is accessible in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "OperatesIn(Organization X, Region Y):- HasBranchIn(Organization X, Region Y);",
  "v_rule": "If Organization X has a branch in Region Y, then Organization X operates in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "FoundedIn(Organization X, Region Y):- Established(Organization X, Region Y);",
  "v_rule": "If Organization X was established in Region Y, then Organization X was founded in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ProvidesServicesIn(Organization X, Region Y):- ExpandedTo(Organization X, Region Y);",
  "v_rule": "If Organization X expanded to Region Y, then Organization X provides services in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HeldIn(Event X, Region Y):- LocatedIn(Event X, Region Y);",
  "v_rule": "If Event X is located in Region Y, then Event X is held in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ExtinctIn(Animal X, Region Y):- NoHabitatIn(Animal X, Region Y);",
  "v_rule": "If Animal X has no habitat in Region Y, then Animal X is extinct in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "BroadcastIn(Show X, Region Y):- PopularIn(Show X, Region Y);",
  "v_rule": "If Show X is popular in Region Y, then Show X is broadcast in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CreatedIn(Artwork X, Region Y):- MadeIn(Artwork X, Region Y);",
  "v_rule": "If Artwork X was made in Region Y, then Artwork X was created in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "GrowsIn(Plant X, Region Y):- NativeTo(Plant X, Region Y);",
  "v_rule": "If Plant X is native to Region Y, then Plant X grows in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "BannedIn(Game X, Region Y):- Illegal(Game X, Region Y);",
  "v_rule": "If Game X is illegal in Region Y, then Game X is banned in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ManufacturedIn(Vehicle X, Region Y):- BuiltIn(Vehicle X, Region Y);",
  "v_rule": "If Vehicle X is built in Region Y, then Vehicle X is manufactured in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ImportedTo(Vehicle X, Region Y):- Sold(Vehicle X, Region Y);",
  "v_rule": "If Vehicle X is sold to Region Y, then Vehicle X is imported to Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RestrictedIn(Technology X, Region Y):- NotApproved(Technology X, Region Y);",
  "v_rule": "If Technology X is not approved in Region Y, then Technology X is restricted in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ExportedFrom(Electronic Device X, Region Y):- ShippedFrom(Electronic Device X, Region Y);",
  "v_rule": "If Electronic Device X is shipped from Region Y, then Electronic Device X is exported from Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "BrewedIn(Alcohol X, Region Y):- Produced(Alcohol X, Region Y);",
  "v_rule": "If Alcohol X is produced in Region Y, then Alcohol X is brewed in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "StudiesIn(Person X, Region Y):- ExchangeStudent(Person X, Region Y);",
  "v_rule": "If Person X is an exchange student in Region Y, then Person X studies in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "OccursIn(Natural Phenomenon X, Region Y):- CommonIn(Natural Phenomenon X, Region Y);",
  "v_rule": "If Natural Phenomenon X is common in Region Y, then Natural Phenomenon X occurs in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "Affects(Natural Phenomenon X, Region Y):- Impacts(Natural Phenomenon X, Region Y);",
  "v_rule": "If Natural Phenomenon X impacts Region Y, then Natural Phenomenon X affects Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "OperatesIn(Facility X, Region Y):- ProvidesServiceIn(Facility X, Region Y);",
  "v_rule": "If Facility X provides service in Region Y, then Facility X operates in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToMaintain(Person X, Facility Y):- Own(Person X, Facility Y);",
  "v_rule": "If Person X owns Facility Y, then Person X needs to maintain Facility Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToStudy(Person X, Natural Place Y):- WriteAbout(Person X, Natural Place Y);",
  "v_rule": "If Person X writes about Natural Place Y, then Person X needs to study Natural Place Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToVisit(Person X, Natural Place Y):- Work(Person X, Natural Place Y);",
  "v_rule": "If Person X works on Natural Place Y, then Person X needs to visit Natural Place Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToOrganize(Person X, Event Y):- IsHost(Person X, Event Y);",
  "v_rule": "If Person X is the host of Event Y, then Person X needs to organize Event Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPrepareFor(Person X, Event Y):- Invited(Person X, Event Y);",
  "v_rule": "If Person X is invited to Event Y, then Person X needs to prepare for Event Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToInviteOthersTo(Person X, Event Y):- Host(Person X, Event Y);",
  "v_rule": "If Person X hosts Event Y, then Person X needs to invite others to Event Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPlant(Person X, Plant Y):- WantToGrow(Person X, Plant Y);",
  "v_rule": "If Person X wants to grow Plant Y, then Person X needs to plant Plant Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToCreate(Person X, Artwork Y):- Commissioned(Person X, Artwork Y);",
  "v_rule": "If Person X is commissioned for Artwork Y, then Person X needs to create Artwork Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToInterviewFor(Person X, Job Y):- Apply(Person X, Job Y);",
  "v_rule": "If Person X applies for Job Y, then Person X needs to interview for Job Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPlay(Person X, Game Y):- Practice(Person X, Game Y);",
  "v_rule": "If Person X practices Game Y, then Person X needs to play Game Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToRefuel(Person X, Vehicle Y):- Drive(Person X, Vehicle Y);",
  "v_rule": "If Person X drives Vehicle Y, then Person X needs to refuel Vehicle Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Tool Y):- JobRequires(Person X, Tool Y);",
  "v_rule": "If Person X's job requires Tool Y, then Person X needs to use Tool Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Electronic Device Y):- WorkWith(Person X, Electronic Device Y);",
  "v_rule": "If Person X works with Electronic Device Y, then Person X needs to use Electronic Device Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Platform Y):- StudyOn(Person X, Platform Y);",
  "v_rule": "If Person X studies on Platform Y, then Person X needs to use Platform Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPractice(Person X, Skill Y):- Learning(Person X, Skill Y);",
  "v_rule": "If Person X is learning Skill Y, then Person X needs to practice Skill Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToApply(Person X, Skill Y):- TaskRequires(Person X, Skill Y);",
  "v_rule": "If Person X's task requires Skill Y, then Person X needs to apply Skill Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToRenew(Person X, Authorization Y):- Expired(Person X, Authorization Y);",
  "v_rule": "If Authorization Y of Person X is expired, then Person X needs to renew Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToVerify(Person X, Authorization Y):- Request(Person X, Authorization Y);",
  "v_rule": "If Person X requests Authorization Y, then Person X needs to verify Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToSubmit(Person X, Authorization Y):- Require(Person X, Authorization Y);",
  "v_rule": "If Authorization Y is required by Person X, then Person X needs to submit Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToObey(Person X, Legislation Y):- Citizen(Person X, Legislation Y);",
  "v_rule": "If Person X is a citizen under Legislation Y, then Person X needs to obey Legislation Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToAvoid(Person X, Alcohol Y):- Allergic(Person X, Alcohol Y);",
  "v_rule": "If Person X is allergic to Alcohol Y, then Person X needs to avoid Alcohol Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPrevent(Person X, Disease Y):- AtRisk(Person X, Disease Y);",
  "v_rule": "If Person X is at risk of Disease Y, then Person X needs to prevent Disease Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPrevent(Person X, Disease Y):- FamilyHistory(Person X, Disease Y);",
  "v_rule": "If Person X has a family history of Disease Y, then Person X needs to prevent Disease Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToDispose(Person X, Drug Y):- Expired(Drug Y, Person X);",
  "v_rule": "If Drug Y is expired for Person X, then Person X needs to dispose Drug Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToResearch(Person X, Drug Y):- Develop(Person X, Drug Y);",
  "v_rule": "If Person X develops Drug Y, then Person X needs to research Drug Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToProtectFrom(Person X, Natural Phenomenon Y):- HavePhobia(Person X, Natural Phenomenon Y);",
  "v_rule": "If Person X has a phobia of Natural Phenomenon Y, then Person X needs to protect from Natural Phenomenon Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToAdapt(Person X, Condition Y):- Move(Person X, Condition Y);",
  "v_rule": "If Person X moves to Condition Y, then Person X needs to adapt to Condition Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToStore(Person X, Material Y):- Produce(Person X, Material Y);",
  "v_rule": "If Person X produces Material Y, then Person X needs to store Material Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToAvoid(Person X, Substance Y):- Harmful(Person X, Substance Y);",
  "v_rule": "If Substance Y is harmful to Person X, then Person X needs to avoid Substance Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Substance Y):- Addicted(Person X, Substance Y);",
  "v_rule": "If Person X is addicted to Substance Y, then Person X needs to use Substance Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "NeedToClean(Person X, Furniture Y):- Rent(Person X, Furniture Y);",
  "v_rule": "If Person X rents Furniture Y, then Person X needs to clean Furniture Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToSupport(Person X, Organization Y):- Member(Person X, Organization Y);",
  "v_rule": "If Person X is a member of Organization Y, then Person X needs to support Organization Y.",
  "domain": "need",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanReflect(Artwork X, Legislation Y):- InspiredBy(Artwork X, Legislation Y);",
  "v_rule": "If Artwork X is inspired by Legislation Y, then Artwork X can reflect Legislation Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanComplement(Food X, Food Y):- PairWell(Food X, Food Y);",
  "v_rule": "If Food X touched Food Y, then Food X can contaminate Food Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDamage(Furniture X, Food Y):- Fall(Furniture X, Food Y);",
  "v_rule": "If the recipe for Food X includes Substance Y, then Food X can be made of Substance Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeMadeOf(Food X, Material Y):- Contains(Food X, Material Y);",
  "v_rule": "If Material Y is safe for Food X, then Food X can be packaged in Material Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeContaminatedBy(Food X, Material Y):- StoredWith(Food X, Material Y);",
  "v_rule": "If Food X is safe on Material Y, then Food X can be served on Material Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeEatenAt(Food X, Event Y):- SuitableFor(Food X, Event Y);",
  "v_rule": "If Food X is available for Event Y, then Food X can be cooked for Event Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanGrowIn(Food X, Natural Place Y):- NativeTo(Food X, Natural Place Y);",
  "v_rule": "If Food X grows in Natural Place Y, then Food X can be found in Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeInspiredBy(Food X, Natural Place Y):- GrownIn(Food X, Natural Place Y);",
  "v_rule": "If Organization Y sells Food X, then Food X can be served by Organization Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeInspiredBy(Furniture X, Artwork Y):- Reflects(Furniture X, Artwork Y);",
  "v_rule": "If Artwork X is placed on Furniture Y, then Furniture Y can hold Artwork X.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeRestoredWith(Furniture X, Alcohol Y):- DamagedBy(Furniture X, Alcohol Y);",
  "v_rule": "If Furniture X is antique under Legislation Y, then Furniture X can be protected by Legislation Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeStoredIn(Furniture X, Facility Y):- FitsIn(Furniture X, Facility Y);",
  "v_rule": "If Furniture X fits on Platform Y, then Furniture X can be placed on Platform Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeArrangedWith(Furniture X, Furniture Y):- FitInSameRoom(Furniture X, Furniture Y);",
  "v_rule": "If Furniture X and Furniture Y have the same color, then Furniture X can match Furniture Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeAuctionedOn(Furniture X, Show Y):- IsValuable(Furniture X, Show Y);",
  "v_rule": "If Furniture X is required in Event Y, then Furniture X can be used in Event Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBePlacedIn(Furniture X, Natural Place Y):- ResistantTo(Furniture X, Natural Place Y);",
  "v_rule": "If Furniture X is not protected from Natural Place Y, then Furniture X can be damaged by Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeDamagedBy(Furniture X, Natural Place Y):- ExposedTo(Furniture X, Natural Place Y);",
  "v_rule": "If Furniture X is designed for Natural Place Y, then Furniture X can blend with Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBlendWith(Furniture X, Natural Place Y):- DesignedFor(Furniture X, Natural Place Y);",
  "v_rule": "If Furniture X is designed based on Natural Place Y, then Furniture X can be inspired by Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanHelpCopeWith(Game X, Disease Y):- DesignedFor(Game X, Disease Y);",
  "v_rule": "If Game X is designed for Disease Y, then Game X can help cope with Disease Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAggravate(Substance X, Disease Y):- IsAllergen(Substance X, Disease Y);",
  "v_rule": "If Substance X alleviates Disease Y, then Substance X can be used for treatment of Disease Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeFormedBy(Substance X, Natural Phenomenon Y):- ResultOf(Substance X, Natural Phenomenon Y);",
  "v_rule": "If Substance X is exposed to Natural Phenomenon Y, then Substance X can be destroyed by Natural Phenomenon Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeMixedWith(Substance X, Alcohol Y):- IsSoluble(Substance X, Alcohol Y);",
  "v_rule": "If Substance X is illegal under Legislation Y, then Substance X can be regulated by Legislation Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDilute(Substance X, Drug Y):- NonReactive(Substance X, Drug Y);",
  "v_rule": "If Substance X is permeable to Drug Y, then Substance X can absorb Drug Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanContaminate(Substance X, Facility Y):- IsToxic(Substance X, Facility Y);",
  "v_rule": "If Substance X is safe for Facility Y, then Substance X can be stored in Facility Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAbsorb(Substance X, Plant Y):- Need(Substance X, Plant Y);",
  "v_rule": "If Substance X is a fertilizer for Plant Y, then Substance X can promote the growth of Plant Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanContaminate(Substance X, Food Y):- IsToxic(Substance X, Food Y);",
  "v_rule": "If Substance X is a spice for Food Y, then Substance X can enhance the flavor of Food Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStain(Substance X, Furniture Y):- IsColored(Substance X, Furniture Y);",
  "v_rule": "If Substance X is effective on Furniture Y, then Substance X can clean Furniture Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanClean(Substance X, Furniture Y):- IsSafe(Substance X, Furniture Y);",
  "v_rule": "If Substance X is corrosive to Furniture Y, then Substance X can damage Furniture Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDamage(Substance X, Furniture Y):- Corrosive(Substance X, Furniture Y);",
  "v_rule": "If Substance X makes Furniture Y waterproof, then Substance X can protect Furniture Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeThemeOf(Game X, Alcohol Y):- IsFeaturedIn(Game X, Alcohol Y);",
  "v_rule": "If Alcohol Y is featured in Game X, then Alcohol Y can be a theme of Game X.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAbsorb(Substance X, Material Y):- IsSoluble(Substance X, Material Y);",
  "v_rule": "If Substance X is an acid for Material Y, then Substance X can react with Material Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCause(Substance X, Event Y):- IsToxic(Substance X, Event Y);",
  "v_rule": "If Event Y produces Substance X, then Substance X can be a result of Event Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanIngest(Animal X, Substance Y):- Drink(Animal X, Substance Y);",
  "v_rule": "If Animal Y is allergic to Substance X, then Substance X can be harmful to Animal Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAttract(Animal X, Substance Y):- Smell(Animal X, Substance Y);",
  "v_rule": "If Substance X is safe for Animal Y, then Substance X can be applied on Animal Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeCelebratedWith(Game X, Alcohol Y):- IsWinning(Game X, Alcohol Y);",
  "v_rule": "If Game X is winning with Alcohol Y, then Game X can be celebrated with Alcohol Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanErode(Substance X, Natural Place Y):- IsAcidic(Substance X, Natural Place Y);",
  "v_rule": "If Substance X is beneficial to Natural Place Y, then Substance X can enhance Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanEnhance(Substance X, Natural Place Y):- IsNourishing(Substance X, Natural Place Y);",
  "v_rule": "If Substance X causes erosion to Natural Place Y, then Substance X can destroy Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDestroy(Substance X, Natural Place Y):- IsPollutant(Substance X, Natural Place Y);",
  "v_rule": "If Organization Y purchased Substance X, then Substance X can be owned by Organization Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanResearch(Tool X, Disease Y):- AdaptedFor(Tool X, Disease Y);",
  "v_rule": "If Tool X is allowed in Game Y, then Tool X can be used in Game Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanModify(Tool X, Vehicle Y):- DesignedFor(Tool X, Vehicle Y);",
  "v_rule": "If Tool X fits in Vehicle Y, then Tool X can be stored in Vehicle Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeModifiedBy(Game X, Legislation Y):- Governed(Game X, Legislation Y);",
  "v_rule": "If Game X is governed by Legislation Y, then Game X can be modified by Legislation Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRepair(Tool X, Facility Y):- DesignedFor(Tool X, Facility Y);",
  "v_rule": "If Tool X is sharp for Facility Y, then Tool X can damage Facility Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanModify(Tool X, Platform Y):- DesignedFor(Tool X, Platform Y);",
  "v_rule": "If Platform Y has space for Tool X, then Tool X can be stored on Platform Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPlant(Tool X, Plant Y):- DesignedFor(Tool X, Plant Y);",
  "v_rule": "If Tool X is suitable for Plant Y, then Tool X can prune Plant Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanShape(Tool X, Substance Y):- IsHeat(Tool X, Substance Y);",
  "v_rule": "If Tool X is a mixer for Substance Y, then Tool X can mix Substance Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanScare(Tool X, Animal Y):- LooksDangerous(Tool X, Animal Y);",
  "v_rule": "If Tool X is heavy for Animal Y, then Tool X can hurt Animal Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanClean(Tool X, Electronic Device Y):- DesignedFor(Tool X, Electronic Device Y);",
  "v_rule": "If Tool X is designed for Technology Y, then Tool X can be used with Technology Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanProtect(Material X, Vehicle Y):- IsResistant(Material X, Vehicle Y);",
  "v_rule": "If Material X can corrode Vehicle Y, then Material X can damage Vehicle Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRepair(Material X, Vehicle Y):- IsSuitable(Material X, Vehicle Y);",
  "v_rule": "If Material X is porous to Alcohol Y, then Material X can absorb Alcohol Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCover(Material X, Platform Y):- IsWaterproof(Material X, Platform Y);",
  "v_rule": "If Publication Y is made of Material X, then Material X can be used in Publication Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanReactWith(Material X, Substance Y):- IsBase(Material X, Substance Y);",
  "v_rule": "If Material X is formed from Substance Y, then Material X can be made of Substance Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanResist(Material X, Substance Y):- IsCoated(Material X, Substance Y);",
  "v_rule": "If Material X is a component of Tool Y, then Material X can be used to make Tool Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanHarm(Animal X, Material Y):- Eat(Animal X, Material Y);",
  "v_rule": "If Material X is food for Animal Y, then Material X can be used for Animal Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeMadeFrom(Material X, Technology Y):- RequiredBy(Material X, Technology Y);",
  "v_rule": "If Material X can overheat Technology Y, then Material X can damage Technology Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeBasedOn(Game X, Job Y):- Simulate(Game X, Job Y);",
  "v_rule": "If Game X simulates Job Y, then Game X can be based on Job Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanErode(Material X, Natural Place Y):- IsAbrasive(Material X, Natural Place Y);",
  "v_rule": "If Material X is mined from Natural Place Y, then Material X can be extracted from Natural Place Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeInspiredBy(Show X, Artwork Y):- Discusses(Show X, Artwork Y);",
  "v_rule": "If Artwork X was purchased for Show Y, then Artwork X can feature in Show Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 1,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanFeed(Person X, Animal Y):- Cooks(Person X, Food Z1), Eats(Animal Y, Food Z1);",
  "v_rule": "If Person X cooks Food Z1 and Animal Y eats Food Z1, then Person X can feed Animal Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanEvaluate(Person X, Alcohol Y):- Have(Person X, Skill Z1), Taste(Skill Z1, Alcohol Y);",
  "v_rule": "If Person X has Skill Z1 and Skill Z1 is used for tasting Alcohol Y, then Person X can evaluate Alcohol Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanTreat(Person X, Disease Y):- Is(Person X, Job Z1), Specialize(Job Z1, Disease Y);",
  "v_rule": "If Person X has Job Z1 and Job Z1 specializes in treating Disease Y, then Person X can treat Disease Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasKnowledgeOf(Person X, Disease Y):- Is(Person X, Job Z1), Treat(Job Z1, Disease Y);",
  "v_rule": "If Person X has Job Z1 and Job Z1 involves treating Disease Y, then Person X has knowledge of Disease Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanResearch(Person X, Disease Y):- Have(Person X, Authorization Z1), Study(Authorization Z1, Disease Y);",
  "v_rule": "If Person X has Authorization Z1 and Authorization Z1 allows the study of Disease Y, then Person X can research Disease Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPrescribe(Person X, Drug Y):- Is(Person X, Job Z1), IsDoctor(Job Z1, Drug Y);",
  "v_rule": "If Person X has Job Z1 and Job Z1 is a doctor who can prescribe Drug Y, then Person X can prescribe Drug Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanConsume(Person X, Drug Y):- Contract(Person X, Condition Z1), Treat(Drug Y, Condition Z1);",
  "v_rule": "If Person X has Condition Z1 and Drug Y treats Condition Z1, then Person X can consume Drug Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPredict(Person X, Natural Phenomenon Y):- Use(Person X, Tool Z2), DesignedFor(Tool Z2, Natural Phenomenon Y);",
  "v_rule": "If Person X uses Tool Z2 and Tool Z2 is designed for predicting Natural Phenomenon Y, then Person X can predict Natural Phenomenon Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStudy(Person X, Natural Phenomenon Y):- Have(Person X, Tool Z), UsedInExperiment(Tool Z, Natural Phenomenon Y);",
  "v_rule": "If Person X has Tool Z and Tool Z is used in experiments involving Natural Phenomenon Y, then Person X can study Natural Phenomenon Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMeasure(Person X, Natural Phenomenon Y):- Have(Person X, Tool Z1), DesignedFor(Tool Z1, Natural Phenomenon Y);",
  "v_rule": "If Person X has Tool Z1 and Tool Z1 is designed for measuring Natural Phenomenon Y, then Person X can measure Natural Phenomenon Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStudy(Person X, Natural Phenomenon Y):- Have(Person X, Skill Z2), RequiredForMeasuring(Skill Z2, Natural Phenomenon Y);",
  "v_rule": "If Person X has Skill Z2 and Skill Z2 is required for measuring Natural Phenomenon Y, then Person X can study Natural Phenomenon Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStudy(Person X, Natural Phenomenon Y):- Own(Person X, Electronic Device Z1), SuitableForRecording(Electronic Device Z1, Natural Phenomenon Y);",
  "v_rule": "If Person X owns Electronic Device Z1 and Electronic Device Z1 is suitable for recording Natural Phenomenon Y, then Person X can study Natural Phenomenon Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanExperience(Person X, Condition Y):- Have(Person X, Age Z1), RiskFactor(Age Z1, Condition Y);",
  "v_rule": "If Person X has Age Z1 and Age Z1 is a risk factor for Condition Y, then Person X can experience Condition Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SusceptibleTo(Person X, Condition Y):- Have(Person X, Age Z1), CommonIn(Age Z1, Condition Y);",
  "v_rule": "If Person X has Age Z1 and Condition Y is common in Age Z1, then Person X is susceptible to Condition Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDevelopSymptoms(Person X, Condition Y):- Have(Person X, Age Z1), Prevalence(Age Z1, Condition Y);",
  "v_rule": "If Person X is of Age Z1 and the prevalence of Condition Y is associated with Age Z1, then Person X can develop symptoms of Condition Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanTreat(Person X, Condition Y):- Is(Person X, Job Z1), Manage(Job Z1, Condition Y);",
  "v_rule": "If Person X has Job Z1 and Job Z1 is capable of managing Condition Y, then Person X can treat Condition Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRecycle(Person X, Material Y):- Study(Person X, Skill Z2), EffectiveFor(Skill Z2, Material Y);",
  "v_rule": "If Person X has studied Skill Z2 and Skill Z2 is effective for recycling Material Y, then Person X can recycle Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDispose(Person X, Material Y):- Study(Person X, Skill Z1), SuitableFor(Material Y, Skill Z1);",
  "v_rule": "If Person X has studied Skill Z1 and Skill Z1 is suitable for disposing Material Y, then Person X can dispose Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanManipulate(Person X, Material Y):- Buy(Person X, Tool Z1), SuitableFor(Tool Z1, Material Y);",
  "v_rule": "If Person X buys Tool Z1 and Tool Z1 is suitable for manipulating Material Y, then Person X can manipulate Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanManipulate(Person X, Material Y):- Have(Person X, Skill Z2), UsedIn(Skill Z2, Material Y);",
  "v_rule": "If Person X has Skill Z2 and Skill Z2 is used in manipulating Material Y, then Person X can manipulate Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanShape(Person X, Material Y):- Master(Person X, Skill Z2), NecessaryFor(Skill Z2, Material Y);",
  "v_rule": "If Person X has mastered Skill Z2 and Skill Z2 is necessary for shaping Material Y, then Person X can shape Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCut(Person X, Material Y):- Develop(Person X, Strength Z2), RequireStrength(Material Y, Strength Z2);",
  "v_rule": "If Person X has developed Strength Z2 and Strength Z2 is required to cut Material Y, then Person X can cut Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDispose(Person X, Substance Y):- Have(Person X, Tool Z2), DesignedFor(Tool Z2, Substance Y);",
  "v_rule": "If Person X has Tool Z2 and Tool Z2 is designed for disposing Substance Y, then Person X can dispose Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAbsorb(Person X, Substance Y):- Consume(Person X, Food Z2), Added(Food Z2, Substance Y);",
  "v_rule": "If Person X consumes Food Z2 and Substance Y is added to Food Z2, then Person X can absorb Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeExposedTo(Person X, Substance Y):- Contract(Person X, Condition Z1), NotHarmful(Substance Y, Condition Z1);",
  "v_rule": "If Person X has Condition Z1 and Substance Y is not harmful to Condition Z1, then Person X can be exposed to Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeExposedTo(Person X, Substance Y):- WorkIn(Person X, Condition Z2), Required(Substance Y, Condition Z2);",
  "v_rule": "If Person X works in Condition Z2 and Substance Y is required for Condition Z2, then Person X can be exposed to Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMove(Person X, Furniture Y):- Have(Person X, Tool Z), CanLift(Tool Z, Furniture Y);",
  "v_rule": "If Person X has Tool Z and Tool Z can lift Furniture Y, then Person X can move Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRepair(Person X, Furniture Y):- Know(Person X, Skill Z2), Damaged(Furniture Y, Skill Z2);",
  "v_rule": "If Person X knows Skill Z2 and Skill Z2 is needed to repair the damaged Furniture Y, then Person X can repair Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanQuote(Person X, Publication Y):- Practice(Person X, Skill Z1), WrittenIn(Publication Y, Skill Z1);",
  "v_rule": "If Person X practices Skill Z1 and Publication Y is written in Skill Z1, then Person X can quote Publication Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanWorkFor(Person X, Organization Y):- Taught(Person X, Skill Z1), Require(Skill Z1, Organization Y);",
  "v_rule": "If Person X has been taught Skill Z1 and Skill Z1 is required by Organization Y, then Person X can work for Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanWorkFor(Person X, Organization Y):- Studied(Person X, Skill Z1), Require(Skill Z1, Organization Y);",
  "v_rule": "If Person X has studied Skill Z1 and Organization Y requires Skill Z1, then Person X can work for Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "PotentialEmployee(Person X, Organization Y):- Taught(Person X, Skill Z1), Value(Organization Y, Skill Z1);",
  "v_rule": "If Person X has been taught Skill Z1 and Organization Y values Skill Z1, then Person X is a potential employee for Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "PotentialEmployee(Person X, Organization Y):- Have(Person X, Authorization Z2), Require(Authorization Z2, Organization Y);",
  "v_rule": "If Person X has Authorization Z2 and Authorization Z2 is required by Organization Y, then Person X is a potential employee for Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPrune(Person X, Plant Y):- Borrow(Person X, Tool Z1), SuitableFor(Tool Z1, Plant Y);",
  "v_rule": "If Person X has borrowed Tool Z1 and Tool Z1 is suitable for pruning Plant Y, then Person X can prune Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCollaborate(Person X, Organization Y):- Have(Person X, Skill Z2), Project(Organization Y, Skill Z2);",
  "v_rule": "If Person X has Skill Z2 and Organization Y has a project that requires Skill Z2, then Person X can collaborate with Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AuthorizedIn(Person X, Facility Y):- Have(Person X, Authorization Z1), Accept(Authorization Z1, Facility Y);",
  "v_rule": "If Person X has Authorization Z1 and Facility Y accepts Authorization Z1, then Person X is authorized in Facility Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasAccessTo(Person X, Facility Y):- Have(Person X, Authorization Z1), RequiredForEntry(Authorization Z1, Facility Y);",
  "v_rule": "If Person X has Authorization Z1 and Authorization Z1 is required for entry to Facility Y, then Person X has access to Facility Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuild(Person X, Artwork Y):- Studied(Person X, Skill Z1), RequiredForArtwork(Skill Z1, Artwork Y);",
  "v_rule": "If Person X has studied Skill Z1 and Skill Z1 is required for creating Artwork Y, then Person X can build Artwork Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCamp(Person X, Natural Place Y):- Know(Person X, Skill Z2), NeededForSurvival(Skill Z2, Natural Place Y);",
  "v_rule": "If Person X knows Skill Z2 and Skill Z2 is needed for survival in Natural Place Y, then Person X can camp in Natural Place Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPrune(Person X, Plant Y):- Knows(Person X, Skill Z2), EssentialFor(Skill Z2, Plant Y);",
  "v_rule": "If Person X knows Skill Z2 and Skill Z2 is essential for pruning Plant Y, then Person X can prune Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "KnowsPlantCare(Person X, Plant Y):- Studied(Person X, Skill Z2), NeededFor(Skill Z2, Plant Y);",
  "v_rule": "If Person X has studied Skill Z2 and Skill Z2 is needed for the care of Plant Y, then Person X knows how to care for Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDisplay(Person X, Artwork Y):- Buy(Person X, Space Z1), SuitableFor(Space Z1, Artwork Y);",
  "v_rule": "If Person X has bought Space Z1 and Space Z1 is suitable for displaying Artwork Y, then Person X can display Artwork Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRestore(Person X, Artwork Y):- Have(Person X, Skill Z1), Damaged(Artwork Y, Skill Z1);",
  "v_rule": "If Person X has Skill Z1 and Artwork Y is damaged in a way that requires Skill Z1 to restore, then Person X can restore Artwork Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasGardeningSkills(Person X, Plant Y):- Taught(Person X, Skill Z2), NeededFor(Skill Z2, Plant Y);",
  "v_rule": "If Person X has been taught Skill Z2 and Skill Z2 is needed for Plant Y, then Person X has gardening skills for Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanEvaluateArtwork(Person X, Artwork Y):- Studied(Person X, Skill Z1), Complex(Artwork Y, Skill Z1);",
  "v_rule": "If Person X has studied Skill Z1 and Skill Z1 is needed to understand the complexity of Artwork Y, then Person X can evaluate Artwork Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMaintainPlant(Person X, Plant Y):- Practiced(Person X, Skill Z2), NeededFor(Skill Z2, Plant Y);",
  "v_rule": "If Person X has practiced Skill Z2 and Skill Z2 is needed for maintaining Plant Y, then Person X can maintain Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanSpecializeIn(Person X, Job Y):- Have(Person X, Authorization Z1), Need(Job Y, Authorization Z1);",
  "v_rule": "If Person X has Authorization Z1 and Job Y needs Authorization Z1, then Person X can specialize in Job Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "PotentialCareer(Person X, Job Y):- Granted(Person X, Authorization Z1), Law(Job Y, Authorization Z1);",
  "v_rule": "If Person X has been granted Authorization Z1 and the job Y requires Authorization Z1 according to the law, then Job Y is a potential career for Person X.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPlay(Person X, Game Y):- Buy(Person X, Electronic Device Z1), RequiredForGame(Electronic Device Z1, Game Y);",
  "v_rule": "If Person X has bought Electronic Device Z1 and Electronic Device Z1 is required for playing Game Y, then Person X can play Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanHarvest(Person X, Plant Y):- Buy(Person X, Tool Z2), NeededFor(Tool Z2, Plant Y);",
  "v_rule": "If Person X has bought Tool Z2 and Tool Z2 is needed for harvesting Plant Y, then Person X can harvest Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCompete(Person X, Game Y):- Master(Person X, Skill Z1), RulesSpecify(Skill Z1, Game Y);",
  "v_rule": "If Person X has mastered Skill Z1 and the rules of Game Y specify Skill Z1, then Person X can compete in Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCompete(Person X, Game Y):- Inherit(Person X, Tool Z2), RequiredForGame(Tool Z2, Game Y);",
  "v_rule": "If Person X has inherited Tool Z2 and Tool Z2 is required for Game Y, then Person X can compete in Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNavigate(Person X, Vehicle Y):- Know(Person X, Skill Z1), Drive(Skill Z1, Vehicle Y);",
  "v_rule": "If Person X knows Skill Z1 and Skill Z1 is needed to drive Vehicle Y, then Person X can navigate Vehicle Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPark(Person X, Vehicle Y):- Rent(Person X, Space Z2), SuitableFor(Space Z2, Vehicle Y);",
  "v_rule": "If Person X rents Space Z2 and Space Z2 is suitable for Vehicle Y, then Person X can park Vehicle Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanImproveTool(Person X, Tool Y):- Find(Person X, Material Z2), Enhance(Tool Y, Material Z2);",
  "v_rule": "If Person X finds Material Z2 and Material Z2 can enhance Tool Y, then Person X can improve Tool Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "QualifiedForJob(Person X, Technology Y):- Taught(Person X, Skill Z1), OperateWith(Skill Z1, Technology Y);",
  "v_rule": "If Person X has been taught Skill Z1 and Skill Z1 is needed to operate Technology Y, then Person X is qualified for the job involving Technology Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUpgrade(Person X, Technology Y):- Knows(Person X, Skill Z1), Improves(Skill Z1, Technology Y);",
  "v_rule": "If Person X knows Skill Z1 and Skill Z1 improves Technology Y, then Person X can upgrade Technology Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRepair(Person X, Electronic Device Y):- Master(Person X, Skill Z2), NeededForFixing(Skill Z2, Electronic Device Y);",
  "v_rule": "If Person X has mastered Skill Z2 and Skill Z2 is needed for fixing Electronic Device Y, then Person X can repair Electronic Device Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Person X, Platform Y):- Studied(Person X, Technology Z1), PlatformRequires(Technology Z1, Platform Y);",
  "v_rule": "If Person X has studied Technology Z1 and Technology Z1 is required to use Platform Y, then Person X can use Platform Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Person X, Platform Y):- Works_With(Person X, Technology Z1), PlatformRequires(Technology Z1, Platform Y);",
  "v_rule": "If Person X works with Technology Z1 and Platform Y requires Technology Z1, then Person X can use Platform Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Person X, Platform Y):- Bought(Person X, Electronic Device Z2), PlatformSupports(Electronic Device Z2, Platform Y);",
  "v_rule": "If Person X has bought Electronic Device Z2 and Platform Y supports Electronic Device Z2, then Person X can use Platform Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanInteractWithCommunity(Person X, Platform Y):- Have(Person X, Electronic Device Z), Supports(Platform Y, Electronic Device Z);",
  "v_rule": "If Person X has an Electronic Device Z and Platform Y supports Electronic Device Z, then Person X can interact with the community on Platform Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCommunicateOn(Person X, Platform Y):- Taught(Person X, Skill Z2), Require(Platform Y, Skill Z2);",
  "v_rule": "If Person X has been taught Skill Z2 and Platform Y requires Skill Z2, then Person X can communicate on Platform Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "KnowsHowToUse(Person X, Platform Y):- Practice(Person X, Skill Z2), Maintain(Platform Y, Skill Z2);",
  "v_rule": "If Person X has practiced Skill Z2 and Skill Z2 is required to maintain Platform Y, then Person X knows how to use Platform Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasSkills(Person X, Platform Y):- Knows(Person X, Skill Z1), RequiredForPlatform(Skill Z1, Platform Y);",
  "v_rule": "If Person X knows Skill Z1 and Skill Z1 is required for Platform Y, then Person X has the skills for Platform Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasAccessTo(Person X, Platform Y):- Have(Person X, Electronic Device Z1), Support(Platform Y, Electronic Device Z1);",
  "v_rule": "If Person X has Electronic Device Z1 and Platform Y supports Electronic Device Z1, then Person X has access to Platform Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCook(Person X, Food Y):- Studied(Person X, Skill Z), RequiredFor(Skill Z, Food Y);",
  "v_rule": "If Person X has studied Skill Z and Skill Z is required for cooking Food Y, then Person X can cook Food Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanSell(Person X, Financial Product Y):- Have(Person X, Authorization Z2), MandatedByCompany(Authorization Z2, Financial Product Y);",
  "v_rule": "If Person X has Authorization Z2 and the company mandates Authorization Z2 for selling Financial Product Y, then Person X can sell Financial Product Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Person X, Authorization Y):- Obtain(Person X, Skill Z), NeededFor(Skill Z, Authorization Y);",
  "v_rule": "If Person X has obtained Skill Z and Skill Z is needed for Authorization Y, then Person X can use Authorization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCook(Person X, Food Y):- Knows(Person X, Skill Z), Prepare(Skill Z, Food Y);",
  "v_rule": "If Person X knows Skill Z and Skill Z is needed to prepare Food Y, then Person X can cook Food Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDiscuss(Person X, Publication Y):- Practiced(Person X, Skill Z1), RequiredForReading(Skill Z1, Publication Y);",
  "v_rule": "If Person X has practiced Skill Z1 and Skill Z1 is required for reading Publication Y, then Person X can discuss Publication Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCompose(Person X, Publication Y):- Buy(Person X, Tool Z2), RequiredForWriting(Tool Z2, Publication Y);",
  "v_rule": "If Person X has bought Tool Z2 and Tool Z2 is required for writing Publication Y, then Person X can compose Publication Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStore(Person X, Food Y):- Own(Person X, Space Z2), EnoughFor(Space Z2, Food Y);",
  "v_rule": "If Person X owns Space Z2 and Space Z2 is enough for storing Food Y, then Person X can store Food Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStore(Person X, Food Y):- Have(Person X, Space Z2), Fit(Space Z2, Food Y);",
  "v_rule": "If Person X has Space Z2 and Food Y can fit into Space Z2, then Person X can store Food Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDrink(Person X, Alcohol Y):- NotHave(Person X, Condition Z), Worsen(Alcohol Y, Condition Z);",
  "v_rule": "If Person X does not have Condition Z and Alcohol Y worsens Condition Z, then Person X can drink Alcohol Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanProduce(Person X, Alcohol Y):- Knows(Person X, Skill Z1), Brew(Skill Z1, Alcohol Y);",
  "v_rule": "If Person X knows Skill Z1 and Skill Z1 is used to brew Alcohol Y, then Person X can produce Alcohol Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasSkill(Person X, Alcohol Y):- Studied(Person X, Skill Z1), Ferment(Skill Z1, Alcohol Y);",
  "v_rule": "If Person X has studied Skill Z1 and Skill Z1 is used to ferment Alcohol Y, then Person X has the skill to make Alcohol Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Plant Y):- LiveIn(Person X, Region Z), PlantedIn(Plant Y, Region Z);",
  "v_rule": "If Person X lives in Region Z and Plant Y is planted in Region Z, then Person X can access Plant Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Person X, Furniture Y):- NotSensitiveTo(Person X, Material Z), MadeOf(Furniture Y, Material Z);",
  "v_rule": "If Person X is not sensitive to Material Z and Furniture Y is made of Material Z, then Person X can use Furniture Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Publication Y):- MovedTo(Person X, Region Z1), AvailableIn(Publication Y, Region Z1);",
  "v_rule": "If Person X has moved to Region Z1 and Publication Y is available in Region Z1, then Person X can access Publication Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Plant Y):- Exist(Person X, Time Period Z1), BloomIn(Plant Y, Time Period Z1);",
  "v_rule": "If Person X exists during Time Period Z1 and Plant Y blooms in Time Period Z1, then Person X can access Plant Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Job Y):- Trained(Person X, Skill Z), Requires(Job Y, Skill Z);",
  "v_rule": "If Person X is trained in Skill Z and Job Y requires Skill Z, then Person X can access Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "PotentialCandidate(Person X, Job Y):- HasSkill(Person X, Skill Z), Requires(Job Y, Skill Z);",
  "v_rule": "If Person X has Skill Z and Job Y requires Skill Z, then Person X is a potential candidate for Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Job Y):- Earns(Person X, Authorization Z2), Requires(Job Y, Authorization Z2);",
  "v_rule": "If Person X earns Authorization Z2 and Job Y requires Authorization Z2, then Person X can access Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Job Y):- HasAuthorization(Person X, Authorization Z2), IndustryStandard(Job Y, Authorization Z2);",
  "v_rule": "If Person X has Authorization Z2 and Authorization Z2 is the industry standard for Job Y, then Person X can access Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Game Y):- Bought(Person X, Electronic Device Z), CompatibleWith(Game Y, Electronic Device Z);",
  "v_rule": "If Person X has bought Electronic Device Z and Game Y is compatible with Electronic Device Z, then Person X can access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Game Y):- Owns(Person X, Electronic Device Z), Supports(Electronic Device Z, Game Y);",
  "v_rule": "If Person X owns Electronic Device Z and Electronic Device Z supports Game Y, then Person X can access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPlay(Person X, Game Y):- Received(Person X, Electronic Device Z), UpdatedFor(Game Y, Electronic Device Z);",
  "v_rule": "If Person X has received Electronic Device Z and Game Y is updated for Electronic Device Z, then Person X can play Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPlay(Person X, Game Y):- MoveTo(Person X, Region Z1), ReleasedIn(Game Y, Region Z1);",
  "v_rule": "If Person X moves to Region Z1 and Game Y is released in Region Z1, then Person X can play Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Tool Y):- LocatedIn(Person X, Region Z1), PlacedIn(Tool Y, Region Z1);",
  "v_rule": "If Person X is located in Region Z1 and Tool Y is also placed in Region Z1, then Person X can access Tool Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Platform Y):- Studied(Person X, Technology Z), Requires(Platform Y, Technology Z);",
  "v_rule": "If Person X has studied Technology Z, and Platform Y requires knowledge of Technology Z, then Person X can access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Platform Y):- KnowsHowToUse(Person X, Technology Z), Operates_With(Platform Y, Technology Z);",
  "v_rule": "If Person X knows how to use Technology Z and Platform Y operates with Technology Z, then Person X can access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Financial Product Y):- EmployedAt(Person X, Organization Z1), DistributedBy(Organization Z1, Financial Product Y);",
  "v_rule": "If Person X is employed at Organization Z1 and Financial Product Y is distributed by Organization Z1, then Person X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Legislation Y):- BornIn(Person X, Region Z), EnactedIn(Legislation Y, Region Z);",
  "v_rule": "If Person X was born in Region Z and Legislation Y was enacted in Region Z, then Person X can access Legislation Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AtRisk(Person X, Disease Y):- LiveIn(Person X, Region Z), PrevalentIn(Disease Y, Region Z);",
  "v_rule": "If Person X lives in Region Z and Disease Y is prevalent in Region Z, then Person X is at risk of Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStudy(Person X, Natural Phenomenon Y):- LocatedIn(Person X, Region Z), OccurIn(Natural Phenomenon Y, Region Z);",
  "v_rule": "If Person X is located in Region Z and Natural Phenomenon Y occurs in Region Z, then Person X can study Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanExperience(Person X, Natural Phenomenon Y):- LiveIn(Person X, Time Period Z1), OccurDuring(Natural Phenomenon Y, Time Period Z1);",
  "v_rule": "If Person X lives in Time Period Z1 and Natural Phenomenon Y occurs during Time Period Z1, then Person X can experience Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanObserve(Person X, Animal Y):- MoveTo(Person X, Region Z), Born(Animal Y, Region Z);",
  "v_rule": "If Person X moves to Region Z and Animal Y is born in Region Z, then Person X can observe Animal Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Material Y):- LiveIn(Person X, Region Z1), NaturalResource(Material Y, Region Z1);",
  "v_rule": "If Person X lives in Region Z1 and Material Y is a natural resource in Region Z1, then Person X can access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Person X, Substance Y):- Immune(Person X, Substance Z1), Derived(Substance Z1, Substance Z1);",
  "v_rule": "If Person X is immune to Substance Z1 and Substance Y is derived from Substance Z1, then Person X can use Substance Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Financial Product Y):- RegisteredIn(Organization X, Region Z), SoldIn(Financial Product Y, Region Z);",
  "v_rule": "If Organization X is registered in Region Z and Financial Product Y is sold in Region Z, then Organization X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Legislation Y):- OperateIn(Organization X, Region Z), PassedIn(Legislation Y, Region Z);",
  "v_rule": "If Organization X operates in Region Z and Legislation Y has been passed in Region Z, then Organization X can access Legislation Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MustComply(Organization X, Legislation Y):- OperateIn(Organization X, Region Z), EnforcedIn(Legislation Y, Region Z);",
  "v_rule": "If Organization X operates in Region Z and Legislation Y is enforced in Region Z, then Organization X must comply with Legislation Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Technology Y):- NotBanned(Organization X, Technology Z), EvolvedFrom(Technology Z, Technology Z);",
  "v_rule": "If Organization X is not banned from using Technology Z and Technology Y has evolved from Technology Z, then Organization X can access Technology Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Show Y):- Sponsor(Organization X, Event Z), OrganizedBy(Event Z, Show Y);",
  "v_rule": "If Organization X sponsors Event Z and Event Z is organized by Show Y, then Organization X can access Show Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Food Y):- LocatedIn(Organization X, Region Z), NativeTo(Food Y, Region Z);",
  "v_rule": "If Organization X is located in Region Z and Food Y is native to Region Z, then Organization X can access Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Electronic Device Y):- EquippedWith(Vehicle X, Technology Z), DesignedFor(Electronic Device Y, Technology Z);",
  "v_rule": "If Vehicle X is equipped with Technology Z and Electronic Device Y is designed for Technology Z, then Vehicle X can access Electronic Device Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Natural Place Y):- AdaptedTo(Vehicle X, Condition Z1), HasCondition(Natural Place Y, Condition Z1);",
  "v_rule": "If Vehicle X is adapted to Condition Z1 and Natural Place Y has Condition Z1, then Vehicle X can access Natural Place Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Drug Y):- HaveBranchIn(Organization X, Region Z), LegalIn(Drug Y, Region Z);",
  "v_rule": "If Organization X has a branch in Region Z and Drug Y is legal in Region Z, then Organization X can access Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Platform Y):- NotExceed(Vehicle X, Weight Z1), TestedFor(Platform Y, Weight Z1);",
  "v_rule": "If Vehicle X does not exceed Weight Z1 and Platform Y has been tested for Weight Z1, then Vehicle X can access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Food Y):- OperateIn(Vehicle X, Region Z1), CultivatedIn(Food Y, Region Z1);",
  "v_rule": "If Vehicle X operates in Region Z1 and Food Y is cultivated in Region Z1, then Vehicle X can access Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Event X, Material Y):- HeldIn(Event X, Region Z1), ImportedTo(Material Y, Region Z1);",
  "v_rule": "If Event X is held in Region Z1 and Material Y is imported to Region Z1, then Event X can access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Event X, Disease Y):- Attend(Animal Z, Event X), Carrier(Animal Z, Disease Y);",
  "v_rule": "If Animal Z attends Event X and Animal Z is a carrier of Disease Y, then Disease Y can be accessed at Event X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanEat(Event X, Food Y):- ScheduledFor(Event X, Time Period Z1), MatureIn(Food Y, Time Period Z1);",
  "v_rule": "If Event X is scheduled for Time Period Z1 and Food Y matures in Time Period Z1, then Food Y can be eaten at Event X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Animal Y):- AdaptedTo(Animal X, Natural Place Z), LiveIn(Animal Y, Natural Place Z);",
  "v_rule": "If Animal X is adapted to Natural Place Z and Animal Y lives in Natural Place Z, then Animal X can access Animal Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Tool Y):- Bought(Organization X, Facility Z), StoredIn(Tool Y, Facility Z);",
  "v_rule": "If Organization X has bought Facility Z and Tool Y is stored in Facility Z, then Organization X can access Tool Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Substance Y):- MigratedTo(Animal X, Region Z), FoundIn(Substance Y, Region Z);",
  "v_rule": "If Animal X has migrated to Region Z and Substance Y is found in Region Z, then Animal X can access Substance Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanTouch(Animal X, Substance Y):- Tolerate(Animal X, Substance Z), Composed(Substance Z, Substance Z);",
  "v_rule": "If Animal X tolerates Substance Z and Substance Y is composed of Substance Z, then Animal X can touch Substance Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Plant Y):- ActiveDuring(Animal X, Time Period Z1), AdaptedTo(Plant Y, Time Period Z1);",
  "v_rule": "If Animal X is active during Time Period Z1 and Plant Y is adapted to Time Period Z1, then Animal X can access Plant Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "Experiences(Animal X, Natural Phenomenon Y):- MigratedTo(Animal X, Region Z), CommonIn(Natural Phenomenon Y, Region Z);",
  "v_rule": "If Animal X has migrated to Region Z and Natural Phenomenon Y is common in Region Z, then Animal X experiences Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Tool Y):- HasBranchIn(Organization X, Region Z1), AvailableIn(Tool Y, Region Z1);",
  "v_rule": "If Organization X has a branch in Region Z1 and Tool Y is available in Region Z1, then Organization X can access Tool Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Disease Y):- Eat(Animal X, Food Z), ExposedTo(Food Z, Disease Y);",
  "v_rule": "If Animal X eats Food Z and Food Z has been exposed to Disease Y, then Animal X can potentially access Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanContract(Animal X, Disease Y):- Forage(Animal X, Food Z), InfectedBy(Food Z, Disease Y);",
  "v_rule": "If Animal X forages for Food Z and Food Z is infected by Disease Y, then Animal X can contract Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AtRisk(Animal X, Disease Y):- Eat(Animal X, Food Z), ContaminatedWith(Food Z, Disease Y);",
  "v_rule": "If Animal X eats Food Z, and Food Z is contaminated with Disease Y, then Animal X is at risk of Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AtRisk(Animal X, Disease Y):- Fed(Animal X, Food Z), TouchedBy(Food Z, Disease Y);",
  "v_rule": "If Animal X has been fed Food Z and Food Z has been touched by Disease Y, then Animal X is at risk of Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Technology X, Electronic Device Y):- UpdatedFor(Technology X, Platform Z), RunOn(Electronic Device Y, Platform Z);",
  "v_rule": "If Technology X is updated for Platform Z and Electronic Device Y runs on Platform Z, then Technology X can access Electronic Device Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Electronic Device Y):- Donated_to(Organization X, Artwork Z), StoredIn(Electronic Device Y, Artwork Z);",
  "v_rule": "If Organization X has received Artwork Z as a donation and Artwork Z is stored in Electronic Device Y, then Organization X can access Electronic Device Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Electronic Device Y):- EstablishedIn(Organization X, Region Z1), SoldIn(Electronic Device Y, Region Z1);",
  "v_rule": "If Organization X is established in Region Z1 and Electronic Device Y is sold in Region Z1, then Organization X can access Electronic Device Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Facility Y):- Organized(Organization X, Event Z2), RequiredFor(Facility Y, Event Z2);",
  "v_rule": "If Organization X has organized Event Z2 and Facility Y is required for Event Z2, then Organization X can access Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Natural Place Y):- OperateDuring(Organization X, Time Period Z2), SafeDuring(Natural Place Y, Time Period Z2);",
  "v_rule": "If Organization X operates during Time Period Z2 and Natural Place Y is safe during Time Period Z2, then Organization X can access Natural Place Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasKnowledgeOf(Organization X, Material Y):- Legal(Organization X, Material Z), Derived(Material Z, Material Z);",
  "v_rule": "If Organization X legally has Material Z and Material Z is derived from Material Y, then Organization X has knowledge of Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Organization X, Material Y):- NotBanned(Organization X, Material Z), MadeOf(Material Y, Material Z);",
  "v_rule": "If Organization X is not banned from using Material Z and Material Y is made of Material Z, then Organization X can use Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Technology Y):- FoundedIn(Organization X, Region Z), ImportedTo(Technology Y, Region Z);",
  "v_rule": "If Organization X was founded in Region Z and Technology Y was imported to Region Z, then Organization X can access Technology Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Platform Y):- UseTechnology(Organization X, Technology Z), Compatible(Platform Y, Technology Z);",
  "v_rule": "If Organization X uses Technology Z and Platform Y is compatible with Technology Z, then Organization X can access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Disease Y):- Study(Organization X, Disease Z1), CausedBy(Disease Y, Disease Z1);",
  "v_rule": "If Organization X studies Disease Z1 and Disease Y is caused by Disease Z1, then Organization X can access information about Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Technology X, Material Y):- DesignedFor(Technology X, Material Z), MadeOf(Material Y, Material Z);",
  "v_rule": "If Technology X is designed for Material Z and Material Y is made of Material Z, then Technology X can be used with Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Technology X, Game Y):- Supports(Technology X, Platform Z), PortedTo(Game Y, Platform Z);",
  "v_rule": "If Technology X supports Platform Z and Game Y is ported to Platform Z, then Technology X can access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPlay(Electronic Device X, Game Y):- CompatibleWith(Game Y, Platform Z), RunOn(Electronic Device X, Platform Z);",
  "v_rule": "If Game Y is compatible with Platform Z and Electronic Device X can run on Platform Z, then Electronic Device X can play Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Electronic Device X, Disease Y):- EquippedWith(Electronic Device X, Technology Z), UpdatedFor(Technology Z, Disease Y);",
  "v_rule": "If Electronic Device X is equipped with Technology Z and Technology Z is updated for Disease Y, then Electronic Device X can access information about Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Electronic Device X, Artwork Y):- UpgradedWith(Electronic Device X, Technology Z), RequiredBy(Artwork Y, Technology Z);",
  "v_rule": "If Electronic Device X has been upgraded with Technology Z and Artwork Y requires Technology Z, then Electronic Device X can access Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Electronic Device X, Artwork Y):- InstalledWith(Electronic Device X, Technology Z), RequiredBy(Artwork Y, Technology Z);",
  "v_rule": "If Electronic Device X is installed with Technology Z and Technology Z is required by Artwork Y, then Electronic Device X can access Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Electronic Device X, Financial Product Y):- Supports(Electronic Device X, Platform Z), OfferedOn(Platform Z, Financial Product Y);",
  "v_rule": "If Electronic Device X supports Platform Z and Financial Product Y is offered on Platform Z, then Electronic Device X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Substance X, Facility Y):- GrownIn(Substance X, Region Z1), TransportTo(Region Z1, Facility Y);",
  "v_rule": "If Substance X is grown in Region Z1 and Region Z1 is able to transport to Facility Y, then Substance X can access Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Drug X, Facility Y):- DeliveredTo(Drug X, Facility Z1), LocatedIn(Facility Y, Facility Z1);",
  "v_rule": "If Drug X is delivered to Facility Z1 and Facility Y is located in Facility Z1, then Drug X can be accessed at Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Substance X, Legislation Y):- Legal(Substance X, Material Z), Regulate(Material Z, Legislation Y);",
  "v_rule": "If Substance X is legal under Material Z and Material Z is regulated by Legislation Y, then Substance X can be accessed under Legislation Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Natural Place Y):- LocatedIn(Facility X, Region Z), FormedIn(Natural Place Y, Region Z);",
  "v_rule": "If Facility X is located in Region Z and Natural Place Y is formed in Region Z, then Facility X can access Natural Place Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Facility X, Material Y):- LocatedIn(Facility X, Region Z), ImportedTo(Material Y, Region Z);",
  "v_rule": "If Facility X is located in Region Z and Material Y is imported to Region Z, then Facility X can use Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Material Y):- NoBan(Facility X, Substance Z), Contain(Material Y, Substance Z);",
  "v_rule": "If Facility X has no ban on Substance Z and Material Y contains Substance Z, then Facility X can access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Material Y):- Permitted(Facility X, Substance Z), Contain(Material Y, Substance Z);",
  "v_rule": "If Facility X is permitted to handle Substance Z and Material Y contains Substance Z, then Facility X can access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Alcohol Y):- OperateIn(Facility X, Time Period Z1), NotBannedDuring(Alcohol Y, Time Period Z1);",
  "v_rule": "If Facility X operates in Time Period Z1 and Alcohol Y is not banned during Time Period Z1, then Facility X can access Alcohol Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Natural Place X, Disease Y):- LiveIn(Animal Z, Natural Place X), CarrierOf(Animal Z, Disease Y);",
  "v_rule": "If Animal Z lives in Natural Place X and Animal Z is a carrier of Disease Y, then Disease Y can access Natural Place X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Natural Place X, Job Y):- LocatedIn(Natural Place X, Event Z), RequiredIn(Job Y, Event Z);",
  "v_rule": "If Natural Place X is the location of Event Z and Job Y requires participation in Event Z, then Job Y can access Natural Place X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanWorkIn(Job Y, Natural Place X):- HasFeatures(Natural Place X, Event Z), Organize(Event Z, Job Y);",
  "v_rule": "If Natural Place X has features that can host Event Z and Event Z is organized by Job Y, then Job Y can work in Natural Place X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Material X, Job Y):- SafeFor(Material X, Condition Z2), RequiredIn(Job Y, Condition Z2);",
  "v_rule": "If Material X is safe for Condition Z2 and Condition Z2 is required in Job Y, then Material X can be used for Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "GovernedBy(Material X, Legislation Y):- LocatedIn(Material X, Region Z), AdoptedFrom(Region Z, Legislation Y);",
  "v_rule": "If Material X is located in Region Z and Legislation Y is adopted from Region Z, then Material X is governed by Legislation Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AffectsGrowth(Natural Phenomenon X, Food Y):- CausedBy(Natural Phenomenon X, Region Z), CultivatedIn(Food Y, Region Z);",
  "v_rule": "If Natural Phenomenon X occurs in Region Z and Food Y is cultivated in Region Z, then Natural Phenomenon X affects the growth of Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Platform X, Game Y):- UpdatedFor(Game Y, Platform Z), VersionOf(Platform X, Platform Z);",
  "v_rule": "If Game Y has been updated for Platform Z and Platform X is a version of Platform Z, then Platform X can access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanExplore(Tool X, Natural Place Y):- ResistantTo(Tool X, Condition Z), HasCondition(Natural Place Y, Condition Z);",
  "v_rule": "If Tool X is resistant to Condition Z and Natural Place Y has Condition Z, then Tool X can be used to explore Natural Place Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Platform X, Show Y):- Established(Platform X, Region Z2), BroadcastIn(Show Y, Region Z2);",
  "v_rule": "If Platform X is established in Region Z2 and Show Y is broadcasted in Region Z2, then Platform X can access Show Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RiskOfDisease(Disease X, Food Y):- CausedBy(Disease X, Substance Z), Contain(Food Y, Substance Z);",
  "v_rule": "If Disease X is caused by Substance Z and Food Y contains Substance Z, then there is a risk of Disease X from Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvoidFood(Disease X, Food Y):- CausedBy(Disease X, Substance Z), Contain(Food Y, Substance Z);",
  "v_rule": "If Disease X is caused by Substance Z and Food Y contains Substance Z, then individuals with Disease X should avoid Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanWorkWith(Tool X, Material Y):- NotDamagedBy(Tool X, Material Z), MadeOf(Material Y, Material Z);",
  "v_rule": "If Tool X is not damaged by Material Z and Material Y is made of Material Z, then Tool X can work with Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Job X, Alcohol Y):- JobIn(Job X, Region Z1), Popular(Alcohol Y, Region Z1);",
  "v_rule": "If Job X is located in Region Z1 and Alcohol Y is popular in Region Z1, then individuals with Job X can access Alcohol Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Tool X, Platform Y):- UpdatedFor(Tool X, Technology Z), Support(Technology Z, Platform Y);",
  "v_rule": "If Tool X is updated for Technology Z and Technology Z is supported by Platform Y, then Tool X can access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Job X, Food Y):- Start(Job X, Time Period Z1), FoodAvailableDuring(Food Y, Time Period Z1);",
  "v_rule": "If Job X starts during Time Period Z1 and Food Y is available during Time Period Z1, then someone with Job X can access Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Job X, Food Y):- JobNotRestricted(Job X, Food Z), DerivedFrom(Food Z, Food Y);",
  "v_rule": "If Job X is not restricted from accessing Food Z and Food Y is derived from Food Z, then Job X can access Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CompatibleWith(Tool X, Platform Y):- DesignedFor(Tool X, Technology Z), Developed_For(Technology Z, Platform Y);",
  "v_rule": "If Tool X is designed for Technology Z and Technology Z is developed for Platform Y, then Tool X is compatible with Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Tool X, Job Y):- DesignedFor(Tool X, Condition Z1), ConductIn(Job Y, Condition Z1);",
  "v_rule": "If Tool X is designed for Condition Z1 and Job Y is conducted in Condition Z1, then Tool X can access Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Tool X, Food Y):- DesignedFor(Tool X, Food Z), ComposedOf(Food Z, Food Z);",
  "v_rule": "If Tool X is designed for Food Z and Food Z is composed of Food Y, then Tool X can access Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Tool X, Food Y):- ApprovedFor(Tool X, Material Z), PackagedIn(Food Y, Material Z);",
  "v_rule": "If Tool X is approved for Material Z and Food Y is packaged in Material Z, then Tool X can access Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "BornIn(Person X, Region Y):- BornAt(Person X, Facility Z), BuiltIn(Facility Z, Region Y);",
  "v_rule": "If Person X was born at Facility Z and Facility Z was built in Region Y, then Person X was born in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "FoundIn(Animal X, Region Y):- MigratedTo(Animal X, Natural Place Z), ExistsIn(Natural Place Z, Region Y);",
  "v_rule": "If Animal X has migrated to Natural Place Z and Natural Place Z exists in Region Y, then Animal X can be found in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "OriginOfDrug(Drug X, Region Y):- ShippedFrom(Drug X, Facility Z), LocatedIn(Facility Z, Region Y);",
  "v_rule": "If Drug X is shipped from Facility Z and Facility Z is located in Region Y, then the origin of Drug X is Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvailableIn(Drug X, Region Y):- SoldIn(Drug X, Facility Z), BuiltIn(Facility Z, Region Y);",
  "v_rule": "If Drug X is sold in Facility Z and Facility Z is built in Region Y, then Drug X is available in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPurchase(Drug X, Region Y):- PrescribedAt(Drug X, Facility Z), EstablishedIn(Facility Z, Region Y);",
  "v_rule": "If Drug X is prescribed at Facility Z and Facility Z is established in Region Y, then Drug X can be purchased in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AdaptedTo(Animal X, Region Y):- HabitatsIn(Animal X, Natural Place Z), LocatedIn(Natural Place Z, Region Y);",
  "v_rule": "If Animal X inhabits Natural Place Z and Natural Place Z is located in Region Y, then Animal X is adapted to Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ObservedIn(Condition X, Region Y):- Occur(Condition X, Natural Place Z), PartOf(Natural Place Z, Region Y);",
  "v_rule": "If Condition X occurs in Natural Place Z and Natural Place Z is part of Region Y, then Condition X is observed in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ProducedIn(Material X, Region Y):- ExtractedFrom(Material X, Natural Place Z), ExistsIn(Natural Place Z, Region Y);",
  "v_rule": "If Material X is extracted from Natural Place Z and Natural Place Z exists in Region Y, then Material X is produced in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "FoundIn(Substance X, Region Y):- Mined(Substance X, Natural Place Z), LocatedIn(Natural Place Z, Region Y);",
  "v_rule": "If Substance X is mined from Natural Place Z and Natural Place Z is located in Region Y, then Substance X can be found in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvailableIn(Substance X, Region Y):- ExtractedIn(Substance X, Facility Z), MovedTo(Facility Z, Region Y);",
  "v_rule": "If Substance X is extracted in Facility Z and Facility Z is moved to Region Y, then Substance X is available in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasResource(Region Y, Substance X):- Grows(Substance X, Natural Place Z), FormedIn(Natural Place Z, Region Y);",
  "v_rule": "If Substance X grows in Natural Place Z and Natural Place Z is formed in Region Y, then Region Y has Resource Substance X.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SoldIn(Furniture X, Region Y):- SoldBy(Organization Z, Furniture X), OperatesIn(Organization Z, Region Y);",
  "v_rule": "If Furniture X is sold by Organization Z and Organization Z operates in Region Y, then Furniture X is sold in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HeldIn(Event X, Region Y):- OrganizedAt(Event X, Facility Z), LocatedIn(Facility Z, Region Y);",
  "v_rule": "If Event X is organized at Facility Z and Facility Z is located in Region Y, then Event X is held in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "BroadcastIn(Show X, Region Y):- AiredOn(Show X, Platform Z), SupportedIn(Platform Z, Region Y);",
  "v_rule": "If Show X is aired on Platform Z and Platform Z is supported in Region Y, then Show X can be broadcasted in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ShownIn(Show X, Region Y):- LicensedTo(Show X, Platform Z), AvailableIn(Platform Z, Region Y);",
  "v_rule": "If Show X is licensed to Platform Z and Platform Z is available in Region Y, then Show X can be shown in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "KnownInRegion(Artwork X, Region Y):- ExhibitedAt(Artwork X, Facility Z), EstablishedIn(Facility Z, Region Y);",
  "v_rule": "If Artwork X has been exhibited at Facility Z and Facility Z is established in Region Y, then Artwork X is known in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ScarceIn(Job X, Region Y):- RequiresSkill(Job X, Skill Z), NotPracticed(Skill Z, Region Y);",
  "v_rule": "If Job X requires Skill Z and Skill Z is not practiced in Region Y, then Job X is scarce in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CannotPlay(Game X, Region Y):- ViolatesLegislation(Game X, Legislation Z), EnforcedIn(Legislation Z, Region Y);",
  "v_rule": "If Game X violates Legislation Z and Legislation Z is enforced in Region Y, then Game X cannot be played in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "OriginatesFrom(Technology X, Region Y):- InventedIn(Technology X, Facility Z), LocatedIn(Facility Z, Region Y);",
  "v_rule": "If Technology X was invented in Facility Z and Facility Z is located in Region Y, then Technology X originates from Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AccessibleIn(Technology X, Region Y):- RequiredBy(Technology X, Organization Z), LocatedIn(Organization Z, Region Y);",
  "v_rule": "If Technology X is required by Organization Z and Organization Z is located in Region Y, then Technology X is accessible in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "BrewedIn(Alcohol X, Region Y):- DistilledIn(Alcohol X, Facility Z), LocatedIn(Facility Z, Region Y);",
  "v_rule": "If Alcohol X is distilled in Facility Z and Facility Z is located in Region Y, then Alcohol X is brewed in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RestrictedIn(Alcohol X, Region Y):- Illegal(Substance X, Region Z1), PartOf(Region Z1, Region Y);",
  "v_rule": "If Alcohol X is illegal in Region Z1 and Region Z1 is part of Region Y, then Alcohol X is restricted in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CannotPurchase(Alcohol X, Region Y):- Illegal(Substance X, Region Z1), Subregion(Region Z1, Region Y);",
  "v_rule": "If Alcohol X is illegal in Region Z1 and Region Y is a subregion of Region Z1, then Alcohol X cannot be purchased in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "GrowsIn(Plant X, Region Y):- PlantedIn(Plant X, Facility Z), LocatedIn(Facility Z, Region Y);",
  "v_rule": "If Plant X is planted in Facility Z and Facility Z is located in Region Y, then Plant X grows in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "FamiliarWith(Natural Phenomenon X, Region Y):- SocioEconomicCondition(Region Y, Condition Z), LeadsTo(Condition Z, Natural Phenomenon X);",
  "v_rule": "If Region Y has a SocioEconomic Condition Z and this Condition Z leads to Natural Phenomenon X, then the Region Y is familiar with Natural Phenomenon X.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "OperatesIn(Facility X, Region Y):- MovedTo(Facility X, Region Z), BelongsTo(Region Z, Region Y);",
  "v_rule": "If Facility X has moved to Region Z and Region Z belongs to Region Y, then Facility X operates in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SubjectToLaws(Facility X, Region Y):- LocatedIn(Facility X, Region Z), BelongsTo(Region Z, Region Y);",
  "v_rule": "If Facility X is located in Region Z and Region Z belongs to Region Y, then Facility X is subject to the laws of Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MustFollowLaws(Platform X, Region Y):- OperatesIn(Platform X, Region Z), GovernedBy(Region Z, Region Y);",
  "v_rule": "If Platform X operates in Region Z and Region Z is governed by Region Y, then Platform X must follow the laws of Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvailableIn(Financial Product X, Region Y):- ProvidedBy(Facility Z, Financial Product X), OperatesIn(Facility Z, Region Y);",
  "v_rule": "If Financial Product X is provided by Facility Z and Facility Z operates in Region Y, then Financial Product X is available in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ValuedIn(Skill X, Region Y):- NecessaryFor(Job Z, Skill X), PopularIn(Job Z, Region Y);",
  "v_rule": "If Skill X is necessary for Job Z and Job Z is popular in Region Y, then Skill X is valued in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LegalInRegion(Authorization X, Region Y):- IssuedIn(Authorization X, Region Z), IsTerritory(Region Z, Region Y);",
  "v_rule": "If Authorization X is issued in Region Z and Region Y is a territory of Region Z, then Authorization X is legal in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ValidInRegion(Authorization X, Region Y):- Controls(Region Y, Event Z), Requires(Event Z, Authorization X);",
  "v_rule": "If Region Y controls Event Z and Event Z requires Authorization X, then Authorization X is valid in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RequiredIn(Authorization X, Region Y):- AdoptedBy(Legislation Z1, Region Y), Mandates(Legislation Z1, Authorization X);",
  "v_rule": "If Legislation Z1 is adopted by Region Y and Legislation Z1 mandates Authorization X, then Authorization X is required in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RecognizedIn(Authorization X, Region Y):- ValidIn(Authorization X, Region Z1), BelongsTo(Region Z1, Region Y);",
  "v_rule": "If Authorization X is valid in Region Z1 and Region Z1 belongs to Region Y, then Authorization X is recognized in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "FoundIn(Plant X, Region Y):- GrownIn(Plant X, Facility Z), BuiltIn(Facility Z, Region Y);",
  "v_rule": "If Plant X is grown in Facility Z and Facility Z is built in Region Y, then Plant X can be found in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MustFollow(Legislation X, Region Y):- EnforcedBy(Legislation X, Facility Z), ProvidesServiceIn(Facility Z, Region Y);",
  "v_rule": "If Legislation X is enforced by Facility Z and Facility Z provides service in Region Y, then Region Y must follow Legislation X.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "InfluencesLaw(Legislation X, Region Y):- PassedIn(Legislation X, Facility Z), Governs(Region Y, Facility Z);",
  "v_rule": "If Legislation X is passed in Facility Z and Region Y governs Facility Z, then Legislation X influences the law in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RegulatedIn(Legislation X, Region Y):- AppliesTo(Legislation X, Event Z), HappenedAt(Event Z, Region Y);",
  "v_rule": "If Legislation X applies to Event Z and Event Z happened at Region Y, then Legislation X is regulated in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ProducedIn(Food X, Region Y):- GrownIn(Food X, Facility Z), EstablishedIn(Facility Z, Region Y);",
  "v_rule": "If Food X is grown in Facility Z and Facility Z is established in Region Y, then Food X is produced in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasOrigin(Food X, Region Y):- ManufacturedIn(Food X, Facility Z), LocatedIn(Facility Z, Region Y);",
  "v_rule": "If Food X is manufactured in Facility Z and Facility Z is located in Region Y, then Food X has its origin in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "BannedIn(Food X, Region Y):- MadeOf(Food X, Substance Z), IllegalIn(Substance Z, Region Y);",
  "v_rule": "If Food X is made of Substance Z and Substance Z is illegal in Region Y, then Food X is banned in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CannotSell(Food X, Region Y):- Added(Food X, Substance Z), Prohibited(Substance Z, Region Y);",
  "v_rule": "If Food X contains Substance Z and Substance Z is prohibited in Region Y, then Food X cannot be sold in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LegalIn(Drug X, Region Y):- ApprovedBy(Drug X, Facility Z), Governs(Facility Z, Region Y);",
  "v_rule": "If Drug X is approved by Facility Z and Facility Z governs Region Y, then Drug X is legal in Region Y.",
  "domain": "location",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotRecord(Person X, Natural Phenomenon Y):- Lost(Person X, Tool Z1), Require(Tool Z1, Natural Phenomenon Y);",
  "v_rule": "If Person X has lost Tool Z1 and Tool Z1 is required to record Natural Phenomenon Y, then Person X cannot record Natural Phenomenon Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotRecycle(Person X, Material Y):- Lack(Person X, Skill Z2), Required(Material Y, Skill Z2);",
  "v_rule": "If Person X lacks Skill Z2 and Skill Z2 is required to recycle Material Y, then Person X cannot recycle Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotShape(Person X, Material Y):- LackOf(Person X, Skill Z1), Use(Skill Z1, Material Y);",
  "v_rule": "If Person X lacks Skill Z1 and Skill Z1 is used for shaping Material Y, then Person X cannot shape Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotASculptor(Person X, Material Y):- LackOf(Person X, Skill Z1), Need(Skill Z1, Material Y);",
  "v_rule": "If Person X lacks Skill Z1 and Skill Z1 is needed to sculpt Material Y, then Person X is not a sculptor of Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotProduce(Person X, Substance Y):- LackOf(Person X, Tool Z2), Use(Tool Z2, Substance Y);",
  "v_rule": "If Person X lacks Tool Z2 and Tool Z2 is used to produce Substance Y, then Person X cannot produce Substance Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAssemble(Person X, Furniture Y):- Lost(Person X, Tool Z1), Require(Furniture Y, Tool Z1);",
  "v_rule": "If Person X has lost Tool Z1 and Furniture Y requires Tool Z1 for assembly, then Person X cannot assemble Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedsHelp(Person X, Furniture Y):- LackOf(Person X, Tool Z1), Require(Furniture Y, Tool Z1);",
  "v_rule": "If Person X lacks Tool Z1 and Furniture Y requires Tool Z1, then Person X needs help with Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotRide(Person X, Animal Y):- FearOf(Person X, Animal Z), OffspringOf(Animal Z, Animal Z);",
  "v_rule": "If Person X has a fear of Animal Z and Animal Y is an offspring of Animal Z, then Person X cannot ride Animal Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotEat(Person X, Plant Y):- AllergicTo(Person X, Substance Z1), Produce(Plant Y, Substance Z1);",
  "v_rule": "If Person X is allergic to Substance Z1 and Plant Y produces Substance Z1, then Person X cannot eat Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotInShow(Person X, Show Y):- SkillRequired(Show Y, Skill Z1), Lack(Person X, Skill Z1);",
  "v_rule": "If Show Y requires Skill Z1 and Person X lacks Skill Z1, then Person X cannot participate in Show Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvoidsFood(Person X, Plant Y):- InheritedAllergy(Person X, Substance Z1), Produce(Plant Y, Substance Z1);",
  "v_rule": "If Person X has inherited an allergy to Substance Z1 and Plant Y produces Substance Z1, then Person X avoids food from Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotEat(Person X, Plant Y):- Allergy(Person X, Food Z2), IsType(Plant Y, Food Z2);",
  "v_rule": "If Person X has an allergy to Food Z2 and Plant Y is a type of Food Z2, then Person X cannot eat Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotARepairman(Person X, Tool Y):- LackOfSkill(Person X, Skill Z1), DesignedFor(Tool Y, Skill Z1);",
  "v_rule": "If Person X lacks Skill Z1 and Tool Y is designed for Skill Z1, then Person X is not a repairman for Tool Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RequiresSpecialDiet(Person X, Plant Y):- Allergy(Person X, Food Z2), GrowsAs(Plant Y, Food Z2);",
  "v_rule": "If Person X has an allergy to Food Z2 and Plant Y grows as Food Z2, then Person X requires a special diet excluding Plant Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotEat(Person X, Food Y):- Inherit(Person X, Disease Z2), Avoid(Food Y, Disease Z2);",
  "v_rule": "If Person X has inherited Disease Z2 and Food Y should be avoided by those with Disease Z2, then Person X cannot eat Food Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotEat(Person X, Food Y):- Have(Person X, Disease Z2), Risk(Food Y, Disease Z2);",
  "v_rule": "If Person X has Disease Z2 and Food Y poses a risk for Disease Z2, then Person X cannot eat Food Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LacksSkill(Person X, Skill Y):- PhysicalCondition(Person X, Condition Z2), Incompatible(Skill Y, Condition Z2);",
  "v_rule": "If Person X has a physical condition Z2 and Skill Y is incompatible with Condition Z2, then Person X lacks Skill Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvoidsMaking(Person X, Food Y):- LackOf(Person X, Skill Z1), Cook(Food Y, Skill Z1);",
  "v_rule": "If Person X lacks Skill Z1 and Skill Z1 is needed to cook Food Y, then Person X avoids making Food Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAnimalTrainer(Person X, Animal Y):- FearOf(Person X, Animal Z1), IsType(Animal Y, Animal Z1);",
  "v_rule": "If Person X has a fear of Animal Z1 and Animal Y is of type Animal Z1, then Person X is not an animal trainer for Animal Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotResearch(Person X, Disease Y):- Denied(Person X, Authorization Z1), Require(Disease Y, Authorization Z1);",
  "v_rule": "If Person X is denied Authorization Z1 and Disease Y requires Authorization Z1 for research, then Person X cannot research Disease Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotResearch(Person X, Drug Y):- Lost(Person X, Tool Z2), Require(Drug Y, Tool Z2);",
  "v_rule": "If Person X has lost Tool Z2 and Tool Z2 is required for researching Drug Y, then Person X cannot research Drug Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "IllegalFor(Person X, Drug Y):- WorksIn(Person X, Region Z1), Restricted(Drug Y, Region Z1);",
  "v_rule": "If Person X works in Region Z1 and Drug Y is restricted in Region Z1, then it is illegal for Person X to have Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Drug Y):- YoungerThan(Person X, Age Z2), AgeRestricted(Drug Y, Age Z2);",
  "v_rule": "If Person X is younger than Age Z2 and Drug Y is age-restricted to Age Z2, then Person X cannot access Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "IllegalFor(Person X, Drug Y):- UnderAge(Person X, Age Z2), AgeRestricted(Drug Y, Age Z2);",
  "v_rule": "If Person X is under the age of Z2 and Drug Y is age-restricted to Age Z2, then it is illegal for Person X to use Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasRestrictions(Person X, Condition Y):- Manage(Condition Y, Skill Z), Lack(Person X, Skill Z);",
  "v_rule": "If Condition Y is managed by Skill Z and Person X lacks Skill Z, then Person X has restrictions due to Condition Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "NeedsAssistance(Person X, Condition Y):- Require(Condition Y, Skill Z), Lack(Person X, Skill Z);",
  "v_rule": "If Condition Y requires Skill Z and Person X lacks Skill Z, then Person X needs assistance with Condition Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedsAssistance(Person X, Condition Y):- Solve(Condition Y, Skill Z), Lack(Person X, Skill Z);",
  "v_rule": "If Person X lacks Skill Z which is needed to solve Condition Y, then Person X needs assistance with Condition Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotAccess(Person X, Condition Y):- Requires(Condition Y, Time Period Z2), BusyAt(Person X, Time Period Z2);",
  "v_rule": "If Condition Y requires Time Period Z2 and Person X is busy at Time Period Z2, then Person X cannot access Condition Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "IllegalSubstance(Person X, Substance Y):- LiveIn(Person X, Region Z1), BannedIn(Substance Y, Region Z1);",
  "v_rule": "If Person X lives in Region Z1 and Substance Y is banned in Region Z1, then Substance Y is an illegal substance for Person X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "Contraindicated(Person X, Drug Y):- Inherit(Person X, Condition Z), Cause(Drug Y, Condition Z);",
  "v_rule": "If Person X has inherited Condition Z and Drug Y can cause Condition Z, then Drug Y is contraindicated for Person X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Facility Y):- Available(Facility Y, Time Period Z1), Unavailable(Person X, Time Period Z1);",
  "v_rule": "If Facility Y is available during Time Period Z1 and Person X is unavailable during Time Period Z1, then Person X cannot access Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LacksPermission(Person X, Facility Y):- Operate(Facility Y, Skill Z), Lack(Person X, Skill Z);",
  "v_rule": "If Facility Y operates with Skill Z and Person X lacks Skill Z, then Person X lacks permission to operate Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Job Y):- Lack(Person X, Skill Z), Standard(Job Y, Skill Z);",
  "v_rule": "If Person X lacks Skill Z and Skill Z is a standard requirement for Job Y, then Person X cannot access Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotEmployedIn(Person X, Job Y):- Lack(Person X, Skill Z), Require(Job Y, Skill Z);",
  "v_rule": "If Person X lacks Skill Z and Skill Z is required for Job Y, then Person X is not employed in Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "IneligibleForPosition(Person X, Job Y):- Lack(Person X, Skill Z), Require(Job Y, Skill Z);",
  "v_rule": "If Person X lacks Skill Z and Job Y requires Skill Z, then Person X is ineligible for the position of Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Job Y):- BornWith(Person X, Condition Z), Exclude(Job Y, Condition Z);",
  "v_rule": "If Person X was born with Condition Z and Job Y excludes individuals with Condition Z, then Person X cannot access Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Job Y):- Develop(Person X, Condition Z), Exclude(Job Y, Condition Z);",
  "v_rule": "If Person X has developed Condition Z and Condition Z excludes them from Job Y, then Person X cannot access Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotEmployedIn(Person X, Job Y):- Have(Person X, Condition Z), Exclude(Job Y, Condition Z);",
  "v_rule": "If Person X has Condition Z and Job Y excludes individuals with Condition Z, then Person X is not employed in Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "IneligibleForPosition(Person X, Job Y):- Develop(Person X, Condition Z), Prohibit(Job Y, Condition Z);",
  "v_rule": "If Person X has developed Condition Z and Condition Z is prohibited for Job Y, then Person X is ineligible for Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Vehicle Y):- Inherit(Person X, Disease Z), Restrict(Disease Z, Vehicle Y);",
  "v_rule": "If Person X has inherited Disease Z and Disease Z restricts access to Vehicle Y, then Person X cannot access Vehicle Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedsTraining(Person X, Technology Y):- LackSkill(Person X, Skill Z), Operate(Technology Y, Skill Z);",
  "v_rule": "If Person X lacks Skill Z and Skill Z is required to operate Technology Y, then Person X needs training in Technology Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Platform Y):- WorksIn(Person X, Region Z1), BannedIn(Platform Y, Region Z1);",
  "v_rule": "If Person X works in Region Z1 and Platform Y is banned in Region Z1, then Person X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Platform Y):- Rent(Person X, Electronic Device Z2), IncompatibleWith(Platform Y, Electronic Device Z2);",
  "v_rule": "If Person X rents Electronic Device Z2 and Platform Y is incompatible with Electronic Device Z2, then Person X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Platform Y):- Use(Person X, Electronic Device Z2), LacksRequiredHardware(Platform Y, Electronic Device Z2);",
  "v_rule": "If Person X uses Electronic Device Z2 and Platform Y requires hardware that Electronic Device Z2 lacks, then Person X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Platform Y):- Lack(Person X, Skill Z1), DevelopedFor(Platform Y, Skill Z1);",
  "v_rule": "If Person X lacks Skill Z1 and Skill Z1 is required for accessing Platform Y, then Person X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasRestriction(Person X, Platform Y):- Lack(Person X, Skill Z1), RequiredBy(Platform Y, Skill Z1);",
  "v_rule": "If Person X lacks Skill Z1 and Skill Z1 is required by Platform Y, then Person X has a restriction on Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotSupplier(Organization X, Drug Y):- Follows(Organization X, Legislation Z2), Prohibits(Legislation Z2, Drug Y);",
  "v_rule": "If Organization X follows Legislation Z2 and Legislation Z2 prohibits Drug Y, then Organization X is not a supplier of Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotCompatible(Vehicle X, Platform Y):- Require(Vehicle X, Material Z1), Lack(Platform Y, Material Z1);",
  "v_rule": "If Vehicle X requires Material Z1 and Platform Y lacks Material Z1, then Vehicle X is not compatible with Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotForFuel(Vehicle X, Alcohol Y):- Damages(Vehicle X, Substance Z), Contains(Substance Z, Alcohol Y);",
  "v_rule": "If Vehicle X is damaged by Substance Z and Substance Z contains Alcohol Y, then Alcohol Y is not for fueling Vehicle X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Substance Y):- Required(Organization X, Legislation Z), ProhibitedBy(Substance Y, Legislation Z);",
  "v_rule": "If Organization X requires Legislation Z and Substance Y is prohibited by Legislation Z, then Organization X cannot access Substance Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotInvolvedIn(Event X, Animal Y):- Requires(Event X, Skill Z), Lacks(Animal Y, Skill Z);",
  "v_rule": "If Event X requires Skill Z and Animal Y lacks Skill Z, then Animal Y is not involved in Event X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Event X, Drug Y):- HeldIn(Event X, Region Z1), Illegal(Drug Y, Region Z1);",
  "v_rule": "If Event X is held in Region Z1 and Drug Y is illegal in Region Z1, then Drug Y cannot be accessed at Event X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Event X, Drug Y):- Prescription(Drug Y, Authorization Z), Lack(Event X, Authorization Z);",
  "v_rule": "If Drug Y requires Authorization Z and Event X lacks Authorization Z, then Event X cannot access Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Event X, Electronic Device Y):- Depend(Event X, Technology Z), Lack(Electronic Device Y, Technology Z);",
  "v_rule": "If Event X depends on Technology Z and Electronic Device Y lacks Technology Z, then Event X cannot access Electronic Device Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "LacksSubstance(Event X, Substance Y):- Requires(Event X, Condition Z), IncompatibleWith(Substance Y, Condition Z);",
  "v_rule": "If Event X requires Condition Z and Substance Y is incompatible with Condition Z, then Event X lacks Substance Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotInCharge(Event X, Plant Y):- Facilitates(Condition Z2, Event X), Lacks(Plant Y, Condition Z2);",
  "v_rule": "If Condition Z2 facilitates Event X and Plant Y lacks Condition Z2, then Plant Y is not in charge of Event X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotEligibleFor(Event X, Facility Y):- Require(Event X, Tool Z), LackOf(Facility Y, Tool Z);",
  "v_rule": "If Event X requires Tool Z and Facility Y lacks Tool Z, then Facility Y is not eligible for Event X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Event X, Natural Place Y):- HostedIn(Event X, Facility Z), LackOf(Natural Place Y, Facility Z);",
  "v_rule": "If Event X is hosted in Facility Z and Natural Place Y lacks Facility Z, then Event X cannot be accessed at Natural Place Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LacksPermission(Organization X, Substance Y):- Adopts(Organization X, Legislation Z), Banned(Substance Y, Legislation Z);",
  "v_rule": "If Organization X adopts Legislation Z and Substance Y is banned under Legislation Z, then Organization X lacks permission to use Substance Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Event X, Natural Phenomenon Y):- HappenIn(Event X, Region Z1), AbsentIn(Natural Phenomenon Y, Region Z1);",
  "v_rule": "If Event X happens in Region Z1 and Natural Phenomenon Y is absent in Region Z1, then Event X cannot access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Event X, Platform Y):- Scheduled(Event X, Time Period Z2), OfflineDuring(Platform Y, Time Period Z2);",
  "v_rule": "If Event X is scheduled during Time Period Z2 and Platform Y is offline during Time Period Z2, then Event X cannot be accessed on Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotQualifiedFor(Event X, Job Y):- Necessary(Event X, Skill Z1), Lacks(Job Y, Skill Z1);",
  "v_rule": "If Skill Z1 is necessary for Event X and Job Y lacks Skill Z1, then Job Y is not qualified for Event X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Event X, Publication Y):- HappenedAt(Event X, Time Period Z2), WrittenAfter(Publication Y, Time Period Z2);",
  "v_rule": "If Event X happened at Time Period Z2 and Publication Y was written after Time Period Z2, then Event X cannot access Publication Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Facility Y):- OperateIn(Facility Y, Time Period Z2), Closed(Organization X, Time Period Z2);",
  "v_rule": "If Facility Y operates in Time Period Z2 and Organization X is closed during Time Period Z2, then Organization X cannot access Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotPrey(Animal Y, Animal X):- AfraidOf(Animal X, Animal Z), Same(Animal Y, Animal Z);",
  "v_rule": "If Animal X is afraid of Animal Z and Animal Y is the same as Animal Z, then Animal Y is not prey to Animal X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Drug Y):- MigratedTo(Animal X, Region Z1), UnavailableIn(Drug Y, Region Z1);",
  "v_rule": "If Animal X has migrated to Region Z1 and Drug Y is unavailable in Region Z1, then Animal X cannot access Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotMedicated(Animal X, Drug Y):- Require(Drug Y, Condition Z2), Lack(Animal X, Condition Z2);",
  "v_rule": "If Drug Y requires Condition Z2 and Animal X lacks Condition Z2, then Animal X is not medicated with Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Natural Place Y):- Inhabit(Animal X, Region Z1), SeparatedBy(Region Z1, Natural Place Y);",
  "v_rule": "If Animal X inhabits Region Z1 and Region Z1 is separated from Natural Place Y, then Animal X cannot access Natural Place Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Material Y):- Restricted(Material Y, Region Z), RegisteredIn(Organization X, Region Z);",
  "v_rule": "If Material Y is restricted in Region Z and Organization X is registered in the same Region Z, then Organization X cannot access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Natural Phenomenon Y):- AfraidOf(Animal X, Event Z), Trigger(Natural Phenomenon Y, Event Z);",
  "v_rule": "If Animal X is afraid of Event Z and Natural Phenomenon Y triggers Event Z, then Animal X cannot access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Platform Y):- Avoid(Animal X, Substance Z), PresentIn(Platform Y, Substance Z);",
  "v_rule": "If Animal X avoids Substance Z and Substance Z is present in Platform Y, then Animal X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Platform Y):- Fear(Animal X, Substance Z), AddedTo(Platform Y, Substance Z);",
  "v_rule": "If Animal X fears Substance Z and Substance Z has been added to Platform Y, then Animal X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Game Y):- Hibernate(Animal X, Time Period Z1), OnlyPlayableAt(Game Y, Time Period Z1);",
  "v_rule": "If Animal X hibernates during Time Period Z1 and Game Y is only playable at Time Period Z1, then Animal X cannot access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SafeFromDisease(Animal X, Disease Y):- ImmuneTo(Animal X, Disease Z1), CausedBy(Disease Y, Disease Z1);",
  "v_rule": "If Animal X is immune to Disease Z1 and Disease Y is caused by Disease Z1, then Animal X is safe from Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Disease Y):- MigratedTo(Animal X, Region Z2), AbsentIn(Disease Y, Region Z2);",
  "v_rule": "If Animal X has migrated to Region Z2 and Disease Y is absent in Region Z2, then Animal X cannot access Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Job Y):- Standard(Job Y, Skill Z), Lack(Animal X, Skill Z);",
  "v_rule": "If Job Y requires Skill Z as a standard and Animal X lacks Skill Z, then Animal X cannot access Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Publication Y):- ExistedIn(Animal X, Time Period Z2), PublishedAfter(Publication Y, Time Period Z2);",
  "v_rule": "If Animal X existed in Time Period Z2 and Publication Y was published after Time Period Z2, then Animal X cannot access Publication Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotCompatible(Technology X, Drug Y):- Damages(Technology X, Substance Z), MadeOf(Drug Y, Substance Z);",
  "v_rule": "If Technology X damages Substance Z and Drug Y is made of Substance Z, then Technology X is not compatible with Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Platform Y):- ActiveIn(Organization X, Time Period Z2), UnavailableDuring(Platform Y, Time Period Z2);",
  "v_rule": "If Organization X is active during Time Period Z2 and Platform Y is unavailable during the same Time Period Z2, then Organization X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "Incompatible(Technology X, Tool Y):- DesignedFor(Technology X, Condition Z2), Damages(Tool Y, Condition Z2);",
  "v_rule": "If Technology X is designed for Condition Z2 and Tool Y damages Condition Z2, then Technology X is incompatible with Tool Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Technology X, Substance Y):- OperateIn(Technology X, Condition Z), InterfereWith(Substance Y, Condition Z);",
  "v_rule": "If Technology X operates in Condition Z and Substance Y interferes with Condition Z, then Technology X cannot access Substance Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "IncompatibleWith(Technology X, Substance Y):- MadeOf(Technology X, Material Z1), Removed(Substance Y, Material Z1);",
  "v_rule": "If Technology X is made of Material Z1 and Substance Y removes Material Z1, then Technology X is incompatible with Substance Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Technology X, Plant Y):- Require(Technology X, Condition Z1), Deprived(Plant Y, Condition Z1);",
  "v_rule": "If Technology X requires Condition Z1 and Plant Y is deprived of Condition Z1, then Technology X cannot access Plant Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Technology X, Material Y):- Require(Technology X, Condition Z), Expired(Material Y, Condition Z);",
  "v_rule": "If Technology X requires Condition Z and Material Y has an expired Condition Z, then Technology X cannot access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Technology X, Natural Phenomenon Y):- DesignedFor(Technology X, Condition Z1), AbsentDuring(Natural Phenomenon Y, Condition Z1);",
  "v_rule": "If Technology X is designed for Condition Z1 and Condition Z1 is absent during Natural Phenomenon Y, then Technology X cannot access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Technology X, Natural Phenomenon Y):- OperateIn(Technology X, Condition Z1), Prevents(Natural Phenomenon Y, Condition Z1);",
  "v_rule": "If Technology X operates in Condition Z1 and Natural Phenomenon Y prevents Condition Z1, then Technology X cannot access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotDigitized(Artwork Y, Technology X):- Require(Artwork Y, Material Z1), Lack(Material Z1, Technology X);",
  "v_rule": "If Artwork Y requires Material Z1 and Technology X lacks Material Z1, then Artwork Y is not digitized by Technology X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LimitedInJob(Technology X, Job Y):- Adapted(Job Y, Condition Z1), CausesError(Technology X, Condition Z1);",
  "v_rule": "If Job Y is adapted to Condition Z1 and Technology X causes an error under Condition Z1, then Technology X is limited in Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Technology X, Publication Y):- FunctionWith(Technology X, Natural Phenomenon Z), Lack(Publication Y, Natural Phenomenon Z);",
  "v_rule": "If Technology X functions with Natural Phenomenon Z and Publication Y lacks Natural Phenomenon Z, then Technology X cannot access Publication Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Game Y):- AdheresTo(Organization X, Legislation Z), Illegal(Game Y, Legislation Z);",
  "v_rule": "If Organization X adheres to Legislation Z and Game Y is illegal under Legislation Z, then Organization X cannot access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Drug X, Plant Y):- NativeTo(Plant Y, Region Z2), UnavailableIn(Region Z2, Drug X);",
  "v_rule": "If Plant Y is native to Region Z2 and Drug X is unavailable in Region Z2, then Drug X cannot be accessed from Plant Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Drug X, Facility Y):- Requires(Drug X, Tool Z), Lost(Facility Y, Tool Z);",
  "v_rule": "If Drug X requires Tool Z and Facility Y has lost Tool Z, then Facility Y cannot access Drug X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAvailable(Drug X, Facility Y):- Requires(Drug X, Tool Z), Lacks(Facility Y, Tool Z);",
  "v_rule": "If Drug X requires Tool Z and Facility Y lacks Tool Z, then Drug X is not available at Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotLocal(Drug X, Natural Place Y):- GrowsIn(Drug X, Region Z1), DifferentRegion(Natural Place Y, Region Z1);",
  "v_rule": "If Drug X grows in Region Z1 and Natural Place Y is in a different region than Region Z1, then Drug X is not local to Natural Place Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotProducedFrom(Drug X, Material Y):- Require(Drug X, Condition Z2), Absent(Material Y, Condition Z2);",
  "v_rule": "If Drug X requires Condition Z2 and Material Y is absent in Condition Z2, then Drug X is not produced from Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Drug X, Platform Y):- Distribute(Drug X, Technology Z), Lack(Platform Y, Technology Z);",
  "v_rule": "If Drug X is distributed through Technology Z and Platform Y lacks Technology Z, then Platform Y cannot access Drug X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Drug X, Disease Y):- Illegal(Drug X, Region Z2), PrevalentIn(Disease Y, Region Z2);",
  "v_rule": "If Drug X is illegal in Region Z2 and Disease Y is prevalent in Region Z2, then Drug X cannot be accessed for Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Financial Product Y):- LegalRequirement(Financial Product Y, Authorization Z), Lack(Organization X, Authorization Z);",
  "v_rule": "If Financial Product Y has a legal requirement of Authorization Z and Organization X lacks Authorization Z, then Organization X cannot access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Drug X, Alcohol Y):- Treats(Drug X, Disease Z1), Aggravate(Alcohol Y, Disease Z1);",
  "v_rule": "If Drug X treats Disease Z1 and Alcohol Y aggravates Disease Z1, then Drug X cannot be accessed with Alcohol Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Drug Y):- Required(Organization X, Legislation Z2), Prohibits(Legislation Z2, Drug Y);",
  "v_rule": "If Organization X requires Legislation Z2 and Legislation Z2 prohibits Drug Y, then Organization X cannot access Drug Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotEligible(Organization X, Financial Product Y):- Require(Financial Product Y, Authorization Z), Lack(Organization X, Authorization Z);",
  "v_rule": "If Financial Product Y requires Authorization Z and Organization X lacks Authorization Z, then Organization X is not eligible for Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Vehicle X, Tool Y):- OperateIn(Vehicle X, Condition Z1), Unsafe(Tool Y, Condition Z1);",
  "v_rule": "If Vehicle X operates in Condition Z1 and Tool Y is unsafe in Condition Z1, then Tool Y cannot access Vehicle X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Vehicle X, Facility Y):- ExceedsLimit(Vehicle X, Size Z1), SmallerThan(Facility Y, Size Z1);",
  "v_rule": "If Vehicle X exceeds Size Z1 and Facility Y is smaller than Size Z1, then Vehicle X cannot access Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotFueledBy(Vehicle X, Material Y):- Require(Vehicle X, Condition Z1), Damage(Material Y, Condition Z1);",
  "v_rule": "If Vehicle X requires Condition Z1 and Material Y damages Condition Z1, then Vehicle X is not fueled by Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotRequiredInJob(Natural Phenomenon X, Job Y):- Necessary(Job Y, Condition Z), Lack(Natural Phenomenon X, Condition Z);",
  "v_rule": "If Job Y requires Condition Z and Natural Phenomenon X lacks Condition Z, then Natural Phenomenon X is not required in Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Platform X, Game Y):- Built_With(Platform X, Technology Z2), LackIn(Game Y, Technology Z2);",
  "v_rule": "If Platform X is built with Technology Z2 and Game Y lacks Technology Z2, then Game Y cannot be accessed on Platform X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Platform X, Job Y):- Assigned(Job Y, Region Z1), UnavailableIn(Platform X, Region Z1);",
  "v_rule": "If Job Y is assigned to Region Z1 and Platform X is unavailable in Region Z1, then Job Y cannot access Platform X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Platform X, Alcohol Y):- Secure(Platform X, Authorization Z), Lack(Alcohol Y, Authorization Z);",
  "v_rule": "If Platform X is secured by Authorization Z and Alcohol Y lacks Authorization Z, then Alcohol Y cannot be accessed on Platform X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotCompatible(Game X, Game Y):- Needs(Game Y, Skill Z2), Lacks(Game X, Skill Z2);",
  "v_rule": "If Game Y needs Skill Z2 and Game X lacks Skill Z2, then Game X is not compatible with Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotSuitableFor(Game X, Disease Y):- Requires(Game X, Skill Z), ImpairedBy(Disease Y, Skill Z);",
  "v_rule": "If Game X requires Skill Z and Disease Y impairs Skill Z, then Game X is not suitable for someone with Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Game X, Job Y):- Require(Game X, Tool Z1), Unavailable(Job Y, Tool Z1);",
  "v_rule": "If Game X requires Tool Z1 and Tool Z1 is unavailable for Job Y, then Job Y cannot access Game X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotDesignedFor(Game X, Food Y):- Plays(Game X, Tool Z), Lacks(Food Y, Tool Z);",
  "v_rule": "If Game X is played with Tool Z and Food Y lacks Tool Z, then Game X is not designed for Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Job X, Job Y):- Governed(Job Y, Authorization Z2), Lacks(Job X, Authorization Z2);",
  "v_rule": "If Job X lacks Authorization Z2 and Authorization Z2 is required to govern Job Y, then Job X cannot access Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Alcohol X, Food Y):- OrderedFor(Food Y, Event Z1), ProhibitedAt(Alcohol X, Event Z1);",
  "v_rule": "If Food Y is ordered for Event Z1 and Alcohol X is prohibited at Event Z1, then Alcohol X cannot be accessed with Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Show X, Food Y):- ProhibitedIn(Show X, Food Z1), MadeFrom(Food Z1, Food Z1);",
  "v_rule": "If Show X prohibits Food Z1 and Food Y is made from Food Z1, then Food Y cannot be accessed in Show X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Tool X, Material Y):- Use(Tool X, Condition Z1), Lack(Material Y, Condition Z1);",
  "v_rule": "If Tool X is used under Condition Z1 and Material Y lacks Condition Z1, then Tool X cannot access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Tool X, Material Y):- Require(Tool X, Condition Z1), Depleted(Material Y, Condition Z1);",
  "v_rule": "If Tool X requires Condition Z1 and Condition Z1 is depleted in Material Y, then Tool X cannot access Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotSuitableForJob(Tool X, Material Y):- Require(Tool X, Condition Z1), Lack(Material Y, Condition Z1);",
  "v_rule": "If Tool X requires Condition Z1 and Material Y lacks Condition Z1, then Tool X is not suitable for the job on Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Tool X, Natural Phenomenon Y):- Use(Tool X, Condition Z2), AbsentIn(Natural Phenomenon Y, Condition Z2);",
  "v_rule": "If Tool X is used under Condition Z2 and Condition Z2 is absent in Natural Phenomenon Y, then Tool X cannot access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Tool X, Platform Y):- Built_With(Platform Y, Technology Z1), Lack(Tool X, Technology Z1);",
  "v_rule": "If Platform Y is built with Technology Z1 and Tool X lacks Technology Z1, then Tool X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Tool X, Financial Product Y):- Illegal(Tool X, Region Z), OnlyAvailableIn(Financial Product Y, Region Z);",
  "v_rule": "If Tool X is illegal in Region Z and Financial Product Y is only available in Region Z, then Tool X cannot access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotUsedForPreparation(Tool X, Food Y):- Requires(Tool X, Condition Z1), Lacks(Food Y, Condition Z1);",
  "v_rule": "If Tool X requires Condition Z1 and Food Y lacks Condition Z1, then Tool X is not used for the preparation of Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "IncompatibleWith(Electronic Device X, Substance Y):- HarmfulTo(Substance Y, Material Z), MadeOf(Electronic Device X, Material Z);",
  "v_rule": "If Substance Y is harmful to Material Z and Electronic Device X is made of Material Z, then Electronic Device X is incompatible with Substance Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotCompatible(Electronic Device X, Plant Y):- NeedPower(Electronic Device X, Condition Z1), Deprived(Plant Y, Condition Z1);",
  "v_rule": "If Electronic Device X needs Condition Z1 for power and Plant Y is deprived of Condition Z1, then Electronic Device X is not compatible with Plant Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Electronic Device X, Facility Y):- TunedTo(Electronic Device X, Frequency Z2), Block(Facility Y, Frequency Z2);",
  "v_rule": "If Electronic Device X is tuned to Frequency Z2 and Facility Y blocks Frequency Z2, then Electronic Device X cannot access Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Electronic Device X, Facility Y):- Use(Electronic Device X, Condition Z1), AbsentIn(Facility Y, Condition Z1);",
  "v_rule": "If Electronic Device X uses Condition Z1 and Condition Z1 is absent in Facility Y, then Electronic Device X cannot access Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Electronic Device X, Facility Y):- Need(Electronic Device X, Condition Z1), Lack(Facility Y, Condition Z1);",
  "v_rule": "If Electronic Device X needs Condition Z1 and Facility Y lacks Condition Z1, then Electronic Device X cannot access Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotSuitableFor(Electronic Device X, Natural Place Y):- OperateIn(Electronic Device X, Condition Z1), AbsentIn(Natural Place Y, Condition Z1);",
  "v_rule": "If Electronic Device X operates in Condition Z1 and Condition Z1 is absent in Natural Place Y, then Electronic Device X is not suitable for Natural Place Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Electronic Device X, Game Y):- DesignedFor(Game Y, Platform Z), Lacks(Electronic Device X, Platform Z);",
  "v_rule": "If Game Y is designed for Platform Z and Electronic Device X lacks Platform Z, then Electronic Device X cannot access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotSuitable(Electronic Device X, Disease Y):- Require(Electronic Device X, Natural Phenomenon Z1), Lack(Disease Y, Natural Phenomenon Z1);",
  "v_rule": "If Electronic Device X requires Natural Phenomenon Z1 and Disease Y lacks Natural Phenomenon Z1, then Electronic Device X is not suitable for Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RequiresAlternative(Plant X, Facility Y):- Needs(Plant X, Condition Z1), Lacks(Facility Y, Condition Z1);",
  "v_rule": "If Plant X needs Condition Z1 and Facility Y lacks Condition Z1, then Plant X requires an alternative to Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotGrownIn(Plant X, Natural Place Y):- Needs(Plant X, Condition Z2), Lacks(Natural Place Y, Condition Z2);",
  "v_rule": "If Plant X needs Condition Z2 to grow and Natural Place Y lacks Condition Z2, then Plant X cannot grow in Natural Place Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "VulnerableTo(Plant X, Natural Phenomenon Y):- Requires(Plant X, Condition Z), Prevents(Natural Phenomenon Y, Condition Z);",
  "v_rule": "If Plant X requires Condition Z and Natural Phenomenon Y prevents Condition Z, then Plant X is vulnerable to Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Plant X, Platform Y):- GrowsIn(Plant X, Condition Z), Lacks(Platform Y, Condition Z);",
  "v_rule": "If Plant X grows in Condition Z and Platform Y lacks Condition Z, then Plant X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SafeFromDisease(Plant X, Disease Y):- GrowsIn(Plant X, Region Z1), AbsentIn(Disease Y, Region Z1);",
  "v_rule": "If Plant X grows in Region Z1 and Disease Y is absent in Region Z1, then Plant X is safe from Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SafeFromDisease(Plant X, Disease Y):- GrowsIn(Plant X, Time Period Z2), Dormant(Disease Y, Time Period Z2);",
  "v_rule": "If Plant X grows in Time Period Z2 and Disease Y is dormant during Time Period Z2, then Plant X is safe from Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotSuitable(Plant X, Job Y):- StandardIn(Job Y, Skill Z), Lack(Plant X, Skill Z);",
  "v_rule": "If Job Y has a standard skill Z and Plant X lacks Skill Z, then Plant X is not suitable for Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Facility X, Artwork Y):- Preserved(Artwork Y, Condition Z), Lack(Facility X, Condition Z);",
  "v_rule": "If Artwork Y is preserved under Condition Z and Facility X lacks Condition Z, then Facility X cannot access Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotDisplayed(Facility X, Artwork Y):- Require(Artwork Y, Condition Z), Lack(Facility X, Condition Z);",
  "v_rule": "If Artwork Y requires Condition Z and Facility X lacks Condition Z, then Facility X will not display Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Facility X, Financial Product Y):- Require(Facility X, Authorization Z), Expired(Financial Product Y, Authorization Z);",
  "v_rule": "If Facility X requires Authorization Z and the Authorization Z for Financial Product Y has expired, then Facility X cannot access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotFilmedAt(Show Y, Natural Place X):- Require(Show Y, Technology Z), Lack(Natural Place X, Technology Z);",
  "v_rule": "If Show Y requires Technology Z and Natural Place X lacks Technology Z, then Show Y is not filmed at Natural Place X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Material X, Natural Phenomenon Y):- Require(Material X, Condition Z1), Prevents(Natural Phenomenon Y, Condition Z1);",
  "v_rule": "If Material X requires Condition Z1 and Natural Phenomenon Y prevents Condition Z1, then Material X cannot be accessed during Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Material X, Disease Y):- GrownIn(Material X, Region Z1), AbsentIn(Disease Y, Region Z1);",
  "v_rule": "If Material X is grown in Region Z1 and Disease Y is absent in Region Z1, then Disease Y cannot access Material X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotUsedIn(Material X, Artwork Y):- HarmfulTo(Material X, Material Z1), MadeOf(Artwork Y, Material Z1);",
  "v_rule": "If Material X is harmful to Material Z1 and Artwork Y is made of Material Z1, then Material X is not used in Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MaterialRestricted(Material X, Job Y):- UsedIn(Job Y, Tool Z), Lacks(Material X, Tool Z);",
  "v_rule": "If Job Y uses Tool Z and Material X lacks Tool Z, then Material X is restricted for Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Material X, Job Y):- JobIn(Job Y, Region Z1), Illegal(Material X, Region Z1);",
  "v_rule": "If Job Y is in Region Z1 and Material X is illegal in Region Z1, then Material X cannot be accessed for Job Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAffectedBy(Natural Phenomenon X, Disease Y):- ExistsIn(Natural Phenomenon X, Region Z1), AbsentIn(Disease Y, Region Z1);",
  "v_rule": "If Natural Phenomenon X exists in Region Z1 and Disease Y is absent in Region Z1, then Natural Phenomenon X is not affected by Disease Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Alcohol X, Show Y):- SponsoredBy(Show Y, Organization A), Prohibit(Organization A, Alcohol X);",
  "v_rule": "If Show Y is sponsored by Organization A and Organization A prohibits Alcohol X, then Alcohol X cannot be accessed at Show Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RestrictedItem(Alcohol X, Show Y):- SponsoredBy(Show Y, Organization A), Against(Organization A, Alcohol X);",
  "v_rule": "If Show Y is sponsored by Organization A and Organization A is against Alcohol X, then Alcohol X is a restricted item for Show Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToAvoid(Person X, Alcohol Y):- Inherit(Person X, Disease Z1), Worsen(Alcohol Y, Disease Z1);",
  "v_rule": "If Person X has inherited Disease Z1 and Alcohol Y worsens Disease Z1, then Person X needs to avoid Alcohol Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Platform Y):- Hired(Person X, Job Z), Requires(Job Z, Platform Y);",
  "v_rule": "If Person X is hired for Job Z and Job Z requires Platform Y, then Person X needs to use Platform Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToAccess(Person X, Platform Y):- Promoted(Person X, Job Z), Requires(Job Z, Platform Y);",
  "v_rule": "If Person X has been promoted to Job Z and Job Z requires Platform Y, then Person X needs to access Platform Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToApply(Person X, Skill Y):- Hired(Person X, Job Z), Require(Job Z, Skill Y);",
  "v_rule": "If Person X is hired for Job Z and Skill Y is required for Job Z, then Person X needs to apply Skill Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPerformJob(Person X, Skill Y):- Promoted(Person X, Job Z), Standard(Job Z, Skill Y);",
  "v_rule": "If Person X has been promoted to Job Z and Skill Y is a standard requirement for Job Z, then Person X can perform Job Z.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToObtain(Person X, Authorization Y):- WorksIn(Person X, Job Z), Mandated(Job Z, Authorization Y);",
  "v_rule": "If Person X works in Job Z and Job Z mandates Authorization Y, then Person X needs to obtain Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AppliesFor(Person X, Authorization Y):- WorksIn(Person X, Job Z), Requires(Job Z, Authorization Y);",
  "v_rule": "If Person X works in Job Z and Job Z requires Authorization Y, then Person X applies for Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AppliesFor(Person X, Authorization Y):- Hired(Person X, Job Z), Governed(Job Z, Authorization Y);",
  "v_rule": "If Person X is hired for Job Z and Job Z is governed by Authorization Y, then Person X can apply for Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AppliesFor(Person X, Authorization Y):- PromotedTo(Person X, Job Z), Mandated(Job Z, Authorization Y);",
  "v_rule": "If Person X is promoted to Job Z and Job Z mandates Authorization Y, then Person X applies for Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToObtain(Person X, Authorization Y):- WantsToAccess(Person X, Facility Z), Operates(Facility Z, Authorization Y);",
  "v_rule": "If Person X wants to access Facility Z and Facility Z operates with Authorization Y, then Person X needs to obtain Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MustComplyWithRules(Person X, Authorization Y):- Needs(Person X, Facility Z), Governed(Facility Z, Authorization Y);",
  "v_rule": "If Person X needs Facility Z and Facility Z is governed by Authorization Y, then Person X must comply with Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LivesInRegionWith(Person X, Natural Phenomenon Y):- MoveTo(Person X, Region Z), Located(Region Z, Natural Phenomenon Y);",
  "v_rule": "If Person X moves to Region Z and Region Z is located in Natural Phenomenon Y, then Person X lives in a region with Natural Phenomenon Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPresent(Person X, Authorization Y):- LivesIn(Person X, Region Z), Requires(Region Z, Authorization Y);",
  "v_rule": "If Person X lives in Region Z and Region Z requires Authorization Y, then Person X needs to present Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ResponsibleFor(Person X, Authorization Y):- WantsToEnter(Person X, Region Z), Requires(Region Z, Authorization Y);",
  "v_rule": "If Person X wants to enter Region Z and Region Z requires Authorization Y, then Person X is responsible for Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "NeedToUse(Person X, Authorization Y):- Visits(Person X, Region Z1), Requires(Region Z1, Authorization Y);",
  "v_rule": "If Person X visits Region Z1 and Region Z1 requires Authorization Y, then Person X needs to use Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasObligation(Person X, Authorization Y):- Protected(Region Z1, Authorization Y), Work(Person X, Region Z1);",
  "v_rule": "If Person X works in Region Z1 and Region Z1 is protected by Authorization Y, then Person X has an obligation to Authorization Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToObey(Person X, Legislation Y):- MoveTo(Person X, Region Z), Apply(Legislation Y, Region Z);",
  "v_rule": "If Person X moves to Region Z and Legislation Y applies to Region Z, then Person X needs to obey Legislation Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasHealthRisk(Person X, Alcohol Y):- Has(Person X, Disease Z1), Worsen(Alcohol Y, Disease Z1);",
  "v_rule": "If Person X has Disease Z1 and Alcohol Y worsens Disease Z1, then Person X has a health risk with Alcohol Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SubjectToLaw(Person X, Legislation Y):- Naturalized(Person X, Region Z), EnforcedIn(Legislation Y, Region Z);",
  "v_rule": "If Person X is naturalized in Region Z and Legislation Y is enforced in Region Z, then Person X is subject to Legislation Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToServe(Person X, Alcohol Y):- HasGuest(Person X, Person Z1), Prefers(Person Z1, Alcohol Y);",
  "v_rule": "If Person X has a guest Person Z1, and Person Z1 prefers Alcohol Y, then Person X needs to serve Alcohol Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPrevent(Person X, Disease Y):- BeSusceptibleTo(Person X, Disease Z1), CanLeadTo(Disease Z1, Disease Y);",
  "v_rule": "If Person X is susceptible to Disease Z1 and Disease Z1 can lead to Disease Y, then Person X needs to prevent Disease Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPrepareFor(Person X, Condition Y):- Predict(Person X, Event Z), Cause(Event Z, Condition Y);",
  "v_rule": "If Person X predicts Event Z, and Event Z can cause Condition Y, then Person X needs to prepare for Condition Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToSurvive(Person X, Natural Phenomenon Y):- HaveBusiness(Person X, Region Z1), ProneTo(Region Z1, Natural Phenomenon Y);",
  "v_rule": "If Person X has a business in Region Z1 and Region Z1 is prone to Natural Phenomenon Y, then Person X needs to survive Natural Phenomenon Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Material Y):- Has(Person X, Job Z), Require(Job Z, Material Y);",
  "v_rule": "If Person X has a Job Z, and Job Z requires Material Y, then Person X needs to use Material Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToAvoid(Person X, Substance Y):- Has(Person X, Disease Z1), CanWorsen(Substance Y, Disease Z1);",
  "v_rule": "If Person X has a Disease Z1, and Substance Y can worsen Disease Z1, then Person X needs to avoid Substance Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Tool Y):- HasJob(Person X, Job Z1), RequiredIn(Tool Y, Job Z1);",
  "v_rule": "If Person X has a Job Z1, and Tool Y is required in Job Z1, then Person X needs to use Tool Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanSurvive(Person X, Condition Y):- MoveTo(Person X, Region Z), Climate(Region Z, Condition Y);",
  "v_rule": "If Person X moves to Region Z and the climate in Region Z is Condition Y, then Person X can survive Condition Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasPotential(Person X, Condition Y):- Develop(Person X, Condition Z1), Triggers(Condition Y, Condition Y);",
  "v_rule": "If Person X develops Condition Z1 and Condition Z1 triggers Condition Y, then Person X has the potential for Condition Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HarmfulToHealth(Person X, Substance Y):- Has(Person X, Disease Z1), CanWorsen(Substance Y, Disease Z1);",
  "v_rule": "If Person X has Disease Z1 and Substance Y can worsen Disease Z1, then Substance Y is harmful to Person X's health.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Furniture Y):- Has(Person X, Event Z), RequiredFor(Furniture Y, Event Z);",
  "v_rule": "If Person X has Event Z and Furniture Y is required for Event Z, then Person X needs to use Furniture Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CannotConsume(Person X, Alcohol Y):- Develop(Person X, Disease Z1), Worsen(Alcohol Y, Disease Z1);",
  "v_rule": "If Person X develops Disease Z1 and Alcohol Y worsens Disease Z1, then Person X cannot consume Alcohol Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SeekingEmployment(Person X, Job Y):- Wants(Person X, Job Z1), Is(Job Y, Job Z1);",
  "v_rule": "If Person X wants Job Z1 and Job Y is the same as Job Z1, then Person X is seeking employment in Job Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToDrive(Person X, Vehicle Y):- Has(Person X, Job Z), Transport(Job Z, Vehicle Y);",
  "v_rule": "If Person X has Job Z and Job Z requires transportation using Vehicle Y, then Person X needs to drive Vehicle Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToOperate(Person X, Tool Y):- Has(Person X, Job Z), Use(Job Z, Tool Y);",
  "v_rule": "If Person X has Job Z and Tool Y is used for Job Z, then Person X needs to operate Tool Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "DependentOn(Person X, Technology Y):- HasJob(Person X, Job Z), Requires(Job Z, Technology Y);",
  "v_rule": "If Person X has Job Z and Job Z requires Technology Y, then Person X is dependent on Technology Y.",
  "domain": "need",
  "depth": 0,
  "length": 2,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeStainedBy(Furniture X, Alcohol Y):- MaterialOf(Furniture X, Material Z1), ResistantTo(Material Z1, Alcohol Y);",
  "v_rule": "If Furniture X is made of Material Z1, and Material Z1 is resistant to Alcohol Y, then Furniture X cannot be stained by Alcohol Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDiscoloredBy(Furniture X, Drug Y):- CoatedWith(Furniture X, Substance Z2), ResistantTo(Substance Z2, Drug Y);",
  "v_rule": "If Furniture X is coated with Substance Z2, and Substance Z2 is resistant to Drug Y, then Furniture X cannot be discolored by Drug Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDisplayedBy(Artwork X, Organization Y):- CreatedIn(Artwork X, Region Z1), BannedIn(Region Z1, Organization Y);",
  "v_rule": "If Artwork X was created in Region Z1, and Organization Y has banned items from Region Z1, then Artwork X cannot be displayed by Organization Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBePaintedWith(Furniture X, Substance Y):- FurnitureCondition(Furniture X, Condition Z2), SubstanceIneffective(Condition Z2, Substance Y);",
  "v_rule": "If Furniture X is in Condition Z2, and Substance Y is ineffective on Condition Z2, then Furniture X cannot be painted with Substance Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBePolishedWith(Furniture X, Substance Y):- MaterialOf(Furniture X, Material Z1), SubstanceReactsWith(Material Z1, Substance Y);",
  "v_rule": "If Furniture X is made of Material Z1, and Substance Y reacts with Material Z1, then Furniture X cannot be polished with Substance Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPreserve(Artwork X, Substance Y):- MaterialOf(Artwork X, Material Z1), Degrades(Material Z1, Substance Y);",
  "v_rule": "If Artwork X is made of Material Z1 and Substance Y degrades Material Z1, then Substance Y cannot preserve Artwork X.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrevent(Substance X, Disease Y):- Contains(Substance X, Food Z1), Causes(Food Z1, Disease Y);",
  "v_rule": "If Substance X contains Food Z1, and Food Z1 causes Disease Y, then Substance X cannot prevent Disease Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrevent(Substance X, Disease Y):- Lacks(Substance X, Food Z2), NeededForPrevention(Food Z2, Disease Y);",
  "v_rule": "If Substance X lacks Food Z2, and Food Z2 is needed for the prevention of Disease Y, then Substance X cannot prevent Disease Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotStain(Substance X, Publication Y):- MaterialOf(Publication Y, Material Z1), ResistantTo(Material Z1, Substance X);",
  "v_rule": "If Publication Y is made of Material Z1, and Material Z1 is resistant to Substance X, then Substance X cannot stain Publication Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDamagedBy(Tool X, Natural Phenomenon Y):- StoredIn(Tool X, Region Z2), ProtectedFrom(Region Z2, Natural Phenomenon Y);",
  "v_rule": "If Tool X is stored in Region Z2, and Region Z2 is protected from Natural Phenomenon Y, then Tool X cannot be damaged by Natural Phenomenon Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrevent(Disease X, Food Y):- Aggravates(Food Y, Condition Z1), LeadsTo(Condition Z1, Disease X);",
  "v_rule": "If Food Y aggravates Condition Z1, and Condition Z1 leads to Disease X, then Food Y cannot prevent Disease X.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDamagedBy(Electronic Device X, Alcohol Y):- CoatedWith(Electronic Device X, Substance Z2), Impermeable(Substance Z2, Alcohol Y);",
  "v_rule": "If Electronic Device X is coated with Substance Z2, and Substance Z2 is impermeable to Alcohol Y, then Electronic Device X cannot be damaged by Alcohol Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeCleanedWith(Electronic Device X, Alcohol Y):- MaterialOf(Electronic Device X, Material Z1), ReactsWith(Material Z1, Alcohol Y);",
  "v_rule": "If Electronic Device X is made of Material Z1, and Material Z1 reacts with Alcohol Y, then Electronic Device X cannot be cleaned with Alcohol Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeIntegratedWith(Electronic Device X, Technology Y):- Requires(Electronic Device X, Technology Z1), IncompatibleWith(Technology Z1, Technology Y);",
  "v_rule": "If Electronic Device X requires Technology Z1, and Technology Z1 is incompatible with Technology Y, then Electronic Device X cannot be integrated with Technology Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotSecure(Technology X, Financial Product Y):- TechnologyAge(Technology X, Age Z2), Outdated(Age Z2, Financial Product Y);",
  "v_rule": "If Technology X has an Age Z2, and Age Z2 is considered outdated for Financial Product Y, then Technology X cannot secure Financial Product Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotContain(Natural Place X, Substance Y):- NaturalComposition(Natural Place X, Substance Z1), Incompatible(Substance Z1, Substance Y);",
  "v_rule": "If Natural Place X has a natural composition of Substance Z1, and Substance Z1 is incompatible with Substance Y, then Natural Place X cannot contain Substance Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotProduce(Organization X, Alcohol Y):- LocatedIn(Organization X, Region Z2), AlcoholBan(Region Z2, Alcohol Y);",
  "v_rule": "If Organization X is located in Region Z2, and Region Z2 has a ban on Alcohol Y, then Organization X cannot produce Alcohol Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrevent(Natural Phenomenon X, Disease Y):- Causes(Natural Phenomenon X, Condition Z1), LeadsTo(Condition Z1, Disease Y);",
  "v_rule": "If Natural Phenomenon X causes Condition Z1, and Condition Z1 leads to Disease Y, then Natural Phenomenon X cannot prevent Disease Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotCauseGrowth(Natural Phenomenon X, Plant Y):- CausesCondition(Natural Phenomenon X, Condition Z2), InhibitsGrowth(Condition Z2, Plant Y);",
  "v_rule": "If Natural Phenomenon X causes Condition Z2, and Condition Z2 inhibits the growth of Plant Y, then Natural Phenomenon X cannot cause the growth of Plant Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeAffectedBy(Natural Phenomenon X, Furniture Y):- MaterialOf(Furniture Y, Material Z1), ResistantTo(Material Z1, Natural Phenomenon X);",
  "v_rule": "If Furniture Y is made of Material Z1, and Material Z1 is resistant to Natural Phenomenon X, then Furniture Y cannot be affected by Natural Phenomenon X.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrevent(Alcohol X, Disease Y):- IncreasesRisk(Alcohol X, Condition Z2), LeadsTo(Condition Z2, Disease Y);",
  "v_rule": "If Alcohol X increases the risk of Condition Z2, and Condition Z2 leads to Disease Y, then Alcohol X cannot prevent Disease Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeServedIn(Alcohol X, Facility Y):- FacilityType(Facility Y, Facility Z1), AlcoholRestriction(Facility Z1, Alcohol X);",
  "v_rule": "If Facility Y is of Facility Z1 type and Alcohol X is restricted in Facility Z1 type, then Alcohol X cannot be served in Facility Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotContaminate(Drug X, Material Y):- StoredIn(Drug X, Tool Z2), Sealed(Tool Z2, Material Y);",
  "v_rule": "If Drug X is stored in Tool Z2, and Tool Z2 is sealed with Material Y, then Drug X cannot contaminate Material Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDistributedBy(Drug X, Organization Y):- ManufacturedBy(Drug X, Organization Z1), BannedBy(Organization Z1, Organization Y);",
  "v_rule": "If Drug X is manufactured by Organization Z1, and Organization Z1 is banned by Organization Y, then Drug X cannot be distributed by Organization Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDistributedBy(Drug X, Organization Y):- Contains(Drug X, Substance Z2), ProhibitedBy(Substance Z2, Organization Y);",
  "v_rule": "If Drug X contains Substance Z2, and Substance Z2 is prohibited by Organization Y, then Drug X cannot be distributed by Organization Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotBeInfluencedBy(Facility X, Natural Phenomenon Y):- BuiltWith(Facility X, Material Z1), ResistantTo(Material Z1, Natural Phenomenon Y);",
  "v_rule": "If Facility X is built with Material Z1 and Material Z1 is resistant to Natural Phenomenon Y, then Facility X cannot be influenced by Natural Phenomenon Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeServedAt(Facility X, Alcohol Y):- FacilityRegion(Facility X, Region Z2), AlcoholBan(Region Z2, Alcohol Y);",
  "v_rule": "If Facility X is located at Region Z2, and Alcohol Y is banned in Region Z2, then Alcohol Y cannot be served at Facility X.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDecoratedWith(Platform X, Plant Y):- MaterialOf(Platform X, Material Z1), ToxicTo(Material Z1, Plant Y);",
  "v_rule": "If Platform X is made of Material Z1, and Material Z1 is toxic to Plant Y, then Platform X cannot be decorated with Plant Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDamagedBy(Artwork X, Substance Y):- CoatedWith(Artwork X, Material Z2), ProtectsAgainst(Material Z2, Substance Y);",
  "v_rule": "If Artwork X is coated with Material Z2, and Material Z2 protects against Substance Y, then Artwork X cannot be damaged by Substance Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBePreservedWith(Artwork X, Tool Y):- MaterialOf(Artwork X, Material Z1), ToolDamages(Material Z1, Tool Y);",
  "v_rule": "If Artwork X is made of Material Z1, and Tool Y damages Material Z1, then Artwork X cannot be preserved with Tool Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBePreservedIn(Publication X, Material Y):- MaterialOf(Publication X, Material Z1), DegradesIn(Material Z1, Material Y);",
  "v_rule": "If Publication X is made of Material Z1, and Material Z1 degrades in Material Y, then Publication X cannot be preserved in Material Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeSponsoredBy(Publication X, Organization Y):- PublishedBy(Publication X, Organization Z1), CompetesWith(Organization Z1, Organization Y);",
  "v_rule": "If Publication X is published by Organization Z1, and Organization Z1 competes with Organization Y, then Publication X cannot be sponsored by Organization Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotBeGambledOn(Financial Product X, Game Y):- RegulatedBy(Financial Product X, Facility Z1), ProhibitedBy(Facility Z1, Game Y);",
  "v_rule": "If Financial Product X is regulated by Facility Z1, and Game Y is prohibited by Facility Z1, then Financial Product X cannot be gambled on Game Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotEnhanceEffect(Food X, Drug Y):- Contains(Food X, Substance Z1), Neutralizes(Substance Z1, Drug Y);",
  "v_rule": "If Food X contains Substance Z1, and Substance Z1 neutralizes Drug Y, then Food X cannot enhance the effect of Drug Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBePackagedIn(Drug X, Material Y):- Contains(Drug X, Substance A), ReactsWith(Substance A, Material Y);",
  "v_rule": "If Drug X contains Substance A and Substance A reacts with Material Y, then Drug X cannot be packaged in Material Y.",
  "domain": "interaction",
  "depth": 0,
  "length": 2,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAdopt(Person X, Animal Y):- Own(Person X, Space Z1), RequireSpace(Animal Y, Space Z2), BiggerThan(Space Z1, Space Z2);",
  "v_rule": "If Person X owns Space Z1 and the space required for Animal Y is Space Z2, and Space Z1 is bigger than Space Z2, then Person X can adopt Animal Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPurchase(Person X, Material Y):- Have(Person X, Money Z1), Buy(Material Y, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has Money Z1 and the cost to buy Material Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X can purchase Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMove(Person X, Furniture Y):- BornWith(Person X, Strength Z1), RequireMinimumStrength(Furniture Y, Strength Z2), BiggerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X is born with Strength Z1 and the minimum strength required to move Furniture Y is Strength Z2, and Strength Z1 is bigger than Strength Z2, then Person X can move Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanSitOn(Person X, Furniture Y):- Have(Person X, Weight Z1), BuiltFor(Furniture Y, Weight Z2), SmallerThan(Weight Z1, Weight Z2);",
  "v_rule": "If Person X has a Weight Z1 and the Furniture Y is built for Weight Z2, and Weight Z1 is smaller than Weight Z2, then Person X can sit on Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanJoin(Person X, Organization Y):- Have(Person X, Age Z1), SetByLaw(Organization Y, Age Z2), BiggerThan(Age Z1, Age Z2);",
  "v_rule": "If Person X has Age Z1 and the law sets Age Z2 as the minimum age for joining Organization Y, and Age Z1 is bigger than Age Z2, then Person X can join Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRide(Person X, Animal Y):- Have(Person X, Weight Z1), Adapted(Animal Y, Weight Z2), SmallerThan(Weight Z1, Weight Z2);",
  "v_rule": "If Person X has Weight Z1 and Animal Y is adapted to carry Weight Z2, and Weight Z1 is smaller than Weight Z2, then Person X can ride Animal Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MemberOf(Person X, Organization Y):- Have(Person X, Age Z1), RequireMinimumAge(Organization Y, Age Z2), BiggerThan(Age Z1, Age Z2);",
  "v_rule": "If Person X has Age Z1 and the minimum age requirement for joining Organization Y is Age Z2, and Age Z1 is bigger than Age Z2, then Person X can be a member of Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDonate(Person X, Organization Y):- Have(Person X, Money Z1), Fundraising(Organization Y, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has Money Z1 and Organization Y is fundraising for Money Z2, and Money Z1 is bigger than Money Z2, then Person X can donate to Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanWatch(Person X, Show Y):- Have(Person X, Age Z1), RatedForAdults(Show Y, Age Z2), BiggerThan(Age Z1, Age Z2);",
  "v_rule": "If Person X is of Age Z1 and Show Y is rated for adults of Age Z2, and Age Z1 is bigger than Age Z2, then Person X can watch Show Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCollect(Person X, Artwork Y):- Afford(Person X, Price Z1), SoldAt(Artwork Y, Price Z2), BiggerThan(Price Z1, Price Z2);",
  "v_rule": "If Person X can afford Price Z1 and Artwork Y is sold at Price Z2, and Price Z1 is bigger than Price Z2, then Person X can collect Artwork Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanApplyFor(Person X, Job Y):- Granted(Person X, Authorization Z1), Require(Job Y, Authorization Z2), BiggerThan(Authorization Z1, Authorization Z2);",
  "v_rule": "If Person X has been granted Authorization Z1 and Job Y requires Authorization Z2, and Authorization Z1 is greater than Authorization Z2, then Person X can apply for Job Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Game Y):- Earn(Person X, Money Z1), Price(Game Y, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X earns Money Z1 and the price of Game Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Game Y):- Have(Person X, Money Z1), OnSale(Game Y, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has Money Z1 and Game Y is on sale for Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPlay(Person X, Game Y):- Age(Person X, Age Z1), LegalAge(Game Y, Age Z2), BiggerThan(Age Z1, Age Z2);",
  "v_rule": "If Person X is of Age Z1 and the legal age to play Game Y is Age Z2, and Age Z1 is bigger than Age Z2, then Person X can play Game Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRide(Person X, Vehicle Y):- Surgery(Person X, Height Z1), RequireMinimumHeight(Vehicle Y, Height Z2), BiggerThan(Height Z1, Height Z2);",
  "v_rule": "If Person X has a height of Z1 due to surgery and the minimum height requirement to ride Vehicle Y is Height Z2, and Height Z1 is bigger than Height Z2, then Person X can ride Vehicle Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Person X, Tool Y):- Develop(Person X, Strength Z1), RequireStrength(Tool Y, Strength Z2), BiggerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X has developed Strength Z1 and the Tool Y requires Strength Z2, and Strength Z1 is bigger than Strength Z2, then Person X can use Tool Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasMoneyFor(Person X, Food Y):- Earn(Person X, Money Z1), Cost(Food Y, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X earns Money Z1 and the cost of Food Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X has money for Food Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasCapital(Person X, Financial Product Y):- Have(Person X, Money Z1), RequireMinimumInvestment(Financial Product Y, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has Money Z1 and the minimum investment required for Financial Product Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X has the capital for Financial Product Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasAccess(Person X, Facility Y):- EarnsMoreThan(Person X, Price Z1), PriceOf(Facility Y, Price Z2), BiggerThan(Price Z1, Price Z2);",
  "v_rule": "If Person X earns more than Price Z1 and the price of accessing Facility Y is Price Z2, and Price Z1 is bigger than Price Z2, then Person X has access to Facility Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMaintainPlant(Person X, Plant Y):- WorkIn(Person X, Job A), Require(Job A, Skill Z2), NeededFor(Skill Z2, Plant Y);",
  "v_rule": "If Person X works in Job A and Job A requires Skill Z2, and Skill Z2 is needed for maintaining Plant Y, then Person X can maintain Plant Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDisplay(Person X, Artwork Y):- Inherit(Person X, Space Z1), ConditionOf(Space Z1, Condition A), Require(Artwork Y, Condition A);",
  "v_rule": "If Person X inherits Space Z1 and the condition of Space Z1 is Condition A, and Artwork Y requires Condition A, then Person X can display Artwork Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasSkills(Person X, Platform Y):- JobRequires(Person X, Job A), JobRequires(Job A, Skill Z1), DevelopedFor(Skill Z1, Platform Y);",
  "v_rule": "If Person X has a job A that requires Skill Z1 and Skill Z1 is developed for Platform Y, then Person X has skills for Platform Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanTravel(Person X, Vehicle Y):- Job(Person X, Job A), Needed(Skill Z1, Job A), Drive(Skill Z1, Vehicle Y);",
  "v_rule": "If Person X has Job A and Skill Z1 is needed for Job A, and Skill Z1 allows driving Vehicle Y, then Person X can travel with Vehicle Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCook(Person X, Food Y):- JobRequires(Person X, Job A), JobRequiresSkill(Job A, Skill Z), RequiredFor(Skill Z, Food Y);",
  "v_rule": "If Person X has a job A that requires Skill Z, and Skill Z is required to cook Food Y, then Person X can cook Food Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPark(Person X, Vehicle Y):- Rent(Person X, Facility A), Contain(Facility A, Space Z2), DesignedFor(Vehicle Y, Space Z2);",
  "v_rule": "If Person X rents Facility A and Facility A contains Space Z2, and Vehicle Y is designed for Space Z2, then Person X can park Vehicle Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUpgrade(Person X, Technology Y):- WorkedAt(Person X, Job A), RequiredFor(Skill Z1, Job A), Improves(Skill Z1, Technology Y);",
  "v_rule": "If Person X has worked at Job A and Skill Z1 is required for Job A, and Skill Z1 improves Technology Y, then Person X can upgrade Technology Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMeasure(Person X, Natural Phenomenon Y):- WorkAs(Person X, Job A), Require(Job A, Tool Z1), DesignedFor(Tool Z1, Natural Phenomenon Y);",
  "v_rule": "If Person X works as Job A and Job A requires Tool Z1, and Tool Z1 is designed for measuring Natural Phenomenon Y, then Person X can measure Natural Phenomenon Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCompose(Person X, Publication Y):- Job(Person X, Job A), Require(Job A, Skill Z1), RequiredForWriting(Skill Z1, Publication Y);",
  "v_rule": "If Person X has Job A and Job A requires Skill Z1, and Skill Z1 is required for writing Publication Y, then Person X can compose Publication Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCook(Person X, Food Y):- ParticipateIn(Person X, Event A), Involve(Event A, Skill Z), RequiredFor(Skill Z, Food Y);",
  "v_rule": "If Person X participates in Event A, and Event A involves Skill Z, and Skill Z is required for cooking Food Y, then Person X can cook Food Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasAccessTo(Person X, Platform Y):- Sent(Person A, Electronic Device Z1), To(Person A, Person X), DesignedFor(Platform Y, Electronic Device Z1);",
  "v_rule": "If Person A has sent Electronic Device Z1 to Person X, and Platform Y is designed for Electronic Device Z1, then Person X has access to Platform Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanEvaluateArtwork(Person X, Artwork Y):- JobRequires(Person X, Job A), JobRequires(Job A, Skill Z1), Damaged(Artwork Y, Skill Z1);",
  "v_rule": "If Person X has a job A that requires Skill Z1 and Artwork Y is damaged and requires Skill Z1 for evaluation, then Person X can evaluate Artwork Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMove(Person X, Furniture Y):- WorkIn(Person X, Job A), Require(Job A, Tool Z), CanLift(Tool Z, Furniture Y);",
  "v_rule": "If Person X works in Job A and Job A requires Tool Z, and Tool Z can lift Furniture Y, then Person X can move Furniture Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "KnowsHowToUse(Person X, Platform Y):- WorkAs(Person X, Job A), Need(Job A, Skill Z2), Maintain(Platform Y, Skill Z2);",
  "v_rule": "If Person X works as Job A and Job A needs Skill Z2, and Platform Y is maintained by Skill Z2, then Person X knows how to use Platform Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanRequest(Person X, Authorization Y):- WorkIn(Person X, Job A), Require(Job A, Skill Z1), MandatoryFor(Skill Z1, Authorization Y);",
  "v_rule": "If Person X works in Job A and Job A requires Skill Z1, and Skill Z1 is mandatory for Authorization Y, then Person X can request Authorization Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanWorkFor(Person X, Organization Y):- Have(Person X, Skill Z1), RequireFor(Job A, Skill Z1), Offer(Organization Y, Job A);",
  "v_rule": "If Person X has Skill Z1, and Skill Z1 is required for Job A, and Organization Y offers Job A, then Person X can work for Organization Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDiscuss(Person X, Show Y):- BornIn(Person X, Time Period Z1), AiredAt(Show Y, Time Period Z2), LaterThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Person X was born in Time Period Z1 and Show Y aired during Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Person X can discuss Show Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Artwork Y):- AliveDuring(Person X, Time Period Z1), Produced(Artwork Y, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Person X was alive during Time Period Z1 and Artwork Y was produced during Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Person X can access Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Person X, Furniture Y):- BornIn(Person X, Time Period Z1), CraftedIn(Furniture Y, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Person X was born in Time Period Z1 and Furniture Y was crafted in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Person X can use Furniture Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Technology Y):- ActiveIn(Organization X, Time Period Z1), DevelopedIn(Technology Y, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Organization X is active in Time Period Z1 and Technology Y was developed in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can access Technology Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Financial Product Y):- FoundedDuring(Organization X, Time Period Z1), OfferDuring(Financial Product Y, Time Period Z2), Overlap(Time Period Z1, Time Period Z2);",
  "v_rule": "If Organization X was founded during Time Period Z1 and Financial Product Y is offered during Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Organization X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MustComply(Organization X, Legislation Y):- EstablishedIn(Organization X, Time Period Z1), PassedIn(Legislation Y, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Organization X was established in Time Period Z1 and Legislation Y was passed in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X must comply with Legislation Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Event X, Technology Y):- HappenAt(Event X, Time Period Z1), OriginatedDuring(Technology Y, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Event X happens at Time Period Z1 and Technology Y originated during Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Event X can access Technology Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPlay(Organization X, Game Y):- CreatedIn(Organization X, Time Period Z1), PublishedDuring(Game Y, Time Period Z2), EarlierThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Organization X was created in Time Period Z1 and Game Y was published during Time Period Z2, and Time Period Z1 is earlier than Time Period Z2, then Organization X can play Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Substance X, Job Y):- ExistDuring(Substance X, Time Period Z1), OperateDuring(Job Y, Time Period Z2), Within(Time Period Z1, Time Period Z2);",
  "v_rule": "If Substance X exists during Time Period Z1 and Job Y operates during Time Period Z2, and Time Period Z2 is within Time Period Z1, then Job Y can access Substance X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Facility X, Material Y):- OpenDuring(Facility X, Time Period Z1), MinedIn(Material Y, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Facility X is open during Time Period Z1 and Material Y is mined in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Facility X can use Material Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Financial Product Y):- OperateIn(Facility X, Time Period Z1), OfferDuring(Financial Product Y, Time Period Z2), StartBeforeEnd(Time Period Z1, Time Period Z2);",
  "v_rule": "If Facility X operates in Time Period Z1 and Financial Product Y is offered during Time Period Z2, and Time Period Z2 starts before the end of Time Period Z1, then Facility X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": true,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Job X, Food Y):- JobInRegion(Job X, Region Z), NaturalGrow(Food Y, Natural Place A), LocatedIn(Natural Place A, Region Z);",
  "v_rule": "If Job X is in Region Z and Food Y naturally grows in Natural Place A, which is located in Region Z, then Job X can access Food Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Event Y):- StudiesIn(Person X, Facility A), LocatedIn(Facility A, Region Z), OrganizedIn(Event Y, Region Z);",
  "v_rule": "If Person X studies in Facility A, and Facility A is located in Region Z, and Event Y is organized in Region Z, then Person X can access Event Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Disease Y):- SurviveIn(Animal X, Condition A), ConditionIn(Region Z, Condition A), PrevalentIn(Disease Y, Region Z);",
  "v_rule": "If Animal X can survive in Condition A, and Condition A is present in Region Z, and Disease Y is prevalent in Region Z, then Animal X can access Disease Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AtRisk(Person X, Disease Y):- LiveIn(Person X, Region Z), SpreadIn(Disease Y, Animal A), CommonIn(Animal A, Region Z);",
  "v_rule": "If Person X lives in Region Z and Disease Y is spread by Animal A, and Animal A is common in Region Z, then Person X is at risk of Disease Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Facility X, Material Y):- LocatedIn(Facility X, Region Z), ManufacturedIn(Material Y, Facility A), LocatedIn(Facility A, Region Z);",
  "v_rule": "If Facility X is located in Region Z, Material Y is manufactured in Facility A, and Facility A is also located in Region Z, then Facility X can use Material Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Tool Y):- EstablishedIn(Organization X, Region Z1), SoldIn(Tool Y, Facility A), LocatedIn(Facility A, Region Z1);",
  "v_rule": "If Organization X is established in Region Z1 and Tool Y is sold in Facility A, which is located in Region Z1, then Organization X can access Tool Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Alcohol Y):- OpenDuring(Facility X, Time Period Z1), BrewedDuring(Alcohol Y, Time Period A), EarlierThan(Time Period A, Time Period Z1);",
  "v_rule": "If Facility X is open during Time Period Z1 and Alcohol Y is brewed during Time Period A, and Time Period A is earlier than Time Period Z1, then Facility X can access Alcohol Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Game Y):- LiveIn(Person X, Region Z1), DistributedBy(Game Y, Organization A), OperateIn(Organization A, Region Z1);",
  "v_rule": "If Person X lives in Region Z1 and Game Y is distributed by Organization A which operates in Region Z1, then Person X can access Game Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Technology X, Game Y):- DevelopedFor(Technology X, Electronic Device A), CompatibleWith(Electronic Device A, Platform Z), DevelopedFor(Game Y, Platform Z);",
  "v_rule": "If Technology X is developed for Electronic Device A, and Electronic Device A is compatible with Platform Z, and Game Y is developed for Platform Z, then Technology X can access Game Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Substance Y):- MigratedTo(Animal X, Region Z), GrowsIn(Plant A, Region Z), DerivedFrom(Substance Y, Plant A);",
  "v_rule": "If Animal X has migrated to Region Z, and Plant A grows in Region Z, and Substance Y is derived from Plant A, then Animal X can access Substance Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Substance Y):- OperateIn(Organization X, Facility A), SituatedIn(Facility A, Region Z), ImportedTo(Substance Y, Region Z);",
  "v_rule": "If Organization X operates in Facility A which is situated in Region Z, and Substance Y is imported to Region Z, then Organization X can access Substance Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Food Y):- NativeTo(Animal X, Region Z), CultivatedIn(Food Y, Facility A), LocatedIn(Facility A, Region Z);",
  "v_rule": "If Animal X is native to Region Z and Food Y is cultivated in Facility A, which is located in Region Z, then Animal X can access Food Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Substance X, Legislation Y):- Allowed(Substance X, Material Z), Require(Material Z, Authorization A), Mandate(Authorization A, Legislation Y);",
  "v_rule": "If Substance X is allowed as Material Z, and Material Z requires Authorization A, and Authorization A is mandated by Legislation Y, then Substance X can be accessed under Legislation Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Vehicle X, Natural Place Y):- EquippedFor(Vehicle X, Condition Z1), LocatedIn(Natural Place Y, Region A), CharacterizedBy(Region A, Condition Z1);",
  "v_rule": "If Vehicle X is equipped for Condition Z1 and Natural Place Y is located in Region A which is characterized by Condition Z1, then Vehicle X can access Natural Place Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDeliver(Vehicle X, Food Y):- OperateIn(Vehicle X, Region Z1), NaturalGrow(Food Y, Natural Place A), LocatedIn(Natural Place A, Region Z1);",
  "v_rule": "If Vehicle X operates in Region Z1 and Food Y naturally grows in Natural Place A which is located in Region Z1, then Vehicle X can deliver Food Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Food Y):- Nocturnal(Animal X, Time Period Z1), StoredIn(Food Y, Region A), OpenDuring(Region A, Time Period Z1);",
  "v_rule": "If Animal X is nocturnal during Time Period Z1, and Food Y is stored in Region A which is open during Time Period Z1, then Animal X can access Food Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Game Y):- MoveTo(Person X, Region Z1), DistributedIn(Game Y, Platform A), PopularIn(Platform A, Region Z1);",
  "v_rule": "If Person X moves to Region Z1 and Game Y is distributed on Platform A, and Platform A is popular in Region Z1, then Person X can access Game Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Tool Y):- WorksIn(Person X, Organization A), LocatedIn(Organization A, Region Z1), FoundIn(Tool Y, Region Z1);",
  "v_rule": "If Person X works in Organization A, and Organization A is located in Region Z1, and Tool Y is found in Region Z1, then Person X can access Tool Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Alcohol Y):- OperateIn(Facility X, Time Period Z1), ConsumedIn(Alcohol Y, Event A), OccurredIn(Event A, Time Period Z1);",
  "v_rule": "If Facility X operates in Time Period Z1, and Alcohol Y is consumed in Event A, and Event A occurs in Time Period Z1, then Facility X can access Alcohol Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Substance X, Facility Y):- NaturalIn(Substance X, Natural Place A), LocatedIn(Natural Place A, Region Z1), TransportTo(Region Z1, Facility Y);",
  "v_rule": "If Substance X is naturally found in Natural Place A, and Natural Place A is located in Region Z1, and Region Z1 can transport to Facility Y, then Substance X can access Facility Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Natural Place Y):- ActiveIn(Organization X, Event A), OccurDuring(Event A, Time Period Z2), SafeDuring(Natural Place Y, Time Period Z2);",
  "v_rule": "If Organization X is active in Event A, and Event A occurs during Time Period Z2, and Natural Place Y is safe during Time Period Z2, then Organization X can access Natural Place Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SoldIn(Furniture X, Region Y):- DistributedBy(Furniture X, Organization Z), HasBranchIn(Organization Z, Region A), LocatedIn(Region A, Region Y);",
  "v_rule": "If Furniture X is distributed by Organization Z, and Organization Z has a branch in Region A, and Region A is located in Region Y, then Furniture X is sold in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvailableIn(Substance X, Region Y):- Harvested(Substance X, Natural Place Z), LocatedIn(Natural Place Z, Region A), PartOf(Region A, Region Y);",
  "v_rule": "If Substance X is harvested from Natural Place Z, and Natural Place Z is located in Region A, and Region A is part of Region Y, then Substance X is available in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AccessibleIn(Technology X, Region Y):- SoldIn(Technology X, Facility Z), WasIn(Facility Z, Region A), Decided(Region A, Region Y);",
  "v_rule": "If Technology X is sold in Facility Z, and Facility Z is located in Region A, and Region A is decided to be Region Y, then Technology X is accessible in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LegalInRegion(Authorization X, Region Y):- GrantedBy(Authorization X, Facility A), LocatedIn(Facility A, Region Z), IsTerritory(Region Z, Region Y);",
  "v_rule": "If Authorization X is granted by Facility A, and Facility A is located in Region Z, and Region Z is a territory of Region Y, then Authorization X is legal in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "Available(Technology X, Region Y):- RequiredFor(Technology X, Job A), JobIn(Job A, Organization Z), LocatedIn(Organization Z, Region Y);",
  "v_rule": "If Technology X is required for Job A, and Job A is in Organization Z, and Organization Z is located in Region Y, then Technology X is available in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "PartOfEcosystem(Plant X, Region Y):- GrownBy(Plant X, Person A), LiveIn(Person A, Natural Place Z), ExistsIn(Natural Place Z, Region Y);",
  "v_rule": "If Plant X is grown by Person A, and Person A lives in Natural Place Z, and Natural Place Z exists in Region Y, then Plant X is part of the ecosystem in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "FoundIn(Animal X, Region Y):- MigratesTo(Animal X, Natural Place Z), SurroundedBy(Natural Place Z, Natural Place A), LocatedIn(Natural Place A, Region Y);",
  "v_rule": "If Animal X migrates to Natural Place Z, and Natural Place Z is surrounded by Natural Place A, and Natural Place A is located in Region Y, then Animal X can be found in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "Available(Technology X, Region Y):- UsedIn(Technology X, Organization Z), OperateIn(Organization Z, Facility A), SituatedIn(Facility A, Region Y);",
  "v_rule": "If Technology X is used in Organization Z, and Organization Z operates in Facility A, and Facility A is situated in Region Y, then Technology X is available in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "FamiliarWith(Natural Phenomenon X, Region Y):- SocioEconomicCondition(Region Y, Condition Z), Causes(Condition Z, Event A), Triggers(Event A, Natural Phenomenon X);",
  "v_rule": "If Region Y has a SocioEconomic Condition Z, and Condition Z causes an Event A, and Event A triggers Natural Phenomenon X, then the Region Y is familiar with Natural Phenomenon X.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPurchase(Financial Product X, Region Y):- SoldBy(Facility Z, Financial Product X), LocatedIn(Facility Z, Region A), PartOf(Region A, Region Y);",
  "v_rule": "If Financial Product X is sold by Facility Z, and Facility Z is located in Region A which is a part of Region Y, then Financial Product X can be purchased in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MustFollow(Legislation X, Region Y):- EnforcedBy(Legislation X, Facility Z), LocatedIn(Facility Z, Region A), PartOf(Region A, Region Y);",
  "v_rule": "If Legislation X is enforced by Facility Z, and Facility Z is located in Region A, and Region A is part of Region Y, then Region Y must follow Legislation X.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ValuedIn(Skill X, Region Y):- Involve(Job Z, Tool A), Operate(Skill X, Tool A), PopularIn(Job Z, Region Y);",
  "v_rule": "If Job Z involves Tool A and Skill X operates Tool A, and Job Z is popular in Region Y, then Skill X is valued in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvailableIn(Substance X, Region Y):- ExtractedIn(Substance X, Facility Z), OwnedBy(Facility Z, Organization A), Decided(Organization A, Region Y);",
  "v_rule": "If Substance X is extracted in Facility Z, and Facility Z is owned by Organization A, and Organization A has decided to operate in Region Y, then Substance X is available in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ScarceIn(Job X, Region Y):- Requires(Job X, Tool A), Operate(Tool A, Skill Z), NotPracticed(Skill Z, Region Y);",
  "v_rule": "If Job X requires Tool A and operating Tool A requires Skill Z, and Skill Z is not practiced in Region Y, then Job X is scarce in Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RegionHasResource(Region Y, Material X):- Mined(Material X, Natural Place Z), SurroundedBy(Natural Place Z, Natural Place A), LocatedIn(Natural Place A, Region Y);",
  "v_rule": "If Material X is mined from Natural Place Z, and Natural Place Z is surrounded by Natural Place A, and Natural Place A is located in Region Y, then Region Y has Material X.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanExtract(Material X, Region Y):- ExtractedBy(Material X, Person A), LocatedIn(Person A, Natural Place Z), FormedIn(Natural Place Z, Region Y);",
  "v_rule": "If Material X is extracted by Person A, and Person A is located in Natural Place Z, and Natural Place Z is formed in Region Y, then Material X can be extracted from Region Y.",
  "domain": "location",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAdopt(Person X, Animal Y):- Occupy(Person X, Space Z1), Require(Animal Y, Space Z2), SmallerThan(Space Z1, Space Z2);",
  "v_rule": "If Person X occupies Space Z1 and Animal Y requires Space Z2, and Space Z1 is smaller than Space Z2, then Person X cannot adopt Animal Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDispose(Person X, Material Y):- Train(Person X, Strength Z1), RequireStrength(Material Y, Strength Z2), SmallerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X has Strength Z1 from training and the strength required to dispose Material Y is Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X cannot dispose Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDispose(Person X, Material Y):- BornWith(Person X, Strength Z1), RequireStrength(Material Y, Strength Z2), SmallerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X is born with Strength Z1 and the disposal of Material Y requires Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X cannot dispose of Material Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAffordable(Person X, Material Y):- Have(Person X, Money Z1), Price(Material Y, Money Z2), SmallerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has Money Z1 and the price of Material Y is Money Z2, and Money Z1 is smaller than Money Z2, then Material Y is not affordable for Person X.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotUse(Person X, Furniture Y):- GrowTo(Person X, Height Z1), RequireAbove(Furniture Y, Height Z2), SmallerThan(Height Z1, Height Z2);",
  "v_rule": "If Person X has grown to Height Z1 and the Furniture Y requires a height above Z2, and Height Z1 is smaller than Height Z2, then Person X cannot use Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotUse(Person X, Furniture Y):- WeightOf(Person X, Weight Z1), DesignedForWeight(Furniture Y, Weight Z2), BiggerThan(Weight Z1, Weight Z2);",
  "v_rule": "If Person X has a weight of Weight Z1 and the Furniture Y is designed for a weight of Weight Z2, and Weight Z1 is bigger than Weight Z2, then Person X cannot use Furniture Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotCEO(Person X, Organization Y):- Have(Person X, Skill Z1), RequireMinimumSkill(Organization Y, Skill Z2), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has Skill Z1 and the minimum skill requirement for being a CEO of Organization Y is Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X is not the CEO of Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotLead(Person X, Organization Y):- Have(Person X, Skill Z1), Goal(Organization Y, Skill Z2), DifferentFrom(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has Skill Z1 and the goal of Organization Y requires Skill Z2, and Skill Z1 is different from Skill Z2, then Person X cannot lead Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDonate(Person X, Organization Y):- Age(Person X, Age Z1), SetByLaw(Organization Y, Age Z2), SmallerThan(Age Z1, Age Z2);",
  "v_rule": "If Person X is of Age Z1 and the law sets Age Z2 as the minimum age for donating to Organization Y, and Age Z1 is smaller than Age Z2, then Person X cannot donate to Organization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotHost(Person X, Event Y):- SizeOf(Person X, Space Z1), OrganizedIn(Event Y, Space Z2), SmallerThan(Space Z1, Space Z2);",
  "v_rule": "If Person X has a space of size Z1 and the event Y is organized in a space of size Z2, and the size Z1 is smaller than size Z2, then Person X cannot host Event Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAnArtist(Person X, Artwork Y):- SkillRequired(Artwork Y, Skill Z1), Have(Person X, Skill Z2), LessThan(Skill Z2, Skill Z1);",
  "v_rule": "If Artwork Y requires Skill Z1 and Person X has Skill Z2, but Skill Z2 is less than Skill Z1, then Person X is not an artist of Artwork Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPerform(Person X, Job Y):- Develop(Person X, Strength Z1), Require(Job Y, Strength Z2), SmallerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X has developed Strength Z1 and Job Y requires Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X cannot perform Job Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LacksSkills(Person X, Job Y):- BornWith(Person X, Strength Z1), Necessary(Job Y, Strength Z2), SmallerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X is born with Strength Z1 and the Strength Z2 is necessary for Job Y, but Strength Z1 is smaller than Strength Z2, then Person X lacks the skills for Job Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotQualified(Person X, Job Y):- Train(Person X, Strength Z1), Standard(Job Y, Strength Z2), SmallerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X has trained to Strength Z1 and the standard strength for Job Y is Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X is not qualified for Job Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPark(Person X, Vehicle Y):- Have(Person X, Skill Z1), Drive(Vehicle Y, Skill Z2), LessThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has Skill Z1 and driving Vehicle Y requires Skill Z2, but Skill Z1 is less than Skill Z2, then Person X cannot park Vehicle Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Tool Y):- Have(Person X, Money Z1), Bought(Tool Y, Money Z2), SmallerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has Money Z1 and the cost of Tool Y is Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Tool Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotProficient(Person X, Technology Y):- SkillLevel(Person X, Skill Z1), RequireSkill(Technology Y, Skill Z2), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has a Skill Level Z1 and Technology Y requires Skill Z2, and Skill Z1 is smaller than Skill Z2, then Person X is not proficient in Technology Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotOperate(Person X, Electronic Device Y):- Age(Person X, Age Z1), SafetyStandard(Electronic Device Y, Age Z2), BiggerThan(Age Z2, Age Z1);",
  "v_rule": "If Person X is of Age Z1 and the safety standard for operating Electronic Device Y is Age Z2, and Age Z2 is bigger than Age Z1, then Person X cannot operate Electronic Device Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotUse(Person X, Platform Y):- SkillLevel(Person X, Skill Z1), NeedForOperation(Platform Y, Skill Z2), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has a Skill Level Z1 and the operation of Platform Y needs Skill Level Z2, and Skill Level Z1 is smaller than Skill Level Z2, then Person X cannot use Platform Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotSubscribeTo(Person X, Platform Y):- Age(Person X, Age Z1), Policy(Platform Y, Age Z2), SmallerThan(Age Z1, Age Z2);",
  "v_rule": "If Person X is of Age Z1 and the policy of Platform Y requires a minimum Age Z2, and Age Z1 is smaller than Age Z2, then Person X cannot subscribe to Platform Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LacksAccess(Person X, Platform Y):- Age(Person X, Age Z1), LegalRequirement(Platform Y, Age Z2), SmallerThan(Age Z1, Age Z2);",
  "v_rule": "If Person X is of Age Z1 and the legal requirement for accessing Platform Y is Age Z2, and Age Z1 is smaller than Age Z2, then Person X lacks access to Platform Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotUse(Person X, Authorization Y):- JobTitle(Person X, Job Z1), IndustryStandard(Job Z2, Authorization Y), Different(Job Z1, Job Z2);",
  "v_rule": "If Person X has Job Title Z1 and the industry standard for Authorization Y is Job Z2, but Job Z1 is different from Job Z2, then Person X cannot use Authorization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LacksAccess(Person X, Authorization Y):- HiredFor(Person X, Job Z1), CompanyPolicy(Job Z2, Authorization Y), Different(Job Z1, Job Z2);",
  "v_rule": "If Person X is hired for Job Z1 and the company policy requires Job Z2 for Authorization Y, and Job Z1 is different from Job Z2, then Person X lacks access to Authorization Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPublish(Person X, Publication Y):- Practice(Person X, Skill Z1), RequireSkillLevel(Publication Y, Skill Z2), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X practices Skill Z1 and the skill level required for publishing Publication Y is Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X cannot publish Publication Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotVisit(Person X, Facility Y):- Have(Person X, Age Z1), MinimumAge(Facility Y, Age Z2), SmallerThan(Age Z1, Age Z2);",
  "v_rule": "If Person X has Age Z1 and the minimum age for visiting Facility Y is Age Z2, and Age Z1 is smaller than Age Z2, then Person X cannot visit Facility Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LacksSkill(Person X, Facility Y):- StrengthRequired(Facility Y, Strength Z1), Have(Person X, Strength Z2), SmallerThan(Strength Z2, Strength Z1);",
  "v_rule": "If Facility Y requires Strength Z1 and Person X has Strength Z2, and Strength Z2 is smaller than Strength Z1, then Person X lacks the skill for Facility Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Alcohol Y):- AgeOf(Person X, Age Z1), HealthGuideline(Alcohol Y, Age Z2), SmallerThan(Age Z1, Age Z2);",
  "v_rule": "If Person X is of Age Z1 and the health guideline for Alcohol Y is Age Z2, and Age Z1 is smaller than Age Z2, then Person X cannot buy Alcohol Y.",
  "domain": "affordance",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotRecycle(Person X, Material Y):- Lack(Person X, Skill Z2), Construct(Tool A, Material Y), Operate(Tool A, Skill Z2);",
  "v_rule": "If Person X lacks Skill Z2 and Tool A, which is constructed from Material Y, requires Skill Z2 to operate, then Person X cannot recycle Material Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotEat(Person X, Food Y):- Inherit(Person X, Disease Z2), Contains(Food Y, Substance A), Cause(Disease Z2, Substance A);",
  "v_rule": "If Person X has inherited Disease Z2 and Food Y contains Substance A, and Substance A causes Disease Z2, then Person X cannot eat Food Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotResearch(Person X, Drug Y):- Lost(Person X, Tool Z2), AdministeredWith(Drug Y, Skill A), Involve(Skill A, Tool Z2);",
  "v_rule": "If Person X has lost Tool Z2 and Drug Y is administered with Skill A, which involves Tool Z2, then Person X cannot research Drug Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotRecycle(Person X, Material Y):- Lack(Person X, Skill Z2), NeededFor(Material Y, Tool A), ToolFor(Tool A, Skill Z2);",
  "v_rule": "If Person X lacks Skill Z2 and Tool A is needed for recycling Material Y, and Tool A is associated with Skill Z2, then Person X cannot recycle Material Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvoidsFood(Person X, Plant Y):- AllergicTo(Person X, Substance A), Contain(Food Z2, Substance A), IsType(Plant Y, Food Z2);",
  "v_rule": "If Person X is allergic to Substance A and Food Z2 contains Substance A, and Plant Y is a type of Food Z2, then Person X avoids food from Plant Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Financial Product Y):- YoungerThan(Person X, Age Z1), RequiredAge(Financial Product Y, Age Z2), GreaterThan(Age Z2, Age Z1);",
  "v_rule": "If Person X is younger than Age Z1 and the required age for accessing Financial Product Y is Age Z2, and Age Z2 is greater than Age Z1, then Person X cannot access Financial Product Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Skill Y):- MoveTo(Person X, Time Period Z1), DevelopedIn(Skill Y, Time Period Z2), LaterThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Person X moved to Time Period Z1 and Skill Y was developed in Time Period Z2, and Time Period Z2 is later than Time Period Z1, then Person X cannot access Skill Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Legislation Y):- BelowLegalAge(Person X, Age Z1), RequiredAge(Legislation Y, Age Z2), LessThan(Age Z1, Age Z2);",
  "v_rule": "If Person X is below the legal age of Age Z1 and the required age for accessing Legislation Y is Age Z2, and Age Z1 is less than Age Z2, then Person X cannot access Legislation Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Natural Phenomenon Y):- WorkIn(Person X, Region Z1), OccurIn(Natural Phenomenon Y, Region Z2), Different(Region Z1, Region Z2);",
  "v_rule": "If Person X works in Region Z1 and Natural Phenomenon Y occurs in Region Z2, and Region Z1 is different from Region Z2, then Person X cannot access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Artwork Y):- LocatedIn(Artwork Y, Facility Z), ClosedDuring(Facility Z, Time Period Z1), Study(Person X, Time Period Z1);",
  "v_rule": "If Artwork Y is located in Facility Z and Facility Z is closed during Time Period Z1, and Person X studies during Time Period Z1, then Person X cannot access Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotAccess(Person X, Game Y):- BelowLegalAge(Person X, Age Z1), AgeRestricted(Game Y, Age Z2), GreaterThan(Age Z2, Age Z1);",
  "v_rule": "If Person X is below the legal age of Age Z1 and the game Y has an age restriction of Age Z2, and Age Z2 is greater than Age Z1, then Person X cannot access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Game Y):- UnderAge(Person X, Age Z1), MatureContent(Game Y, Age Z2), GreaterThan(Age Z2, Age Z1);",
  "v_rule": "If Person X is under the age of Z1 and Game Y has mature content for ages Z2 and above, and Age Z2 is greater than Age Z1, then Person X cannot access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Animal Y):- MigratedTo(Animal X, Region Z1), LiveIn(Animal Y, Region Z2), Different(Region Z1, Region Z2);",
  "v_rule": "If Animal X has migrated to Region Z1 and Animal Y lives in Region Z2, and Region Z1 is different from Region Z2, then Animal X cannot access Animal Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Natural Phenomenon Y):- AdaptedTo(Animal X, Region Z1), OccurIn(Natural Phenomenon Y, Region Z2), DifferentRegion(Region Z1, Region Z2);",
  "v_rule": "If Animal X is adapted to Region Z1 and Natural Phenomenon Y occurs in Region Z2, and Region Z1 and Region Z2 are different, then Animal X cannot access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Game Y):- NaturalHabitat(Animal X, Region Z1), ReleasedIn(Game Y, Region Z2), Different(Region Z1, Region Z2);",
  "v_rule": "If Animal X's natural habitat is Region Z1 and Game Y is released in Region Z2, and Region Z1 is different from Region Z2, then Animal X cannot access Game Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Event Y):- OperateIn(Organization X, Time Period Z1), ExistIn(Event Y, Time Period Z2), EarlierThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Organization X operates in Time Period Z1 and Event Y exists in Time Period Z2, and Time Period Z1 is earlier than Time Period Z2, then Organization X cannot access Event Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotViewing(Animal X, Show Y):- BornIn(Animal X, Region Z1), RestrictedTo(Show Y, Region Z2), Different(Region Z1, Region Z2);",
  "v_rule": "If Animal X was born in Region Z1 and Show Y is restricted to Region Z2, and Region Z1 is different from Region Z2, then Animal X is not viewing Show Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Show Y):- SleepDuring(Animal X, Time Period Z1), AirsDuring(Show Y, Time Period Z2), Same(Time Period Z1, Time Period Z2);",
  "v_rule": "If Animal X sleeps during Time Period Z1 and Show Y airs during Time Period Z2, and Time Period Z1 is the same as Time Period Z2, then Animal X cannot access Show Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Technology X, Facility Y):- AdaptedFor(Technology X, Condition Z1), Provide(Facility Y, Condition Z2), Different(Condition Z1, Condition Z2);",
  "v_rule": "If Technology X is adapted for Condition Z1 and Facility Y provides Condition Z2, but Condition Z1 is different from Condition Z2, then Technology X cannot access Facility Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Vehicle X, Animal Y):- OperateIn(Vehicle X, Region Z1), AdaptedTo(Animal Y, Region Z2), Different(Region Z1, Region Z2);",
  "v_rule": "If Vehicle X operates in Region Z1 and Animal Y is adapted to Region Z2, and Region Z1 is different from Region Z2, then Animal Y cannot access Vehicle X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Vehicle X, Animal Y):- UsedIn(Vehicle X, Time Period Z1), ExistIn(Animal Y, Time Period Z2), LaterThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Vehicle X is used in Time Period Z1 and Animal Y exists in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Animal Y cannot access Vehicle X.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Vehicle X, Platform Y):- Overloaded(Vehicle X, Weight Z1), WeightLimit(Platform Y, Weight Z2), GreaterThan(Weight Z1, Weight Z2);",
  "v_rule": "If Vehicle X is overloaded with Weight Z1 and the weight limit for Platform Y is Weight Z2, and Weight Z1 is greater than Weight Z2, then Vehicle X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Natural Phenomenon X, Food Y):- Predicted(Natural Phenomenon X, Time Period Z1), HarvestedDuring(Food Y, Time Period Z2), LaterThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Natural Phenomenon X is predicted for Time Period Z1 and Food Y is harvested during Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Natural Phenomenon X cannot access Food Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotAccess(Game X, Show Y):- SetIn(Game X, Time Period Z1), ScheduledAt(Show Y, Time Period Z2), EarlierThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Game X is set in Time Period Z1 and Show Y is scheduled at Time Period Z2, and Time Period Z1 is earlier than Time Period Z2, then Game X cannot access Show Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Tool X, Alcohol Y):- DesignedFor(Tool X, Temperature Z1), DamagedAt(Alcohol Y, Temperature Z2), HigherThan(Temperature Z1, Temperature Z2);",
  "v_rule": "If Tool X is designed for Temperature Z1 and Alcohol Y is damaged at Temperature Z2, and Temperature Z1 is higher than Temperature Z2, then Tool X cannot access Alcohol Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Substance X, Plant Y):- ProducedIn(Substance X, Time Period Z1), BloomsIn(Plant Y, Time Period Z2), LaterThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Substance X is produced in Time Period Z1 and Plant Y blooms in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Substance X cannot access Plant Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotInShow(Substance X, Show Y):- ExistIn(Substance X, Time Period Z1), ProducedAt(Show Y, Time Period Z2), LaterThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Substance X exists in Time Period Z1 and Show Y is produced at Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Substance X is not in Show Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Natural Phenomenon X, Artwork Y):- HappenDuring(Natural Phenomenon X, Time Period Z1), Made(Artwork Y, Time Period Z2), EarlierThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Natural Phenomenon X happens during Time Period Z1 and Artwork Y was made during Time Period Z2, and Time Period Z1 is earlier than Time Period Z2, then Natural Phenomenon X cannot access Artwork Y.",
  "domain": "accessibility",
  "depth": 0,
  "length": 3,
  "positive": false,
  "structure": "disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotAccess(Drug X, Platform Y):- Distribute(Drug X, Technology Z), DevelopedIn(Platform Y, Time Period A), NotExist(Technology Z, Time Period A);",
  "v_rule": "If Drug X is distributed through Technology Z and Platform Y was developed in Time Period A, and Technology Z did not exist in Time Period A, then Drug X cannot be accessed on Platform Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Job Y):- Have(Person X, Condition Z), Requires(Job Y, Skill A), Lacks(Condition Z, Skill A);",
  "v_rule": "If Person X has Condition Z and Job Y requires Skill A, but Condition Z lacks Skill A, then Person X cannot access Job Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Electronic Device X, Platform Y):- OperateWith(Electronic Device X, Technology Z), DevelopedIn(Platform Y, Time Period A), NotExist(Technology Z, Time Period A);",
  "v_rule": "If Electronic Device X operates with Technology Z and Platform Y was developed in Time Period A, and Technology Z did not exist in Time Period A, then Electronic Device X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotCompatible(Material X, Platform Y):- Requires(Material X, Condition Z), Needs(Condition Z, Technology A), NotIncorporate(Platform Y, Technology A);",
  "v_rule": "If Material X requires Condition Z and Condition Z needs Technology A, but Platform Y does not incorporate Technology A, then Material X is not compatible with Platform Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Facility X, Artwork Y):- Require(Artwork Y, Condition Z), MadeOf(Facility X, Material A), VulnerableTo(Material A, Condition Z);",
  "v_rule": "If Artwork Y requires Condition Z and Facility X is made of Material A, which is vulnerable to Condition Z, then Facility X cannot access Artwork Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "IncompatibleWith(Technology X, Material Y):- MadeFrom(Technology X, Material A), Require(Material A, Condition Z), Lack(Material Y, Condition Z);",
  "v_rule": "If Technology X is made from Material A, and Material A requires Condition Z, but Material Y lacks Condition Z, then Technology X is incompatible with Material Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotLocal(Drug X, Natural Place Y):- Requires(Drug X, Condition Z2), LocatedIn(Natural Place Y, Region A), NotPresent(Condition Z2, Region A);",
  "v_rule": "If Drug X requires Condition Z2 and Natural Place Y is located in Region A, and Condition Z2 is not present in Region A, then Drug X is not local to Natural Place Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Tool X, Natural Phenomenon Y):- OperatedBy(Tool X, Person A), WorkIn(Person A, Condition Z2), AbsentIn(Natural Phenomenon Y, Condition Z2);",
  "v_rule": "If Tool X is operated by Person A, and Person A works in Condition Z2, and Condition Z2 is absent in Natural Phenomenon Y, then Tool X cannot access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasRestriction(Person X, Platform Y):- WorksIn(Person X, Region Z1), Violates(Platform Y, Legislation A), EnforcedIn(Legislation A, Region Z1);",
  "v_rule": "If Person X works in Region Z1 and Platform Y violates Legislation A, which is enforced in Region Z1, then Person X has a restriction on Platform Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "Incompatible(Electronic Device X, Game Y):- DesignedFor(Game Y, Platform Z), ManufacturedBy(Electronic Device X, Organization A), NotSupport(Organization A, Platform Z);",
  "v_rule": "If Game Y is designed for Platform Z and Electronic Device X is manufactured by Organization A, and Organization A does not support Platform Z, then Electronic Device X is incompatible with Game Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotAccess(Animal X, Publication Y):- ExistedIn(Animal X, Time Period Z2), PrintedIn(Publication Y, Time Period A), LaterThan(Time Period A, Time Period Z2);",
  "v_rule": "If Animal X existed in Time Period Z2 and Publication Y was printed in Time Period A, and Time Period A is later than Time Period Z2, then Animal X cannot access Publication Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SafeFrom(Material X, Natural Phenomenon Y):- ExistIn(Material X, Region Z1), Prevent(Region Z1, Condition A), Need(Natural Phenomenon Y, Condition A);",
  "v_rule": "If Material X exists in Region Z1 and Region Z1 prevents Condition A, and Natural Phenomenon Y needs Condition A to occur, then Material X is safe from Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotUsedForPreparation(Tool X, Food Y):- Requires(Tool X, Condition Z1), StoredIn(Food Y, Region A), AbsentIn(Region A, Condition Z1);",
  "v_rule": "If Tool X requires Condition Z1 and Food Y is stored in Region A, and Condition Z1 is absent in Region A, then Tool X is not used for the preparation of Food Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotInCollection(Facility X, Artwork Y):- Require(Artwork Y, Condition Z), LocatedIn(Facility X, Region A), NotAvailableIn(Condition Z, Region A);",
  "v_rule": "If Artwork Y requires Condition Z and Facility X is located in Region A, and Condition Z is not available in Region A, then Artwork Y is not in the collection of Facility X.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotSuitableFor(Game X, Disease Y):- Requires(Game X, Skill Z), Causes(Disease Y, Condition A), Hinders(Condition A, Skill Z);",
  "v_rule": "If Game X requires Skill Z and Disease Y causes Condition A which hinders Skill Z, then Game X is not suitable for someone with Disease Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotQualifiedFor(Event X, Job Y):- Require(Event X, Tool A), Operate(Skill Z1, Tool A), Lacks(Job Y, Skill Z1);",
  "v_rule": "If Event X requires Tool A and Skill Z1 is needed to operate Tool A, but Job Y lacks Skill Z1, then Job Y is not qualified for Event X.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotQualifiedFor(Event X, Job Y):- Necessary(Event X, Skill Z1), PerformedBy(Job Y, Person A), NotPossess(Person A, Skill Z1);",
  "v_rule": "If Event X requires Skill Z1 and Job Y is performed by Person A, but Person A does not possess Skill Z1, then Person A is not qualified for Event X.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Material X, Disease Y):- CultivatedIn(Material X, Facility A), LocatedIn(Facility A, Region Z1), AbsentIn(Disease Y, Region Z1);",
  "v_rule": "If Material X is cultivated in Facility A, and Facility A is located in Region Z1, and Disease Y is absent in Region Z1, then Disease Y cannot access Material X.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Platform X, Game Y):- Operate(Platform X, Technology Z2), DevelopedIn(Game Y, Time Period A), NotInvented(Technology Z2, Time Period A);",
  "v_rule": "If Platform X operates on Technology Z2 and Game Y was developed in Time Period A, but Technology Z2 was not invented in Time Period A, then Platform X cannot access Game Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotSuitableFor(Animal X, Job Y):- Require(Job Y, Skill Z), NotInCondition(Animal X, Condition A), Require(Skill Z, Condition A);",
  "v_rule": "If Job Y requires Skill Z and Animal X is not in Condition A, and Skill Z requires Condition A, then Animal X is not suitable for Job Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Natural Place Y):- ConductEvent(Organization X, Event A), HappenIn(Event A, Time Period Z2), UnavailableDuring(Natural Place Y, Time Period Z2);",
  "v_rule": "If Organization X conducts Event A that happens during Time Period Z2 and Natural Place Y is unavailable during Time Period Z2, then Organization X cannot access Natural Place Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Authorization Y):- WorksIn(Person X, Organization A), LocatedIn(Organization A, Region Z1), Requires(Region Z1, Authorization Y);",
  "v_rule": "If Person X works in Organization A, and Organization A is located in Region Z1, and Region Z1 requires Authorization Y, then Person X needs to use Authorization Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MustComplyWithRules(Person X, Authorization Y):- WantsToAccess(Person X, Facility Z), OwnedBy(Facility Z, Organization A), Requires(Organization A, Authorization Y);",
  "v_rule": "If Person X wants to access Facility Z, and Facility Z is owned by Organization A, and Organization A requires Authorization Y, then Person X must comply with the rules of Authorization Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AppliesFor(Person X, Authorization Y):- WorksIn(Person X, Job Z), Involves(Job Z, Event A), RegulatedBy(Event A, Authorization Y);",
  "v_rule": "If Person X works in Job Z and Job Z involves Event A which is regulated by Authorization Y, then Person X applies for Authorization Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToObtain(Person X, Authorization Y):- WorksIn(Person X, Job Z), Uses(Job Z, Tool A), Requires(Tool A, Authorization Y);",
  "v_rule": "If Person X works in Job Z and Job Z uses Tool A, and Tool A requires Authorization Y, then Person X needs to obtain Authorization Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SubjectToLaw(Person X, Legislation Y):- LiveIn(Person X, Region Z), PassedIn(Legislation Y, Facility A), Govern(Region Z, Facility A);",
  "v_rule": "If Person X lives in Region Z and Legislation Y was passed in Facility A, and Facility A governs Region Z, then Person X is subject to Legislation Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToComplyWith(Person X, Legislation Y):- IsCitizen(Person X, Region Z), ApplyTo(Legislation Y, Event A), CommonIn(Event A, Region Z);",
  "v_rule": "If Person X is a citizen of Region Z, and Legislation Y applies to Event A, which is common in Region Z, then Person X needs to comply with Legislation Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Technology Y):- HasJob(Person X, Job Z), Requires(Job Z, Skill A), BasedOn(Skill A, Technology Y);",
  "v_rule": "If Person X has Job Z and Job Z requires Skill A, and Skill A is based on Technology Y, then Person X needs to use Technology Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Authorization Y):- Visits(Person X, Region Z1), HasLegislation(Region Z1, Legislation A), Mandates(Legislation A, Authorization Y);",
  "v_rule": "If Person X visits Region Z1 and Region Z1 has Legislation A that mandates Authorization Y, then Person X needs to use Authorization Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasObligation(Person X, Authorization Y):- Protected(Region Z1, Authorization Y), EmployedBy(Person X, Organization A), LocatedIn(Organization A, Region Z1);",
  "v_rule": "If Person X is employed by Organization A, which is located in Region Z1, and Region Z1 is protected by Authorization Y, then Person X has an obligation to obtain Authorization Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AppliesFor(Person X, Authorization Y):- Hired(Person X, Job Z), Require(Job Z, Skill A), Regulate(Skill A, Authorization Y);",
  "v_rule": "If Person X is hired for Job Z and Job Z requires Skill A, and Skill A is regulated by Authorization Y, then Person X applies for Authorization Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SubjectToLaw(Person X, Legislation Y):- MoveTo(Person X, Region Z), PassedIn(Legislation Y, Facility A), Govern(Region Z, Facility A);",
  "v_rule": "If Person X moves to Region Z and Legislation Y has been passed in Facility A, and Region Z is governed by Facility A, then Person X is subject to Legislation Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Tool Y):- PromotedTo(Person X, Job Z1), NeededFor(Tool Y, Skill A), RequiredFor(Skill A, Job Z1);",
  "v_rule": "If Person X has been promoted to Job Z1 and Tool Y is needed for Skill A, and Skill A is required for Job Z1, then Person X needs to use Tool Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToObey(Person X, Legislation Y):- MoveTo(Person X, Region Z), EnforcedBy(Legislation Y, Organization A), OperateIn(Organization A, Region Z);",
  "v_rule": "If Person X moves to Region Z and Legislation Y is enforced by Organization A which operates in Region Z, then Person X needs to obey Legislation Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToObtain(Person X, Authorization Y):- WorksAt(Person X, Facility Z), Handles(Facility Z, Material A), Regulates(Authorization Y, Material A);",
  "v_rule": "If Person X works at Facility Z and Facility Z handles Material A, and Authorization Y regulates Material A, then Person X needs to obtain Authorization Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Material Y):- Has(Person X, Job Z), WorkIn(Job Z, Condition A), NecessaryIn(Material Y, Condition A);",
  "v_rule": "If Person X has Job Z and Job Z involves working in Condition A, and Material Y is necessary for Condition A, then Person X needs to use Material Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToObtain(Person X, Authorization Y):- InterestedIn(Person X, Event A), HostedAt(Event A, Facility Z), Requires(Facility Z, Authorization Y);",
  "v_rule": "If Person X is interested in Event A, and Event A is hosted at Facility Z, and Facility Z requires Authorization Y, then Person X needs to obtain Authorization Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPrevent(Person X, Disease Y):- HasCondition(Person X, Condition A), AssociatedWith(Disease Z1, Condition A), CanLeadTo(Disease Z1, Disease Y);",
  "v_rule": "If Person X has Condition A and Disease Z1 is associated with Condition A, and Disease Z1 can lead to Disease Y, then Person X needs to prevent Disease Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Platform Y):- Has(Person X, Job Z), Needs(Job Z, Tool A), SuppliedBy(Tool A, Platform Y);",
  "v_rule": "If Person X has Job Z and Job Z needs Tool A, and Tool A is supplied by Platform Y, then Person X needs to use Platform Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ResponsibleFor(Person X, Authorization Y):- WantsToEnter(Person X, Region Z), HasLegislation(Region Z, Legislation A), Mandates(Legislation A, Authorization Y);",
  "v_rule": "If Person X wants to enter Region Z, and Region Z has Legislation A that mandates Authorization Y, then Person X is responsible for obtaining Authorization Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToComplyWith(Person X, Legislation Y):- Naturalized(Person X, Region Z), PassedIn(Legislation Y, Facility A), LocatedIn(Facility A, Region Z);",
  "v_rule": "If Person X is naturalized in Region Z and Legislation Y, which was passed in Facility A, is located in Region Z, then Person X needs to comply with Legislation Y.",
  "domain": "need",
  "depth": 1,
  "length": 3,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDisinfectedWith(Furniture X, Alcohol Y):- MaterialOf(Furniture X, Material Z1), MadeOf(Material Z1, Substance A), DissolveIn(Substance A, Alcohol Y);",
  "v_rule": "If Furniture X is made of Material Z1 and Material Z1 is made of Substance A, and Substance A dissolves in Alcohol Y, then Furniture X cannot be disinfected with Alcohol Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBePaintedWith(Furniture X, Substance Y):- MadeOf(Furniture X, Material A), MaterialCondition(Material A, Condition Z2), SubstanceIneffective(Condition Z2, Substance Y);",
  "v_rule": "If Furniture X is made of Material A and Material A has Condition Z2, and Substance Y is ineffective on Condition Z2, then Furniture X cannot be painted with Substance Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBePaintedWith(Furniture X, Substance Y):- StoredIn(Furniture X, Region A), RegionCondition(Region A, Condition Z2), SubstanceIneffective(Condition Z2, Substance Y);",
  "v_rule": "If Furniture X is stored in Region A and the condition of Region A makes Substance Y ineffective, then Furniture X cannot be painted with Substance Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrevent(Substance X, Disease Y):- Contains(Substance X, Food Z1), Contains(Food Z1, Substance A), Harmful(Substance A, Disease Y);",
  "v_rule": "If Substance X contains Food Z1, and Food Z1 contains Substance A, and Substance A is harmful for Disease Y, then Substance X cannot prevent Disease Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotBeDamagedBy(Tool X, Natural Phenomenon Y):- BelongsTo(Tool X, Person A), LivesIn(Person A, Region Z2), ProtectedFrom(Region Z2, Natural Phenomenon Y);",
  "v_rule": "If Tool X belongs to Person A, and Person A lives in Region Z2, and Region Z2 is protected from Natural Phenomenon Y, then Tool X cannot be damaged by Natural Phenomenon Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrevent(Disease X, Food Y):- Contains(Food Y, Substance A), Triggers(Substance A, Condition Z1), LeadsTo(Condition Z1, Disease X);",
  "v_rule": "If Food Y contains Substance A, and Substance A triggers Condition Z1, and Condition Z1 leads to Disease X, then Food Y cannot prevent Disease X.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDamagedBy(Electronic Device X, Substance Y):- MadeFrom(Electronic Device X, Material A), ComposedOf(Material A, Material Z1), ResistantTo(Material Z1, Substance Y);",
  "v_rule": "If Electronic Device X is made from Material A, and Material A is composed of Material Z1, and Material Z1 is resistant to Substance Y, then Electronic Device X cannot be damaged by Substance Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotContain(Natural Place X, Substance Y):- Contains(Natural Place X, Substance A), ComposedOf(Substance A, Substance Z1), Incompatible(Substance Z1, Substance Y);",
  "v_rule": "If Natural Place X contains Substance A, and Substance A is composed of Substance Z1, and Substance Z1 is incompatible with Substance Y, then Natural Place X cannot contain Substance Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotProduce(Organization X, Alcohol Y):- LocatedIn(Organization X, Region Z2), GovernedBy(Region Z2, Facility A), Prohibit(Facility A, Alcohol Y);",
  "v_rule": "If Organization X is located in Region Z2, which is governed by Facility A, and Facility A prohibits the production of Alcohol Y, then Organization X cannot produce Alcohol Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrevent(Natural Phenomenon X, Disease Y):- Triggers(Natural Phenomenon X, Event A), LeadsTo(Event A, Condition Z1), LeadsTo(Condition Z1, Disease Y);",
  "v_rule": "If Natural Phenomenon X triggers Event A, and Event A leads to Condition Z1, and Condition Z1 leads to Disease Y, then Natural Phenomenon X cannot prevent Disease Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDissolve(Alcohol X, Artwork Y):- MadeOf(Artwork Y, Material Z1), MadeOf(Material Z1, Substance A), NonReactive(Substance A, Alcohol X);",
  "v_rule": "If Artwork Y is made of Material Z1 and Material Z1 is made of Substance A, and Substance A is non-reactive with Alcohol X, then Alcohol X cannot dissolve Artwork Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrevent(Alcohol X, Disease Y):- Contains(Alcohol X, Substance A), Causes(Substance A, Condition Z2), LeadsTo(Condition Z2, Disease Y);",
  "v_rule": "If Alcohol X contains Substance A, and Substance A causes Condition Z2, and Condition Z2 leads to Disease Y, then Alcohol X cannot prevent Disease Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeServedIn(Alcohol X, Facility Y):- FacilityType(Facility Y, Facility Z1), LocatedIn(Facility Z1, Region A), AlcoholProhibited(Region A, Alcohol X);",
  "v_rule": "If Facility Y is of type Facility Z1 and Facility Z1 is located in Region A, and Alcohol X is prohibited in Region A, then Alcohol X cannot be served in Facility Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDistributedBy(Drug X, Organization Y):- ProducedIn(Drug X, Facility A), OwnedBy(Facility A, Organization Z1), BannedBy(Organization Z1, Organization Y);",
  "v_rule": "If Drug X is produced in Facility A, Facility A is owned by Organization Z1, and Organization Z1 has banned Organization Y, then Drug X cannot be distributed by Organization Y.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeServedAt(Facility X, Alcohol Y):- FacilityRegion(Facility X, Region Z2), GovernedBy(Region Z2, Facility A), Prohibit(Facility A, Alcohol Y);",
  "v_rule": "If Facility X is in Region Z2, and Region Z2 is governed by Facility A, and Facility A prohibits Alcohol Y, then Alcohol Y cannot be served at Facility X.",
  "domain": "interaction",
  "depth": 1,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBePackagedIn(Drug X, Material Y):- MadeFrom(Drug X, Material C), ComposedOf(Material C, Substance A), ReactsWith(Substance A, Material Y);",
  "v_rule": "If Drug X is made from Material C, and Material C is composed of Substance A, and Substance A reacts with Material Y, then Drug X cannot be packaged in Material Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 3,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanOrder(Person X, Food Y):- Job(Person X, Job A), Pay(Job A, Money Z1), Cost(Food Y, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has Job A that pays Money Z1 and the cost of Food Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X can order Food Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Tool Y):- Earn(Person X, Money Z1), ManufacturedBy(Tool Y, Organization A), SetPrice(Organization A, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X earns Money Z1 and Tool Y is manufactured by Organization A, which has set the price for the tool at Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Tool Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Game Y):- Win(Person X, Money Z1), DevelopedBy(Game Y, Organization A), SetPrice(Organization A, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has won Money Z1 and Game Y is developed by Organization A, and Organization A has set the price of the game as Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Game Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Electronic Device Y):- WorkAt(Person X, Job A), Pay(Job A, Money Z1), RetailPrice(Electronic Device Y, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X works at Job A which pays Money Z1, and the retail price of Electronic Device Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Electronic Device Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasCapital(Person X, Financial Product Y):- Job(Person X, Job A), Pay(Job A, Money Z1), RequireMinimumInvestment(Financial Product Y, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has a job A that pays Money Z1 and the minimum investment required for Financial Product Y is Money Z2, and Money Z1 is bigger than Money Z2, then Person X has the capital for Financial Product Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMaintainPlant(Person X, Plant Y):- JobRequires(Person X, Job A), JobInvolves(Job A, Technology C), TechnologyRequiresSkill(Technology C, Skill Z2), NeededFor(Skill Z2, Plant Y);",
  "v_rule": "If Person X has a job A that requires Technology C, and Technology C requires Skill Z2, and Skill Z2 is needed for maintaining Plant Y, then Person X can maintain Plant Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDiscuss(Person X, Publication Y):- JobRequires(Person X, Job A), JobRequires(Job A, Tool C), ToolOperatedBy(Tool C, Skill Z1), RequiredForReading(Skill Z1, Publication Y);",
  "v_rule": "If Person X has a job A that requires Tool C, and Tool C is operated by Skill Z1, and Skill Z1 is required for reading Publication Y, then Person X can discuss Publication Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanWorkFor(Person X, Organization Y):- WorkIn(Person X, Job A), Require(Job A, Skill Z1), RequireFor(Job C, Skill Z1), Offer(Organization Y, Job C);",
  "v_rule": "If Person X works in Job A which requires Skill Z1, and Job C also requires Skill Z1, and Organization Y offers Job C, then Person X can work for Organization Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Person X, Authorization Y):- Job(Person X, Job A), UsedIn(Skill Z, Tool C), UtilizedIn(Tool C, Job A), RequiredForAuthorization(Skill Z, Authorization Y);",
  "v_rule": "If Person X has Job A and Skill Z is used in Tool C, and Tool C is utilized in Job A, and Skill Z is required for Authorization Y, then Person X can use Authorization Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMaintainPlant(Person X, Plant Y):- WorkIn(Person X, Job C), RequiredIn(Skill Z2, Job C), SensitiveTo(Plant Y, Condition A), Manage(Skill Z2, Condition A);",
  "v_rule": "If Person X works in Job C and Skill Z2 is required in Job C, and Plant Y is sensitive to Condition A which can be managed by Skill Z2, then Person X can maintain Plant Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasSkills(Person X, Platform Y):- JobRequires(Person X, Job A), JobDealsWith(Job A, Material C), MaterialHandling(Material C, Skill Z1), DevelopedFor(Skill Z1, Platform Y);",
  "v_rule": "If Person X has a job A that requires dealing with Material C, and handling Material C requires Skill Z1, and Skill Z1 is developed for Platform Y, then Person X has skills for Platform Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMaintainPlant(Person X, Plant Y):- JobRequires(Person X, Job C), JobRequires(Job C, Skill Z2), SensitiveTo(Plant Y, Condition A), Manage(Skill Z2, Condition A);",
  "v_rule": "If Person X has a job C that requires Skill Z2, and Job C requires managing Condition A which Plant Y is sensitive to, then Person X can maintain Plant Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCook(Person X, Food Y):- JobRequires(Person X, Job A), JobDealsWith(Job A, Material C), MaterialHandling(Material C, Skill Z), RequiredFor(Skill Z, Food Y);",
  "v_rule": "If Person X has a job A that requires dealing with Material C, and Person X has Skill Z for handling Material C, and Skill Z is required for cooking Food Y, then Person X can cook Food Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBeExposedTo(Person X, Substance Y):- Contract(Person X, Condition Z1), Neutralize(Substance Y, Substance A), Contain(Substance A, Food C), Trigger(Food C, Condition Z1);",
  "v_rule": "If Person X has Condition Z1 and Substance Y neutralizes Substance A, and Food C contains Substance A and triggers Condition Z1, then Person X can be exposed to Substance Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMaintain(Person X, Tool Y):- JobRequires(Person X, Job A), JobRequires(Job A, Tool C), SkillToUse(Skill Z1, Tool C), RequiredForRepair(Skill Z1, Tool Y);",
  "v_rule": "If Person X has a job A that requires Tool C, and Skill Z1 is needed to use Tool C, and Skill Z1 is also required for the maintenance of Tool Y, then Person X can maintain Tool Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDisplay(Person X, Artwork Y):- Inherit(Person X, Space Z1), ConditionOf(Space Z1, Condition A), MadeOf(Artwork Y, Material C), Need(Material C, Condition A);",
  "v_rule": "If Person X inherits Space Z1 and the condition of Space Z1 is Condition A, and Artwork Y is made of Material C which needs Condition A, then Person X can display Artwork Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Event X, Technology Y):- OrganizedBy(Event X, Organization A), OperateIn(Organization A, Time Period Z1), OriginatedDuring(Technology Y, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Event X is organized by Organization A, and Organization A operates in Time Period Z1, and Technology Y originated during Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Event X can access Technology Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Alcohol Y):- OperateIn(Organization X, Time Period Z1), BrewedBy(Alcohol Y, Person A), LivedIn(Person A, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Organization X operates in Time Period Z1 and Alcohol Y is brewed by Person A, who lived in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can access Alcohol Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanAccess(Organization X, Technology Y):- ConductActivity(Organization X, Event A), HappenIn(Event A, Time Period Z1), InventedIn(Technology Y, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Organization X conducts an activity during Time Period Z1 and Technology Y was invented during Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can access Technology Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Financial Product Y):- OwnedBy(Facility X, Organization A), ActiveIn(Organization A, Time Period Z1), OfferDuring(Financial Product Y, Time Period Z2), StartBeforeEnd(Time Period Z1, Time Period Z2);",
  "v_rule": "If Facility X is owned by Organization A, and Organization A is active during Time Period Z1, and Financial Product Y is offered during Time Period Z2, and Time Period Z1 starts before the end of Time Period Z2, then Facility X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Event X, Technology Y):- InvolveIn(Person A, Event X), LiveIn(Person A, Time Period Z1), DevelopedDuring(Technology Y, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Person A is involved in Event X and lives in Time Period Z1, and Technology Y was developed during Time Period Z2 which is earlier than Time Period Z1, then Event X can access Technology Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Event Y):- WorksIn(Person X, Organization A), OperateIn(Organization A, Facility C), LocatedIn(Facility C, Region Z), OrganizedIn(Event Y, Region Z);",
  "v_rule": "If Person X works in Organization A, and Organization A operates in Facility C, and Facility C is located in Region Z, and Event Y is organized in Region Z, then Person X can access Event Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Plant Y):- ActiveDuring(Animal X, Time Period Z1), GrowsIn(Plant Y, Region C), CharacterizedBy(Region C, Condition A), DominatesIn(Condition A, Time Period Z1);",
  "v_rule": "If Animal X is active during Time Period Z1, and Plant Y grows in Region C which is characterized by Condition A, and Condition A dominates in Time Period Z1, then Animal X can access Plant Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Platform Y):- Received(Person X, Electronic Device Z2), DevelopedWith(Platform Y, Technology C), CompatibleWith(Technology C, Technology A), Uses(Electronic Device Z2, Technology A);",
  "v_rule": "If Person X has received Electronic Device Z2, and Platform Y is developed with Technology C which is compatible with Technology A, and Electronic Device Z2 uses Technology A, then Person X can access Platform Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Substance Y):- LiveIn(Animal X, Natural Place A), LocatedIn(Natural Place A, Region Z), ProducedIn(Substance Y, Facility C), LocatedIn(Facility C, Region Z);",
  "v_rule": "If Animal X lives in Natural Place A, which is located in Region Z, and Substance Y is produced in Facility C, which is also located in Region Z, then Animal X can access Substance Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Substance X, Facility Y):- ExtractFrom(Substance X, Plant C), GrowIn(Plant C, Natural Place A), LocatedIn(Natural Place A, Region Z1), TransportTo(Region Z1, Facility Y);",
  "v_rule": "If Substance X can be extracted from Plant C, and Plant C grows in Natural Place A, and Natural Place A is located in Region Z1, and Region Z1 can transport to Facility Y, then Substance X can be accessed at Facility Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Game Y):- LocatedIn(Organization X, Region Z), DistributedBy(Game Y, Organization A), HeadquarteredIn(Organization A, Region C), LocatedIn(Region C, Region Z);",
  "v_rule": "If Organization X is located in Region Z and Game Y is distributed by Organization A, and if Organization A is headquartered in Region C which is located in Region Z, then Organization X can access Game Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStudy(Person X, Natural Phenomenon Y):- StudiesIn(Person X, Facility A), LocatedIn(Facility A, Region Z), OccurIn(Natural Phenomenon Y, Condition C), PredominantIn(Condition C, Region Z);",
  "v_rule": "If Person X studies in Facility A, which is located in Region Z, and Natural Phenomenon Y occurs in Condition C, which is predominant in Region Z, then Person X can study Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPlay(Electronic Device X, Game Y):- Needs(Game Y, Electronic Device C), Uses(Electronic Device C, Technology A), Supports(Platform Z, Technology A), RunOn(Electronic Device X, Platform Z);",
  "v_rule": "If Game Y needs Electronic Device C and Electronic Device C uses Technology A, and if Platform Z supports Technology A and Electronic Device X runs on Platform Z, then Electronic Device X can play Game Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Show Y):- OperateIn(Organization X, Facility A), LocatedIn(Facility A, Region Z), HasRights(Organization C, Show Y), OperateIn(Organization C, Region Z);",
  "v_rule": "If Organization X operates in Facility A which is located in Region Z, and Organization C has rights to Show Y and also operates in Region Z, then Organization X can access Show Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanPlay(Person X, Game Y):- Owns(Person X, Electronic Device Z), DevelopedFor(Game Y, Platform A), Require(Platform A, Technology C), EquippedWith(Electronic Device Z, Technology C);",
  "v_rule": "If Person X owns Electronic Device Z, and Game Y is developed for Platform A, and Platform A requires Technology C, and Electronic Device Z is equipped with Technology C, then Person X can play Game Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStudy(Person X, Natural Phenomenon Y):- WorksIn(Person X, Organization A), OperateIn(Organization A, Facility C), LocatedIn(Facility C, Region Z), SuitableEnvironment(Natural Phenomenon Y, Region Z);",
  "v_rule": "If Person X works in Organization A, which operates in Facility C located in Region Z, and the Natural Phenomenon Y is suitable for study in Region Z, then Person X can study Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Electronic Device Y):- LocatedIn(Person X, Region Z), ShippedTo(Electronic Device Y, Region A), PartOf(Region A, Region C), PartOf(Region C, Region Z);",
  "v_rule": "If Person X is located in Region Z and Electronic Device Y is shipped to Region A, and Region A is part of Region C which in turn is part of Region Z, then Person X can access Electronic Device Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Natural Place X, Disease Y):- LiveIn(Animal Z, Natural Place X), FeedOn(Animal Z, Food A), HandledBy(Food A, Person C), InfectedWith(Person C, Disease Y);",
  "v_rule": "If Animal Z lives in Natural Place X and feeds on Food A, and Food A is handled by Person C who is infected with Disease Y, then Disease Y can access Natural Place X.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Food Y):- OperateIn(Organization X, Facility A), SituatedIn(Facility A, Region Z), GrownIn(Food Y, Facility C), LocatedIn(Facility C, Region Z);",
  "v_rule": "If Organization X operates in Facility A which is situated in Region Z, and Food Y is grown in Facility C that is located in the same Region Z, then Organization X can access Food Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Tool Y):- HasBranchIn(Organization X, Region A), Contains(Region Z1, Region C), Contains(Region C, Region A), ImportedTo(Region Z1, Tool Y);",
  "v_rule": "If Organization X has a branch in Region A, and Region Z1 contains Region C, which in turn contains Region A, and Tool Y is imported to Region Z1, then Organization X can access Tool Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Natural Place Y):- ActiveIn(Organization X, Event A), HappenIn(Event A, Region C), TimeIn(Region C, Time Period Z2), SafeDuring(Natural Place Y, Time Period Z2);",
  "v_rule": "If Organization X is active in Event A, and Event A happens in Region C during Time Period Z2, and Natural Place Y is safe during Time Period Z2, then Organization X can access Natural Place Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Natural Phenomenon Y):- AdaptedTo(Animal X, Region Z), Create(Natural Phenomenon Y, Condition C), ConditionTrigger(Condition C, Event A), HappenIn(Event A, Region Z);",
  "v_rule": "If Animal X is adapted to Region Z, and Natural Phenomenon Y creates Condition C, and Condition C is triggered by Event A, and Event A happens in Region Z, then Animal X can access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Alcohol Y):- OpenDuring(Facility X, Time Period Z1), ProducedIn(Alcohol Y, Region C), AvailableIn(Region C, Facility A), OpenDuring(Facility A, Time Period Z1);",
  "v_rule": "If Facility X is open during Time Period Z1, and Alcohol Y is produced in Region C, and Region C has Facility A where Alcohol Y is available, and Facility A is also open during Time Period Z1, then Facility X can access Alcohol Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Technology X, Region Y):- RequiredFor(Technology X, Job C), JobIn(Job C, Organization Z), OperateIn(Organization Z, Facility A), SituatedIn(Facility A, Region Y);",
  "v_rule": "If Technology X is required for Job C, and Job C is in Organization Z, and Organization Z operates in Facility A, and Facility A is situated in Region Y, then Technology X can be used in Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ProducedIn(Material X, Region Y):- MinedBy(Material X, Organization C), OperateIn(Organization C, Natural Place Z), SurroundedBy(Natural Place Z, Natural Place A), LocatedIn(Natural Place A, Region Y);",
  "v_rule": "If Material X is mined by Organization C, and Organization C operates in Natural Place Z, and Natural Place Z is surrounded by Natural Place A, and Natural Place A is located in Region Y, then Material X is produced in Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "FoundIn(Plant X, Region Y):- GrownBy(Plant X, Person A), LiveIn(Person A, Natural Place Z), LocatedIn(Natural Place Z, Region C), PartOf(Region C, Region Y);",
  "v_rule": "If Plant X is grown by Person A, and Person A lives in Natural Place Z, and Natural Place Z is located in Region C, and Region C is part of Region Y, then Plant X can be found in Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AccessibleIn(Technology X, Region Y):- RequiredFor(Technology X, Job A), Offer(Job A, Organization C), Merge(Organization C, Organization Z), MovedTo(Organization Z, Region Y);",
  "v_rule": "If Technology X is required for Job A, and Job A is offered by Organization C, and Organization C has merged with Organization Z, and Organization Z has moved to Region Y, then Technology X is accessible in Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvailableIn(Food X, Region Y):- SoldIn(Food X, Facility Z), PurchasedBy(Facility Z, Organization C), SubsidiaryOf(Organization C, Organization A), Decided(Organization A, Region Y);",
  "v_rule": "If Food X is sold in Facility Z, and Facility Z is purchased by Organization C, and Organization C is a subsidiary of Organization A, and Organization A has decided on Region Y, then Food X is available in Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RestrictedIn(Alcohol X, Region Y):- Contains(Substance X, Substance A), ViolateLegislation(Substance A, Legislation C), Enforced(Legislation C, Region Z1), PartOf(Region Z1, Region Y);",
  "v_rule": "If Alcohol X contains Substance A, and Substance A violates Legislation C, and Legislation C is enforced in Region Z1, and Region Z1 is part of Region Y, then Alcohol X is restricted in Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "OriginOfMaterial(Material X, Region Y):- ExtractedBy(Material X, Person A), WorkIn(Person A, Facility C), SituatedIn(Facility C, Natural Place Z), FoundIn(Natural Place Z, Region Y);",
  "v_rule": "If Material X is extracted by Person A, and Person A works in Facility C, and Facility C is situated in Natural Place Z, and Natural Place Z is found in Region Y, then the origin of Material X is Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ObservedIn(Condition X, Region Y):- Exist(Condition X, Natural Place Z), LocatedIn(Natural Place Z, Region C), Contains(Region A, Region C), Inside(Region A, Region Y);",
  "v_rule": "If Condition X exists in Natural Place Z, and Natural Place Z is located in Region C, and Region A contains Region C, and Region A is inside Region Y, then Condition X is observed in Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LegalInRegion(Authorization X, Region Y):- GrantedBy(Authorization X, Facility A), OperateIn(Facility A, Natural Place C), IncludedIn(Natural Place C, Region Z), IsTerritory(Region Z, Region Y);",
  "v_rule": "If Authorization X is granted by Facility A, and Facility A operates in Natural Place C, and Natural Place C is included in Region Z, and Region Z is a territory of Region Y, then Authorization X is legal in Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvailableIn(Alcohol X, Region Y):- DistilledIn(Alcohol X, Facility A), BuiltIn(Facility A, Natural Place C), Inside(Natural Place C, Facility Z), BuiltIn(Facility Z, Region Y);",
  "v_rule": "If Alcohol X is distilled in Facility A, and Facility A is built in Natural Place C, and Natural Place C is inside Facility Z, and Facility Z is built in Region Y, then Alcohol X is available in Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SoldIn(Furniture X, Region Y):- DistributedBy(Furniture X, Organization Z), OperatesIn(Organization Z, Region A), Contains(Region Y, Region C), Contains(Region C, Region A);",
  "v_rule": "If Furniture X is distributed by Organization Z, and Organization Z operates in Region A, and Region Y contains Region C, which in turn contains Region A, then Furniture X is sold in Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CannotPurchase(Alcohol X, Region Y):- Illegal(Substance X, Region Z1), Contains(Region Y, Region A), Surround(Region A, Natural Place C), LocatedIn(Natural Place C, Region Z1);",
  "v_rule": "If Substance X is illegal in Region Z1, and Region Y contains Region A, which is surrounded by Natural Place C that is located in Region Z1, then Alcohol X cannot be purchased in Region Y.",
  "domain": "location",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotCEO(Person X, Organization Y):- ParticipatedIn(Person X, Event A), Develop(Event A, Skill Z1), RequireMinimumSkill(Organization Y, Skill Z2), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has participated in Event A which develops Skill Z1, and Organization Y requires a minimum of Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X is not the CEO of Organization Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDesign(Person X, Furniture Y):- Practice(Person X, Skill Z1), MadeOf(Furniture Y, Material A), WorkWith(Skill Z2, Material A), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has practiced Skill Z1 and Furniture Y is made of Material A, and Skill Z2 is required to work with Material A, but Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Tool Y):- WorkAt(Person X, Job A), Pay(Job A, Money Z1), Bought(Tool Y, Money Z2), SmallerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X works at Job A which pays Money Z1 and Tool Y is bought for Money Z2, and if Money Z1 is smaller than Money Z2, then Person X cannot buy Tool Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotCEO(Person X, Organization Y):- WorkedIn(Person X, Job A), RequiredIn(Skill Z1, Job A), RequireMinimumSkill(Organization Y, Skill Z2), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has worked in Job A requiring Skill Z1 and the minimum skill required for being a CEO in Organization Y is Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X is not the CEO of Organization Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Tool Y):- Have(Person X, Money Z1), SoldIn(Tool Y, Facility A), PriceTag(Facility A, Money Z2), SmallerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has Money Z1 and Tool Y is sold in Facility A with a price tag of Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Tool Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPerform(Person X, Job Y):- Survive(Person X, Event A), Demand(Event A, Strength Z1), Necessary(Job Y, Strength Z2), SmallerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X has survived Event A which demanded Strength Z1, and Job Y requires Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X cannot perform Job Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotQualified(Person X, Job Y):- Train(Person X, Strength Z1), Involves(Job Y, Event A), StrengthNeeded(Event A, Strength Z2), SmallerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X has trained to Strength Z1 and Job Y involves Event A which requires Strength Z2, and Strength Z1 is smaller than Strength Z2, then Person X is not qualified for Job Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDesign(Person X, Furniture Y):- WorkAs(Person X, Job A), Need(Job A, Skill Z1), RequireSkill(Furniture Y, Skill Z2), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X works as Job A and Job A needs Skill Z1, and if Furniture Y requires Skill Z2 which is greater than Skill Z1, then Person X cannot design Furniture Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LacksSkill(Person X, Facility Y):- StrengthRequired(Facility Y, Strength Z1), Survive(Person X, Event A), Demand(Event A, Strength Z2), SmallerThan(Strength Z2, Strength Z1);",
  "v_rule": "If Facility Y requires Strength Z1 and Person X survived Event A which demanded Strength Z2, and Strength Z2 is smaller than Strength Z1, then Person X lacks the skill for Facility Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAnArtist(Person X, Artwork Y):- SkillRequired(Artwork Y, Skill Z1), WorkedIn(Person X, Job A), RequiredIn(Skill Z2, Job A), LessThan(Skill Z2, Skill Z1);",
  "v_rule": "If Artwork Y requires Skill Z1 and Person X has worked in Job A which requires Skill Z2, and Skill Z2 is less than Skill Z1, then Person X is not an artist for Artwork Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Alcohol Y):- Earns(Person X, Job A), Pays(Job A, Money Z1), Sell(Alcohol Y, Money Z2), SmallerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X earns from Job A, Job A pays Money Z1, Alcohol Y is sold for Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Alcohol Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Electronic Device Y):- Have(Person X, Money Z1), ManufacturedBy(Electronic Device Y, Organization A), PriceSetBy(Organization A, Money Z2), SmallerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has Money Z1 and Electronic Device Y is manufactured by Organization A, and Organization A has set the price for the device as Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Electronic Device Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotOperate(Person X, Electronic Device Y):- Age(Person X, Age Z1), Contains(Electronic Device Y, Material A), SafeFor(Material A, Age Z2), BiggerThan(Age Z2, Age Z1);",
  "v_rule": "If Person X is of Age Z1 and Electronic Device Y contains Material A, and Material A is safe for Age Z2, but Age Z2 is bigger than Age Z1, then Person X cannot operate Electronic Device Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAffordable(Person X, Material Y):- WorkAt(Person X, Job A), Pay(Job A, Money Z1), Price(Material Y, Money Z2), SmallerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X works at Job A which pays Money Z1 and the price of Material Y is Money Z2, and Money Z1 is smaller than Money Z2, then Material Y is not affordable for Person X.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPublish(Person X, Publication Y):- WorkAs(Person X, Job A), Need(Job A, Skill Z1), RequireSkillLevel(Publication Y, Skill Z2), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X works as Job A and Job A needs Skill Z1, and the skill level required for Publication Y is Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X cannot publish Publication Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotLead(Person X, Organization Y):- Have(Person X, Skill Z1), Goal(Organization Y, Skill Z2), UsedIn(Skill Z1, Job A), NotUsedIn(Skill Z2, Job A);",
  "v_rule": "If Person X has Skill Z1 and the goal of Organization Y is Skill Z2, and Skill Z1 is used in Job A but Skill Z2 is not used in Job A, then Person X cannot lead Organization Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotOperate(Person X, Electronic Device Y):- Age(Person X, Age Z1), DesignedBy(Electronic Device Y, Organization A), Follows(Organization A, Age Z2), BiggerThan(Age Z2, Age Z1);",
  "v_rule": "If Person X is of Age Z1 and Electronic Device Y is designed by Organization A, which follows an age policy of Age Z2, and Age Z2 is bigger than Age Z1, then Person X cannot operate Electronic Device Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotEat(Person X, Food Y):- Have(Person X, Disease Z2), ProcessedIn(Food Y, Facility A), Contaminated(Facility A, Substance B), Cause(Substance B, Disease Z2);",
  "v_rule": "If Person X has Disease Z2, and Food Y is processed in Facility A, and Facility A is contaminated with Substance B, and Substance B causes Disease Z2, then Person X cannot eat Food Y.",
  "domain": "affordance",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvoidsFood(Person X, Plant Y):- ParentOf(Person A, Person C), ParentOf(Person C, Person X), AllergicTo(Person A, Substance Z1), Absorb(Plant Y, Substance Z1);",
  "v_rule": "If Person A is a parent of Person C, and Person C is a parent of Person X, and Person A is allergic to Substance Z1, and Plant Y absorbs Substance Z1, then Person X avoids food from Plant Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotInShow(Material X, Show Y):- CreatedIn(Material X, Event A), OccurredIn(Event A, Time Period Z1), FilmedDuring(Show Y, Time Period Z2), LaterThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Material X was created in Event A, which occurred in Time Period Z1, and Show Y was filmed during Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Material X is not in Show Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Vehicle X, Animal Y):- OperatedBy(Vehicle X, Person A), LivedIn(Person A, Time Period Z1), ExistIn(Animal Y, Time Period Z2), LaterThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Vehicle X is operated by Person A, and Person A lived in Time Period Z1, and Animal Y existed in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Animal Y cannot access Vehicle X.",
  "domain": "accessibility",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Natural Phenomenon X, Artwork Y):- TriggeredBy(Natural Phenomenon X, Event A), OccurDuring(Event A, Time Period Z1), Made(Artwork Y, Time Period Z2), EarlierThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Natural Phenomenon X is triggered by Event A, and Event A occurs during Time Period Z1, and Artwork Y is made during Time Period Z2, and Time Period Z1 is earlier than Time Period Z2, then Natural Phenomenon X cannot access Artwork Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotAccess(Person X, Financial Product Y):- UnderAge(Person X, Age Z1), RegulatedBy(Financial Product Y, Legislation A), Stipulates(Legislation A, Age Z2), GreaterThan(Age Z2, Age Z1);",
  "v_rule": "If Person X is under the age of Z1 and Financial Product Y is regulated by Legislation A, which stipulates a minimum age of Z2, and Age Z2 is greater than Age Z1, then Person X cannot access Financial Product Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Financial Product Y):- BelowLegalAge(Person X, Age Z1), OfferedBy(Financial Product Y, Facility A), SetBy(Facility A, Age Z2), GreaterThan(Age Z2, Age Z1);",
  "v_rule": "If Person X is below the legal age Z1, and Financial Product Y is offered by Facility A which has set the legal age as Z2, and Age Z2 is greater than Age Z1, then Person X cannot access Financial Product Y.",
  "domain": "accessibility",
  "depth": 1,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Drug Y):- InvolvedIn(Organization X, Event A), RegulatedBy(Event A, Legislation Z2), Contains(Drug Y, Substance C), BannedIn(Substance C, Legislation Z2);",
  "v_rule": "If Organization X is involved in Event A, and Event A is regulated by Legislation Z2, and Drug Y contains Substance C, and Substance C is banned in Legislation Z2, then Organization X cannot access Drug Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Game Y):- ProvidesServiceIn(Organization X, Region C), LocatedIn(Region C, Region A), EnforcedIn(Legislation Z, Region A), Illegal(Game Y, Legislation Z);",
  "v_rule": "If Organization X provides services in Region C, and Region C is located in Region A, and Legislation Z is enforced in Region A, and Game Y is illegal under Legislation Z, then Organization X cannot access Game Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Facility X, Platform Y):- Operate(Facility X, Technology Z), DevelopedIn(Platform Y, Time Period A), DestroyedIn(Technology Z, Time Period C), EarlierThan(Time Period C, Time Period A);",
  "v_rule": "If Facility X operates with Technology Z and Platform Y was developed in Time Period A, and if Technology Z was destroyed in Time Period C which is earlier than Time Period A, then Facility X cannot access Platform Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotSuitableFor(Game X, Disease Y):- Requires(Game X, Skill Z), ProgressesTo(Disease Y, Disease C), Causes(Disease C, Condition A), Prevents(Condition A, Skill Z);",
  "v_rule": "If Game X requires Skill Z and Disease Y progresses to Disease C, and Disease C causes Condition A which prevents Skill Z, then Game X is not suitable for someone with Disease Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "Incompatible(Electronic Device X, Platform Y):- BuiltWith(Electronic Device X, Material A), ProducedBy(Technology Z, Material A), DevelopedIn(Platform Y, Time Period C), NotInvented(Technology Z, Time Period C);",
  "v_rule": "If Electronic Device X is built with Material A, and Technology Z that produced Material A, and Platform Y was developed in Time Period C, but Technology Z was not invented in Time Period C, then Electronic Device X is incompatible with Platform Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Drug Y):- Required(Organization X, Legislation Z2), ManufacturedFrom(Drug Y, Material C), ComposedOf(Material C, Substance A), BannedIn(Substance A, Legislation Z2);",
  "v_rule": "If Organization X requires Legislation Z2 and Drug Y is manufactured from Material C, which is composed of Substance A, and Substance A is banned in Legislation Z2, then Organization X cannot access Drug Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SafeFrom(Material X, Natural Phenomenon Y):- ExistIn(Material X, Region Z1), Trigger(Natural Phenomenon Y, Event C), Need(Event C, Condition A), Lack(Region Z1, Condition A);",
  "v_rule": "If Material X exists in Region Z1 and Natural Phenomenon Y triggers Event C which needs Condition A, and Region Z1 lacks Condition A, then Material X is safe from Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasRestriction(Person X, Platform Y):- EmployedBy(Person X, Organization A), LocatedIn(Organization A, Region Z1), Violates(Platform Y, Legislation C), EnforcedIn(Legislation C, Region Z1);",
  "v_rule": "If Person X is employed by Organization A, and Organization A is located in Region Z1, and Platform Y violates Legislation C which is enforced in Region Z1, then Person X has a restriction on Platform Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotRequiredInJob(Natural Phenomenon X, Job Y):- Necessary(Job Y, Condition Z), TriggeredBy(Natural Phenomenon X, Event C), OccurDuring(Event C, Time Period A), NotExistAt(Condition Z, Time Period A);",
  "v_rule": "If Job Y requires Condition Z, and Natural Phenomenon X triggers Event C, and Event C occurs during Time Period A, and Condition Z does not exist during Time Period A, then Natural Phenomenon X is not required in Job Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotInCollection(Facility X, Artwork Y):- MadeFrom(Artwork Y, Material A), Need(Material A, Condition Z), LocatedIn(Facility X, Region C), NotAvailableIn(Condition Z, Region C);",
  "v_rule": "If Artwork Y is made from Material A, and Material A needs Condition Z to be preserved, and Facility X is located in Region C where Condition Z is not available, then Artwork Y is not in the collection of Facility X.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotLocal(Drug X, Natural Place Y):- GrowsIn(Drug X, Region Z1), LocatedIn(Natural Place Y, Region A), SpeakIn(Skill C, Region A), NotSpeakIn(Skill C, Region Z1);",
  "v_rule": "If Drug X grows in Region Z1 and Natural Place Y is located in Region A, and Skill C is spoken in Region A but not spoken in Region Z1, then Drug X is not local to Natural Place Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Drug X, Platform Y):- Distribute(Drug X, Technology Z), DevelopedIn(Platform Y, Time Period A), NotExist(Technology Z, Time Period C), EarlierThan(Time Period A, Time Period C);",
  "v_rule": "If Drug X is distributed through Technology Z, and Platform Y was developed in Time Period A, and Technology Z did not exist in Time Period C, and Time Period A is earlier than Time Period C, then Drug X cannot be accessed on Platform Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Substance Y):- OperateIn(Organization X, Region A), PassedIn(Legislation Z, Facility C), LocatedIn(Facility C, Region A), ProhibitedBy(Substance Y, Legislation Z);",
  "v_rule": "If Organization X operates in Region A, and Legislation Z has been passed in Facility C, which is located in Region A, and Substance Y is prohibited by Legislation Z, then Organization X cannot access Substance Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAvailable(Drug X, Platform Y):- Requires(Drug X, Condition C), SameCondition(Condition C, Condition A), Maintain(Condition A, Technology Z), Lack(Platform Y, Technology Z);",
  "v_rule": "If Drug X requires Condition C, and Condition C is the same as Condition A, and Condition A is maintained by Technology Z, and Platform Y lacks Technology Z, then Drug X is not available on Platform Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Tool X, Natural Phenomenon Y):- OperatedBy(Tool X, Person A), EmployedBy(Person A, Organization C), OperateIn(Organization C, Condition Z2), AbsentIn(Natural Phenomenon Y, Condition Z2);",
  "v_rule": "If Tool X is operated by Person A, and Person A is employed by Organization C, and Organization C operates in Condition Z2, and Condition Z2 is absent in Natural Phenomenon Y, then Tool X cannot access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RestrictedItem(Alcohol X, Show Y):- SponsoredBy(Show Y, Organization A), Advocate(Organization A, Legislation C), ProhibitedIn(Alcohol X, Region E), GovernedBy(Region E, Legislation C);",
  "v_rule": "If Show Y is sponsored by Organization A, and Organization A advocates for Legislation C, and Alcohol X is prohibited in Region E, and Region E is governed by Legislation C, then Alcohol X is a restricted item for Show Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 4,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToObey(Person X, Legislation Y):- LiveIn(Person X, Region Z), PassedIn(Legislation Y, Facility A), OperatedBy(Facility A, Organization C), BelongTo(Organization C, Region Z);",
  "v_rule": "If Person X lives in Region Z, and Legislation Y was passed in Facility A, which is operated by Organization C that belongs to Region Z, then Person X needs to obey Legislation Y.",
  "domain": "need",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPrevent(Person X, Disease Y):- BeSusceptibleTo(Person X, Disease Z1), Causes(Disease Z1, Condition A), Aggravates(Condition A, Disease C), LeadsTo(Disease C, Disease Y);",
  "v_rule": "If Person X is susceptible to Disease Z1, and Disease Z1 causes Condition A, and Condition A aggravates Disease C, which leads to Disease Y, then Person X needs to prevent Disease Y.",
  "domain": "need",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Material Y):- Has(Person X, Job Z), Require(Job Z, Tool A), ConstructedWith(Tool A, Material C), ComposedOf(Material C, Material Y);",
  "v_rule": "If Person X has Job Z and Job Z requires Tool A, and Tool A is constructed with Material C which is composed of Material Y, then Person X needs to use Material Y.",
  "domain": "need",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Authorization Y):- AssignedTo(Person X, Region Z), PartOf(Region Z, Region C), HasLegislation(Region C, Legislation A), Mandates(Legislation A, Authorization Y);",
  "v_rule": "If Person X is assigned to Region Z, and Region Z is part of Region C, and Region C has Legislation A, and Legislation A mandates Authorization Y, then Person X needs to use Authorization Y.",
  "domain": "need",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Authorization Y):- WorksFor(Person X, Organization A), OperateIn(Organization A, Facility C), LocatedIn(Facility C, Region Z), Requires(Region Z, Authorization Y);",
  "v_rule": "If Person X works for Organization A, and Organization A operates in Facility C, and Facility C is located in Region Z, and Region Z requires Authorization Y, then Person X needs to use Authorization Y.",
  "domain": "need",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MustComplyWithRules(Person X, Authorization Y):- Needs(Person X, Facility Z), PurchasedBy(Facility Z, Organization C), SubsidiaryOf(Organization C, Organization A), Granted(Organization A, Authorization Y);",
  "v_rule": "If Person X needs Facility Z, and Facility Z is purchased by Organization C, and Organization C is a subsidiary of Organization A, and Organization A is granted Authorization Y, then Person X must comply with the rules of Authorization Y.",
  "domain": "need",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Authorization Y):- Visits(Person X, Region Z1), GovernedBy(Region Z1, Facility C), EnactedBy(Legislation A, Facility C), Mandates(Legislation A, Authorization Y);",
  "v_rule": "If Person X visits Region Z1 which is governed by Facility C, and Legislation A enacted by Facility C mandates Authorization Y, then Person X needs to use Authorization Y.",
  "domain": "need",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToUse(Person X, Technology Y):- HasJob(Person X, Job Z), TrainedIn(Job Z, Skill C), NeededFor(Tool A, Skill C), PoweredBy(Tool A, Technology Y);",
  "v_rule": "If Person X has Job Z and Job Z requires training in Skill C, and Tool A is needed for Skill C and Tool A is powered by Technology Y, then Person X needs to use Technology Y.",
  "domain": "need",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToAccess(Person X, Platform Y):- Has(Person X, Job Z), Involves(Job Z, Material C), Manipulate(Tool A, Material C), SuppliedBy(Tool A, Platform Y);",
  "v_rule": "If Person X has Job Z which involves Material C, and Tool A is used to manipulate Material C, and Tool A is supplied by Platform Y, then Person X needs to access Platform Y.",
  "domain": "need",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToPrevent(Person X, Disease Y):- HasCondition(Person X, Condition A), AssociatedWith(Disease Z1, Condition A), Causes(Disease Z1, Condition C), TriggeredBy(Condition C, Disease Y);",
  "v_rule": "If Person X has Condition A, and Disease Z1 is associated with Condition A, and Disease Z1 causes Condition C, and Condition C is triggered by Disease Y, then Person X needs to prevent Disease Y.",
  "domain": "need",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NeedToObtain(Person X, Authorization Y):- WantsToAccess(Person X, Facility Z), OwnedBy(Facility Z, Organization A), RegisteredUnder(Organization A, Legislation C), EnforcedBy(Legislation C, Authorization Y);",
  "v_rule": "If Person X wants to access Facility Z, and Facility Z is owned by Organization A, and Organization A is registered under Legislation C, and Legislation C is enforced by Authorization Y, then Person X needs to obtain Authorization Y.",
  "domain": "need",
  "depth": 2,
  "length": 4,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeStainedBy(Furniture X, Alcohol Y):- MaterialOf(Furniture X, Material Z1), MadeOf(Material Z1, Substance A), MadeOf(Substance A, Material C), NonAlcohol(Material C, Alcohol Y);",
  "v_rule": "If Furniture X is made of Material Z1, and Material Z1 is made of Substance A, and Substance A is made of Material C, and Material C is not affected by Alcohol Y, then Furniture X cannot be stained by Alcohol Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBePaintedWith(Furniture X, Substance Y):- OwnedBy(Furniture X, Person C), LivesIn(Person C, Region A), RegionCondition(Region A, Condition Z2), SubstanceIneffective(Condition Z2, Substance Y);",
  "v_rule": "If Furniture X is owned by Person C, and Person C lives in Region A, and Region A has Condition Z2, and Substance Y is ineffective under Condition Z2, then Furniture X cannot be painted with Substance Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDissolvedIn(Tool X, Alcohol Y):- MadeFrom(Tool X, Substance A), ComposedOf(Substance A, Material Z1), MadeOf(Material Z1, Substance C), NonReactive(Substance C, Alcohol Y);",
  "v_rule": "If Tool X is made from Substance A, Substance A is composed of Material Z1, Material Z1 is made of Substance C, and Substance C is non-reactive with Alcohol Y, then Tool X cannot be dissolved in Alcohol Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDamagedBy(Electronic Device X, Alcohol Y):- CoatedWith(Electronic Device X, Substance Z2), MadeOf(Substance Z2, Material A), MadeOf(Material A, Substance C), NonReactive(Substance C, Alcohol Y);",
  "v_rule": "If Electronic Device X is coated with Substance Z2, and Substance Z2 is made of Material A, and Material A is made of Substance C, and Substance C is non-reactive with Alcohol Y, then Electronic Device X cannot be damaged by Alcohol Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotContain(Natural Place X, Substance Y):- FormedFrom(Natural Place X, Substance C), ComposedOf(Substance C, Substance A), ComposedOf(Substance A, Substance Z1), Incompatible(Substance Z1, Substance Y);",
  "v_rule": "If Natural Place X is formed from Substance C, and Substance C is composed of Substance A, and Substance A is further composed of Substance Z1, and Substance Z1 is incompatible with Substance Y, then Natural Place X cannot contain Substance Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotProduce(Organization X, Alcohol Y):- OperateIn(Organization X, Facility A), LocatedIn(Facility A, Region Z2), GovernedBy(Region Z2, Facility C), Prohibit(Facility C, Alcohol Y);",
  "v_rule": "If Organization X operates in Facility A which is located in Region Z2, and Region Z2 is governed by Facility C that prohibits the production of Alcohol Y, then Organization X cannot produce Alcohol Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotProduce(Organization X, Alcohol Y):- LocatedIn(Organization X, Region Z2), GovernedBy(Region Z2, Facility A), LocatedIn(Facility A, Region C), AlcoholBan(Region C, Alcohol Y);",
  "v_rule": "If Organization X is located in Region Z2, and Region Z2 is governed by Facility A, and Facility A is located in Region C, and there is an alcohol ban in Region C for Alcohol Y, then Organization X cannot produce Alcohol Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrevent(Natural Phenomenon X, Disease Y):- Causes(Natural Phenomenon X, Condition C), LeadsTo(Condition C, Event A), LeadsTo(Event A, Condition Z1), LeadsTo(Condition Z1, Disease Y);",
  "v_rule": "If Natural Phenomenon X causes Condition C, and Condition C leads to Event A, and Event A leads to Condition Z1, and Condition Z1 leads to Disease Y, then Natural Phenomenon X cannot prevent Disease Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeDamagedBy(Vehicle X, Substance Y):- CoatedWith(Vehicle X, Material A), ComposedOf(Material A, Substance C), ExtractedFrom(Substance C, Material Z1), ResistantTo(Material Z1, Substance Y);",
  "v_rule": "If Vehicle X is coated with Material A, and Material A is composed of Substance C, and Substance C is extracted from Material Z1, and Material Z1 is resistant to Substance Y, then Vehicle X cannot be damaged by Substance Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPrevent(Alcohol X, Disease Y):- DistilledFrom(Alcohol X, Material C), ComposedOf(Material C, Substance A), Causes(Substance A, Condition Z2), LeadsTo(Condition Z2, Disease Y);",
  "v_rule": "If Alcohol X is distilled from Material C, and Material C is composed of Substance A, and Substance A causes Condition Z2, and Condition Z2 leads to Disease Y, then Alcohol X cannot prevent Disease Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeConsumedIn(Alcohol X, Facility Y):- FacilityType(Facility Y, Facility Z1), FacilityLocatedIn(Facility Z1, Region A), Has(Region A, Legislation C), Prohibits(Legislation C, Alcohol X);",
  "v_rule": "If Facility Y is of type Facility Z1 and Facility Z1 is located in Region A, and Region A has Legislation C that prohibits Alcohol X, then Alcohol X cannot be consumed in Facility Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotStain(Alcohol X, Platform Y):- ConstructedWith(Platform Y, Material A), MadeOf(Material A, Material Z1), MadeOf(Material Z1, Substance C), NonReactive(Substance C, Alcohol X);",
  "v_rule": "If Platform Y is constructed with Material A, and Material A is made of Material Z1, and Material Z1 is made of Substance C, and Substance C is non-reactive with Alcohol X, then Alcohol X cannot stain Platform Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBePlacedOn(Alcohol X, Furniture Y):- MaterialOf(Furniture Y, Material Z2), MadeOf(Material Z2, Substance A), MadeOf(Substance A, Material C), Dissolve(Material C, Alcohol X);",
  "v_rule": "If Furniture Y is made of Material Z2, and Material Z2 is made of Substance A, and Substance A is made of Material C, and Material C can dissolve in Alcohol X, then Alcohol X cannot be placed on Furniture Y.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBeServedAt(Facility X, Alcohol Y):- FacilityRegion(Facility X, Region Z2), GovernedBy(Region Z2, Facility A), LocatedIn(Facility A, Region C), AlcoholBan(Region C, Alcohol Y);",
  "v_rule": "If Facility X is in Region Z2, and Region Z2 is governed by Facility A, and Facility A is located in Region C, and there is an alcohol ban on Alcohol Y in Region C, then Alcohol Y cannot be served at Facility X.",
  "domain": "interaction",
  "depth": 2,
  "length": 4,
  "positive": false,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanOwn(Person X, Vehicle Y):- WorkAt(Person X, Job A), Pay(Job A, Money Z1), ManufacturedBy(Vehicle Y, Organization C), SetPrice(Organization C, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X works at Job A which pays Money Z1, and Vehicle Y is manufactured by Organization C which has set the price as Money Z2, and if Money Z1 is bigger than Money Z2, then Person X can own Vehicle Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Game Y):- Job(Person X, Job C), Pay(Job C, Money Z1), Sale(Game Y, Event A), EventDiscount(Event A, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has a job C that pays Money Z1, and Game Y is on sale during Event A which offers a discount of Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Game Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStore(Person X, Food Y):- Rent(Person X, Facility C), Contain(Facility C, Space Z2), SizeOf(Space Z2, Size A), SizeOf(Food Y, Size B), GreaterThan(Size A, Size B);",
  "v_rule": "If Person X rents Facility C which contains Space Z2, the size of Space Z2 is Size A, and the size of Food Y is Size B, and Size A is greater than Size B, then Person X can store Food Y in Facility C.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanOwn(Person X, Vehicle Y):- Have(Person X, Money Z1), AssembledIn(Vehicle Y, Facility C), OwnedBy(Facility C, Organization A), SetPrice(Organization A, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has Money Z1 and Vehicle Y is assembled in Facility C, which is owned by Organization A that has set the price for the vehicle as Money Z2, and Money Z1 is bigger than Money Z2, then Person X can own Vehicle Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Electronic Device Y):- Job(Person X, Job C), Pay(Job C, Money Z1), SoldBy(Electronic Device Y, Organization A), PriceSet(Organization A, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has a job C that pays Money Z1, and Electronic Device Y is sold by Organization A which has set the price at Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Electronic Device Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMaintainPlant(Person X, Plant Y):- ParticipateIn(Person X, Event A), Require(Event A, Tool C), Operate(Tool C, Skill Z2), SensitiveTo(Plant Y, Condition E), Manage(Skill Z2, Condition E);",
  "v_rule": "If Person X participates in Event A which requires Tool C, and Person X can operate Tool C with Skill Z2, and if Plant Y is sensitive to Condition E which can be managed by Skill Z2, then Person X can maintain Plant Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMaintain(Person X, Tool Y):- JobRequires(Person X, Job A), NeededFor(Tool C, Skill E), SkillRequired(Job A, Skill E), ToolOperatedBy(Tool C, Skill Z1), RequiredForRepair(Skill Z1, Tool Y);",
  "v_rule": "If Person X has a job A that requires Skill E, and Tool C is needed for Skill E, and Job A requires Skill E, and Tool C is operated by Skill Z1, and Skill Z1 is required for repairing Tool Y, then Person X can maintain Tool Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMaintainPlant(Person X, Plant Y):- JobRequires(Person X, Job C), JobRequires(Job C, Tool E), SkillToUse(Skill Z2, Tool E), SensitiveTo(Plant Y, Condition A), Manage(Skill Z2, Condition A);",
  "v_rule": "If Person X has a job C that requires Tool E, and Person X has Skill Z2 to use Tool E, and Plant Y is sensitive to Condition A, and Skill Z2 can manage Condition A, then Person X can maintain Plant Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanDiscuss(Person X, Publication Y):- JobRequires(Person X, Job A), Requires(Job A, Skill E), BasedOn(Skill E, Technology C), TechnologyRequiresSkill(Technology C, Skill Z1), RequiredForReading(Skill Z1, Publication Y);",
  "v_rule": "If Person X has a job A that requires Skill E, and Skill E is based on Technology C, and Technology C requires Skill Z1, and Skill Z1 is required for reading Publication Y, then Person X can discuss Publication Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMaintainPlant(Person X, Plant Y):- JobRequires(Person X, Job A), Requires(Job A, Skill E), BasedOn(Skill E, Technology C), TechnologyRequiresSkill(Technology C, Skill Z2), NeededFor(Skill Z2, Plant Y);",
  "v_rule": "If Person X has a job A that requires Skill E, and Skill E is based on Technology C, and Technology C requires Skill Z2, and Skill Z2 is needed for maintaining Plant Y, then Person X can maintain Plant Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanMaintainPlant(Person X, Plant Y):- WorkIn(Person X, Job C), UsedIn(Skill Z2, Tool E), UtilizedIn(Tool E, Job C), SensitiveTo(Plant Y, Condition A), Manage(Skill Z2, Condition A);",
  "v_rule": "If Person X works in Job C, Skill Z2 is used in Tool E, Tool E is utilized in Job C, Plant Y is sensitive to Condition A, and Skill Z2 can manage Condition A, then Person X can maintain Plant Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "HasSkills(Person X, Platform Y):- JobRequires(Person X, Job A), Requires(Job A, Tool E), MadeOf(Tool E, Material C), MaterialHandling(Material C, Skill Z1), DevelopedFor(Skill Z1, Platform Y);",
  "v_rule": "If Person X has a job A that requires Tool E, and Tool E is made of Material C, and handling Material C requires Skill Z1, and Skill Z1 is developed for Platform Y, then Person X has skills for Platform Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanCook(Person X, Food Y):- JobRequires(Person X, Job A), Requires(Job A, Tool E), MadeOf(Tool E, Material C), MaterialHandling(Material C, Skill Z), RequiredFor(Skill Z, Food Y);",
  "v_rule": "If Person X has a job A that requires Tool E, and Tool E is made of Material C, and handling Material C requires Skill Z, and Skill Z is required for making Food Y, then Person X can cook Food Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUtilize(Facility X, Financial Product Y):- ManagedBy(Facility X, Person A), AliveIn(Person A, Time Period Z1), PromotedBy(Financial Product Y, Event C), HappenIn(Event C, Time Period Z2), Overlap(Time Period Z1, Time Period Z2);",
  "v_rule": "If Facility X is managed by Person A, and Person A is alive in Time Period Z1, and Financial Product Y is promoted by Event C, and Event C happens in Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Facility X can utilize Financial Product Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Alcohol Y):- ConductActivity(Organization X, Event A), HappenIn(Event A, Time Period Z1), ProducedIn(Alcohol Y, Facility C), OperatedIn(Facility C, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Organization X conducts an Event A that happens in Time Period Z1, and Alcohol Y is produced in Facility C which operates in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can access Alcohol Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Material Y):- Organize(Organization X, Event C), SubEvent(Event C, Event A), HappenIn(Event A, Time Period Z1), ExtractedIn(Material Y, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Organization X organizes Event C, which includes SubEvent A, and SubEvent A happens in Time Period Z1, and Material Y is extracted in Time Period Z2 which is earlier than Time Period Z1, then Organization X can access Material Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Natural Phenomenon Y):- SurviveIn(Animal X, Condition A), GovernedBy(Region Z, Facility C), Implement(Facility C, Legislation D), ResultIn(Legislation D, Condition A), OccurIn(Natural Phenomenon Y, Region Z);",
  "v_rule": "If Animal X can survive in Condition A, and Region Z is governed by Facility C, and Facility C implements Legislation D, and Legislation D results in Condition A, and Natural Phenomenon Y occurs in Region Z, then Animal X can access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Financial Product Y):- ExistDuring(Organization X, Time Period Z1), ManagedBy(Financial Product Y, Person C), WorksIn(Person C, Facility A), OperateDuring(Facility A, Time Period Z2), Overlap(Time Period Z1, Time Period Z2);",
  "v_rule": "If Organization X exists during Time Period Z1, and Financial Product Y is managed by Person C, who works in Facility A that operates during Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Organization X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Organization X, Material Y):- HaveActivityIn(Organization X, Event A), HappenIn(Event A, Time Period Z1), CreatedIn(Material Y, Event C), OccurredIn(Event C, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Organization X has an activity in Event A, which happens in Time Period Z1, and Material Y was created in Event C, which occurred in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can use Material Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Financial Product Y):- ActiveIn(Organization X, Event A), OccurDuring(Event A, Time Period Z1), PromotedBy(Financial Product Y, Organization C), OperateDuring(Organization C, Time Period Z2), Overlap(Time Period Z1, Time Period Z2);",
  "v_rule": "If Organization X is active in Event A, and Event A occurs during Time Period Z1, and Financial Product Y is promoted by Organization C, and Organization C operates during Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Organization X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Financial Product Y):- ManagedBy(Facility X, Person A), AliveIn(Person A, Time Period Z1), PromotedBy(Financial Product Y, Organization C), OperateDuring(Organization C, Time Period Z2), StartBeforeEnd(Time Period Z1, Time Period Z2);",
  "v_rule": "If Facility X is managed by Person A, and Person A is alive during Time Period Z1, and Financial Product Y is promoted by Organization C, and Organization C operates during Time Period Z2, and Time Period Z1 starts before the end of Time Period Z2, then Facility X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Event Y):- WorksIn(Person X, Organization A), OperateIn(Organization A, Facility C), SituatedIn(Facility C, Region Z), HeldIn(Event Y, Facility E), LocatedIn(Facility E, Region Z);",
  "v_rule": "If Person X works in Organization A, which operates in Facility C situated in Region Z, and Event Y is held in Facility E that is located in the same Region Z, then Person X can access Event Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "MustComply(Organization X, Legislation Y):- ProvideServiceIn(Organization X, Natural Place A), SurroundedBy(Natural Place A, Substance C), LocatedIn(Substance C, Region Z), ApplyTo(Legislation Y, Event E), CommonIn(Event E, Region Z);",
  "v_rule": "If Organization X provides services in Natural Place A, and Natural Place A is surrounded by Substance C, and Substance C is located in Region Z, and Legislation Y applies to Event E, and Event E is common in Region Z, then Organization X must comply with Legislation Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Electronic Device Y):- ProvidesServiceIn(Organization X, Region E), LocatedIn(Region E, Region C), Contains(Region C, Region A), LocatedIn(Region A, Region Z1), ImportedTo(Electronic Device Y, Region Z1);",
  "v_rule": "If Organization X provides service in Region E, and Region E is located in Region C, and Region C contains Region A, and Region A is located in Region Z1, and Electronic Device Y is imported to Region Z1, then Organization X can access Electronic Device Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Natural Place Y):- ActiveIn(Organization X, Event A), CausedBy(Event A, Natural Phenomenon E), OccurIn(Natural Phenomenon E, Region C), TimeIn(Region C, Time Period Z2), NotRestrictedDuring(Natural Place Y, Time Period Z2);",
  "v_rule": "If Organization X is active in Event A, and Event A is caused by Natural Phenomenon E, and Natural Phenomenon E occurs in Region C during Time Period Z2, and Natural Place Y is not restricted during Time Period Z2, then Organization X can access Natural Place Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Electronic Device Y):- WorksIn(Person X, Organization A), LocatedIn(Organization A, Region Z), ShippedTo(Electronic Device Y, Region C), PartOf(Region C, Region E), PartOf(Region E, Region Z);",
  "v_rule": "If Person X works in Organization A, which is located in Region Z, and Electronic Device Y has been shipped to Region C, which is part of Region E, and Region E is part of Region Z, then Person X can access Electronic Device Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Tool Y):- OperatesIn(Organization X, Region Z1), DistributedBy(Tool Y, Organization A), ProvideServiceIn(Organization A, Natural Place C), SurroundedBy(Natural Place C, Substance E), LocatedIn(Substance E, Region Z1);",
  "v_rule": "If Organization X operates in Region Z1, and Tool Y is distributed by Organization A, and Organization A provides service in Natural Place C, and Natural Place C is surrounded by Substance E, and Substance E is located in Region Z1, then Organization X can access Tool Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Material Y):- LiveIn(Person X, Region Z1), GrownIn(Material Y, Natural Place C), SurroundedBy(Natural Place C, Natural Place E), LocatedIn(Natural Place E, Natural Place A), LocatedIn(Natural Place A, Region Z1);",
  "v_rule": "If Person X lives in Region Z1 and Material Y is grown in Natural Place C, and Natural Place C is surrounded by Natural Place E, and Natural Place E is located in Natural Place A, and Natural Place A is located in Region Z1, then Person X can access Material Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Technology X, Plant Y):- RequiredFor(Technology X, Job C), PerformedBy(Job C, Organization A), OperateIn(Organization A, Facility E), LocatedIn(Facility E, Region Z), AdaptedTo(Plant Y, Region Z);",
  "v_rule": "If Technology X is required for Job C, which is performed by Organization A, and Organization A operates in Facility E, which is located in Region Z, and Plant Y is adapted to Region Z, then Technology X can access Plant Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Person X, Publication Y):- MovedTo(Person X, Region Z1), DistributedBy(Publication Y, Organization A), HeadquarteredIn(Organization A, Region C), PartOf(Region C, Region E), PartOf(Region E, Region Z1);",
  "v_rule": "If Person X has moved to Region Z1, and Publication Y is distributed by Organization A, which is headquartered in Region C, and Region C is part of Region E, which in turn is part of Region Z1, then Person X can access Publication Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Tool Y):- OperatesIn(Organization X, Region Z1), DistributedBy(Tool Y, Organization A), HeadquarteredIn(Organization A, Region C), PartOf(Region C, Region E), PartOf(Region E, Region Z1);",
  "v_rule": "If Organization X operates in Region Z1 and Tool Y is distributed by Organization A, and Organization A is headquartered in Region C which is part of Region E, and Region E is part of Region Z1, then Organization X can access Tool Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Tool Y):- OperatesIn(Organization X, Facility E), LocatedIn(Facility E, Region A), Contains(Region Z1, Region C), Contains(Region C, Region A), ImportedTo(Region Z1, Tool Y);",
  "v_rule": "If Organization X operates in Facility E which is located in Region A, and Region Z1 contains Region C which in turn contains Region A, and Tool Y is imported to Region Z1, then Organization X can access Tool Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Electronic Device X, Financial Product Y):- CompatibleWith(Electronic Device X, Platform Z), ListedOn(Financial Product Y, Platform A), SubsidiaryOf(Platform A, Platform C), SubsidiaryOf(Platform C, Organization E), OwnedBy(Organization E, Platform Z);",
  "v_rule": "If Electronic Device X is compatible with Platform Z, and Financial Product Y is listed on Platform A, and Platform A is a subsidiary of Platform C, and Platform C is a subsidiary of Organization E, and Organization E is owned by Platform Z, then Electronic Device X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Natural Phenomenon Y):- SurviveIn(Animal X, Condition A), ConditionIn(Region Z, Condition A), CauseIn(Natural Phenomenon Y, Event C), CausedBy(Event C, Natural Phenomenon E), OccurIn(Natural Phenomenon E, Region Z);",
  "v_rule": "If Animal X can survive in Condition A, and Condition A exists in Region Z, and Natural Phenomenon Y causes Event C, and Event C is caused by Natural Phenomenon E, and Natural Phenomenon E occurs in Region Z, then Animal X can access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Tool Y):- EstablishedIn(Organization X, Region Z1), ProducedIn(Tool Y, Facility C), BuiltIn(Facility C, Natural Place E), Inside(Natural Place E, Facility A), LocatedIn(Facility A, Region Z1);",
  "v_rule": "If Organization X is established in Region Z1, and Tool Y is produced in Facility C, which is built in Natural Place E, and Natural Place E is inside Facility A, which is located in Region Z1, then Organization X can access Tool Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Natural Place Y):- SurviveIn(Animal X, Condition A), ConditionIn(Region Z, Condition A), SurroundedBy(Natural Place Y, Substance C), FoundIn(Substance C, Natural Place E), LocatedIn(Natural Place E, Region Z);",
  "v_rule": "If Animal X can survive in Condition A, and Condition A is found in Region Z, and Natural Place Y is surrounded by Substance C, and Substance C is found in Natural Place E, and Natural Place E is located in Region Z, then Animal X can access Natural Place Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanStudy(Person X, Natural Phenomenon Y):- WorksIn(Person X, Organization A), LocatedIn(Organization A, Region Z), Cause(Natural Phenomenon Y, Event C), CausedBy(Event C, Natural Phenomenon E), OccurIn(Natural Phenomenon E, Region Z);",
  "v_rule": "If Person X works in Organization A, which is located in Region Z, and Natural Phenomenon Y causes Event C, which is caused by Natural Phenomenon E that occurs in Region Z, then Person X can study Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Material X, Job Y):- SafeFor(Material X, Condition Z2), RequiredIn(Job Y, Skill E), Use(Skill E, Tool C), Operate(Skill A, Tool C), SkillNeed(Condition Z2, Skill A);",
  "v_rule": "If Material X is safe for Condition Z2, and Job Y requires Skill E, and Skill E uses Tool C, and Skill A operates Tool C, and Condition Z2 needs Skill A, then Material X can be used for Job Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "GovernedBy(Material X, Legislation Y):- ExtractedFrom(Material X, Natural Place A), SurroundedBy(Natural Place A, Substance C), FoundIn(Substance C, Natural Place E), LocatedIn(Natural Place E, Region Z), AdoptedFrom(Region Z, Legislation Y);",
  "v_rule": "If Material X is extracted from Natural Place A, and Natural Place A is surrounded by Substance C, and Substance C is found in Natural Place E, and Natural Place E is located in Region Z, and Region Z has adopted Legislation Y, then Material X is governed by Legislation Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Natural Phenomenon Y):- SurviveIn(Animal X, Condition A), HaveIn(Region Z, Natural Phenomenon C), Cause(Natural Phenomenon C, Condition A), CauseIn(Natural Phenomenon Y, Event E), HappenIn(Event E, Region Z);",
  "v_rule": "If Animal X can survive in Condition A, and Region Z has Natural Phenomenon C which causes Condition A, and Natural Phenomenon Y causes Event E which happens in Region Z, then Animal X can access Natural Phenomenon Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CannotPurchase(Alcohol X, Region Y):- Contains(Substance X, Substance A), ViolateLegislation(Substance A, Legislation C), PassedIn(Legislation C, Facility E), Govern(Region Z1, Facility E), Subregion(Region Z1, Region Y);",
  "v_rule": "If Alcohol X contains Substance A, and Substance A violates Legislation C, and Legislation C has been passed in Facility E, and Region Z1 governs Facility E, and Region Y is a subregion of Region Z1, then Alcohol X cannot be purchased in Region Y.",
  "domain": "location",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "OriginOfMaterial(Material X, Region Y):- ExtractedBy(Material X, Person A), WorkIn(Person A, Facility C), SituatedIn(Facility C, Natural Place Z), SurroundedBy(Natural Place Z, Natural Place E), LocatedIn(Natural Place E, Region Y);",
  "v_rule": "If Material X is extracted by Person A, and Person A works in Facility C, and Facility C is situated in Natural Place Z, and Natural Place Z is surrounded by Natural Place E, and Natural Place E is located in Region Y, then the origin of Material X is Region Y.",
  "domain": "location",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LegalInRegion(Authorization X, Region Y):- GrantedBy(Authorization X, Facility A), BuiltIn(Facility A, Region E), LocatedIn(Region E, Natural Place C), IncludedIn(Natural Place C, Region Z), IsTerritory(Region Z, Region Y);",
  "v_rule": "If Authorization X is granted by Facility A, and Facility A is built in Region E, and Region E is located in Natural Place C, and Natural Place C is included in Region Z, and Region Z is a territory of Region Y, then Authorization X is legal in Region Y.",
  "domain": "location",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "RestrictedIn(Alcohol X, Region Y):- Contains(Substance X, Substance A), ViolateLegislation(Substance A, Legislation C), ApplyTo(Legislation C, Event E), ConductIn(Event E, Region Z1), PartOf(Region Z1, Region Y);",
  "v_rule": "If Alcohol X contains Substance A, and Substance A violates Legislation C, and Legislation C applies to Event E, and Event E is conducted in Region Z1, and Region Z1 is part of Region Y, then Alcohol X is restricted in Region Y.",
  "domain": "location",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CannotConsume(Alcohol X, Region Y):- MadeOf(Substance X, Material C), ComposedOf(Material C, Substance A), ViolateLegislation(Substance A, Legislation E), Enforced(Legislation E, Region Z1), Subregion(Region Z1, Region Y);",
  "v_rule": "If Alcohol X is made of Material C, and Material C is composed of Substance A, and Substance A violates Legislation E, and Legislation E is enforced in Region Z1, and Region Y is a subregion of Region Z1, then Alcohol X cannot be consumed in Region Y.",
  "domain": "location",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "ObservedIn(Condition X, Region Y):- Exist(Condition X, Natural Place Z), LocatedIn(Natural Place Z, Region C), Contains(Region A, Region C), SurroundedBy(Region A, Region E), PartOf(Region E, Region Y);",
  "v_rule": "If Condition X exists in Natural Place Z, and Natural Place Z is located in Region C, and Region A contains Region C, and Region A is surrounded by Region E, and Region E is a part of Region Y, then Condition X is observed in Region Y.",
  "domain": "location",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "SoldIn(Furniture X, Region Y):- DistributedBy(Furniture X, Organization Z), OperatesIn(Organization Z, Region A), Surround(Region Y, Natural Place E), LocatedIn(Natural Place E, Region C), Contains(Region C, Region A);",
  "v_rule": "If Furniture X is distributed by Organization Z, and Organization Z operates in Region A, and Region Y is surrounded by Natural Place E, and Natural Place E is located in Region C, and Region C contains Region A, then Furniture X is sold in Region Y.",
  "domain": "location",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CannotConsume(Alcohol X, Region Y):- Contains(Substance X, Substance A), BannedIn(Substance A, Region Z1), Contains(Region Y, Region C), Surround(Region C, Natural Place E), LocatedIn(Natural Place E, Region Z1);",
  "v_rule": "If Alcohol X contains Substance A, and Substance A is banned in Region Z1, and Region Y contains Region C, which is surrounded by Natural Place E that is located in Region Z1, then Alcohol X cannot be consumed in Region Y.",
  "domain": "location",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CannotPurchase(Alcohol X, Region Y):- DissolvedIn(Substance A, Substance C), Equal(Substance C, Substance X), ViolateLegislation(Substance A, Legislation E), Enforced(Legislation E, Region Z1), Subregion(Region Z1, Region Y);",
  "v_rule": "If Substance A is dissolved in Substance C, and Substance C is equal to Alcohol X, and Substance A violates Legislation E, and Legislation E is enforced in Region Z1, and Region Y is a subregion of Region Z1, then Alcohol X cannot be purchased in Region Y.",
  "domain": "location",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "AvailableIn(Financial Product X, Region Y):- ProvidedBy(Facility Z, Financial Product X), BuiltIn(Facility Z, Region E), LocatedIn(Region E, Natural Place C), IncludedIn(Natural Place C, Region A), PartOf(Region A, Region Y);",
  "v_rule": "If Financial Product X is provided by Facility Z, and Facility Z is built in Region E, and Region E is located in Natural Place C, which is included in Region A, and Region A is part of Region Y, then Financial Product X is available in Region Y.",
  "domain": "location",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Technology X, Region Y):- RequiredFor(Technology X, Job C), JobIn(Job C, Organization Z), OperateIn(Organization Z, Facility A), OperateIn(Facility A, Natural Place E), IncludedIn(Natural Place E, Region Y);",
  "v_rule": "If Technology X is required for Job C, and Job C is in Organization Z, and Organization Z operates in Facility A, and Facility A operates in Natural Place E, and Natural Place E is included in Region Y, then Technology X can be used in Region Y.",
  "domain": "location",
  "depth": 3,
  "length": 5,
  "positive": true,
  "structure": "transitive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAnArtist(Person X, Artwork Y):- MadeOf(Artwork Y, Material A), SkillNeeded(Skill Z1, Material A), Worked(Person X, Job C), Required(Skill Z2, Job C), LessThan(Skill Z2, Skill Z1);",
  "v_rule": "If Artwork Y is made of Material A and Skill Z1 is needed to work with Material A, and Person X has worked Job C which requires Skill Z2, and Skill Z2 is less than Skill Z1, then Person X is not an artist of Artwork Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotLead(Person X, Organization Y):- WorkIn(Person X, Job A), Require(Job A, Skill Z1), Goal(Organization Y, Skill Z2), UsedIn(Skill Z1, Job C), NotUsedIn(Skill Z2, Job C);",
  "v_rule": "If Person X works in Job A which requires Skill Z1, and the goal of Organization Y is Skill Z2, and while Skill Z1 is used in Job C, Skill Z2 is not used in Job C, then Person X cannot lead Organization Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDesign(Person X, Furniture Y):- Job(Person X, Job C), Need(Job C, Skill Z1), MadeOf(Furniture Y, Material A), WorkWith(Skill Z2, Material A), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has Job C and Job C needs Skill Z1, and Furniture Y is made of Material A which requires Skill Z2 to work with, and Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPerform(Person X, Job Y):- Survive(Person X, Event C), Demand(Event C, Strength Z1), Involves(Job Y, Event A), StrengthNeeded(Event A, Strength Z2), SmallerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X has survived Event C which demanded Strength Z1, and Job Y involves Event A which needs Strength Z2, and Strength Z1 is smaller than Strength Z2, then Person X cannot perform Job Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotCEO(Person X, Organization Y):- Job(Person X, Job A), Use(Job A, Tool C), Operate(Tool C, Skill Z1), RequireMinimumSkill(Organization Y, Skill Z2), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has Job A that uses Tool C, and operating Tool C requires Skill Z1, and the minimum skill required by Organization Y is Skill Z2, and Skill Z1 is smaller than Skill Z2, then Person X is not the CEO of Organization Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Alcohol Y):- Inherits(Person X, Person A), Earned(Person A, Job C), Paid(Job C, Money Z1), Sell(Alcohol Y, Money Z2), SmallerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X inherits from Person A, and Person A has earned from Job C, and Job C pays Money Z1, and Alcohol Y is sold for Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Alcohol Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotQualified(Person X, Job Y):- Train(Person X, Strength Z1), Involves(Job Y, Event A), Require(Event A, Skill C), Need(Skill C, Strength Z2), SmallerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X has trained for Strength Z1 and Job Y involves Event A which requires Skill C, and Skill C needs Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X is not qualified for Job Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDesign(Person X, Furniture Y):- Job(Person X, Job A), Require(Job A, Skill Z1), Assemble(Furniture Y, Tool C), Operate(Skill Z2, Tool C), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has Job A and Job A requires Skill Z1, and Furniture Y is assembled with Tool C which is operated by Skill Z2, and Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "LacksSkills(Person X, Job Y):- BornWith(Person X, Strength Z1), Involve(Job Y, Event A), Require(Event A, Skill C), Require(Skill C, Strength Z2), SmallerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X is born with Strength Z1 and Job Y involves Event A which requires Skill C, and Skill C requires Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X lacks the skills for Job Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Tool Y):- WorkAt(Person X, Job A), Pay(Job A, Money Z1), SoldIn(Tool Y, Facility C), PriceTag(Facility C, Money Z2), SmallerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X works at Job A which pays Money Z1, and Tool Y is sold at Facility C with a price tag of Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Tool Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotLead(Person X, Organization Y):- Have(Person X, Skill Z1), Goal(Organization Y, Skill Z2), NeededFor(Skill Z1, Job C), JobIn(Event A, Job C), NotInvolve(Skill Z2, Event A);",
  "v_rule": "If Person X has Skill Z1 and Organization Y has a goal related to Skill Z2, and Skill Z1 is needed for Job C which is involved in Event A, but Skill Z2 is not involved in Event A, then Person X cannot lead Organization Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "CanNotOperate(Person X, Electronic Device Y):- Age(Person X, Age Z1), MadeOf(Electronic Device Y, Material C), ComposedOf(Material C, Material A), SafeFor(Material A, Age Z2), BiggerThan(Age Z2, Age Z1);",
  "v_rule": "If Person X is of Age Z1 and Electronic Device Y is made of Material C, which is composed of Material A, and Material A is safe for Age Z2, but Age Z2 is bigger than Age Z1, then Person X cannot operate Electronic Device Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDesign(Person X, Furniture Y):- Job(Person X, Job A), Use(Job A, Tool C), Operate(Tool C, Skill Z1), RequireSkill(Furniture Y, Skill Z2), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has Job A that uses Tool C, and to operate Tool C requires Skill Z1, and designing Furniture Y requires Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Electronic Device Y):- Have(Person X, Money Z1), AssembledIn(Electronic Device Y, Facility C), OwnedBy(Facility C, Organization A), PriceSetBy(Organization A, Money Z2), SmallerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has Money Z1 and Electronic Device Y is assembled in Facility C, which is owned by Organization A that sets the price for the device at Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Electronic Device Y.",
  "domain": "affordance",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Job Y):- Have(Person X, Condition Z), Need(Job Y, Tool A), Allergic(Person Z, Material B), ConstructedFrom(Tool A, Material C), Contains(Material C, Material B);",
  "v_rule": "If Person X has Condition Z and Job Y requires Tool A, and Person X is allergic to Material B, and Tool A is constructed from Material C which contains Material B, then Person X cannot access Job Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Vehicle X, Animal Y):- OperatedBy(Vehicle X, Person A), WorkIn(Person A, Organization C), OperateIn(Organization C, Time Period Z1), ExistIn(Animal Y, Time Period Z2), LaterThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Vehicle X is operated by Person A, and Person A works in Organization C, and Organization C operates in Time Period Z1, and Animal Y exists in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Animal Y cannot access Vehicle X.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Person X, Skill Y):- LiveIn(Person X, Time Period Z1), FirstUsed(Skill Y, Event A), WitnessedBy(Event A, Person C), LivedIn(Person C, Time Period Z2), LaterThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Person X lives in Time Period Z1 and Skill Y was first used in Event A, which was witnessed by Person C who lived in Time Period Z2, and Time Period Z2 is later than Time Period Z1, then Person X cannot access Skill Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Technology X, Material Y):- MadeFrom(Technology X, Material A), MadeFrom(Material A, Material C), Require(Material C, Condition B), Equal(Condition Z, Condition B), Expired(Material Y, Condition Z);",
  "v_rule": "If Technology X is made from Material A, and Material A is made from Material C, and Material C requires Condition B, and Condition Z is equal to Condition B, and Material Y has expired under Condition Z, then Technology X cannot access Material Y.",
  "domain": "accessibility",
  "depth": 2,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Drug Y):- HaveBranchIn(Organization X, Region C), LocatedIn(Region C, Region A), EnforcedIn(Legislation Z2, Region A), Contains(Drug Y, Substance E), BannedIn(Substance E, Legislation Z2);",
  "v_rule": "If Organization X has a branch in Region C, and Region C is located in Region A, and Legislation Z2 is enforced in Region A, and Drug Y contains Substance E, and Substance E is banned in Legislation Z2, then Organization X cannot access Drug Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Electronic Device X, Game Y):- DesignedFor(Game Y, Platform Z), ManufacturedBy(Electronic Device X, Organization A), Use(Organization A, Technology C), Use(Platform Z, Skill E), NotUnderstand(Technology C, Skill E);",
  "v_rule": "If Game Y is designed for Platform Z and Electronic Device X is manufactured by Organization A, and Organization A uses Technology C, and Platform Z uses Skill E, but Technology C does not understand Skill E, then Electronic Device X cannot access Game Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Material X, Disease Y):- PlantIn(Material X, Natural Place E), SamePlace(Natural Place E, Natural Place C), LocatedIn(Natural Place C, Facility A), LocatedIn(Facility A, Region Z1), AbsentIn(Disease Y, Region Z1);",
  "v_rule": "If Material X is planted in Natural Place E, and Natural Place E is the same as Natural Place C, and Natural Place C is located in Facility A, and Facility A is located in Region Z1, and Disease Y is absent in Region Z1, then Disease Y cannot access Material X.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAvailable(Drug X, Platform Y):- StoredIn(Drug X, Condition A), Maintain(Condition A, Technology Z), DevelopedIn(Platform Y, Time Period C), InventedIn(Technology Z, Time Period E), EarlierThan(Time Period C, Time Period E);",
  "v_rule": "If Drug X is stored in Condition A and Condition A is maintained by Technology Z, and if Technology Z was invented in Time Period E, and Platform Y was developed in Time Period C which is earlier than Time Period E, then Drug X is not available on Platform Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Drug Y):- OperateIn(Organization X, Facility E), LocatedIn(Facility E, Region C), LocatedIn(Region C, Region A), EnforcedIn(Legislation Z2, Region A), Prohibits(Legislation Z2, Drug Y);",
  "v_rule": "If Organization X operates in Facility E, which is located in Region C, and Region C is located within Region A, and there is Legislation Z2 enforced in Region A that prohibits Drug Y, then Organization X cannot access Drug Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Substance Y):- ProvideServiceIn(Organization X, Region C), LocatedIn(Region C, Region A), PassedIn(Legislation Z, Facility E), LocatedIn(Facility E, Region A), ProhibitedBy(Substance Y, Legislation Z);",
  "v_rule": "If Organization X provides services in Region C, and Region C is located in Region A, and Legislation Z has been passed in Facility E, and Facility E is located in Region A, and Substance Y is prohibited by Legislation Z, then Organization X cannot access Substance Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "Incompatible(Electronic Device X, Game Y):- Requires(Game Y, Platform Z), DesignedBy(Electronic Device X, Person C), EmployedBy(Person C, Organization A), Follow(Organization A, Legislation E), Prohibit(Legislation E, Platform Z);",
  "v_rule": "If Game Y requires Platform Z, and Electronic Device X is designed by Person C, who is employed by Organization A that follows Legislation E, and Legislation E prohibits Platform Z, then Electronic Device X is incompatible with Game Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "Contraindicated(Person X, Drug Y):- Inherit(Person X, Condition Z), ManufacturedFrom(Drug Y, Material C), DerivedFrom(Material C, Material E), ComposedOf(Material E, Substance A), Trigger(Substance A, Condition Z);",
  "v_rule": "If Person X has inherited Condition Z, and Drug Y is manufactured from Material C, which is derived from Material E, and Material E is composed of Substance A, and Substance A triggers Condition Z, then Drug Y is contraindicated for Person X.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotUsedForServing(Tool X, Food Y):- MadeOf(Tool X, Material A), Needs(Material A, Condition Z1), ProducedIn(Food Y, Facility E), LocatedIn(Facility E, Region C), AbsentIn(Region C, Condition Z1);",
  "v_rule": "If Tool X is made of Material A, and Material A needs Condition Z1, and Food Y is produced in Facility E, and Facility E is located in Region C, and Condition Z1 is absent in Region C, then Tool X is not used for serving Food Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotUsedForServing(Tool X, Food Y):- ConstructedFrom(Tool X, Material C), Contains(Material C, Material A), Needs(Material A, Condition Z1), StoredIn(Food Y, Region E), AbsentIn(Region E, Condition Z1);",
  "v_rule": "If Tool X is constructed from Material C, and Material C contains Material A, and Material A needs Condition Z1 to be used, and Food Y is stored in Region E, and Condition Z1 is absent in Region E, then Tool X is not used for serving Food Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Organization X, Drug Y):- InvolvedIn(Organization X, Event A), RegulatedBy(Event A, Legislation Z2), MadeFrom(Drug Y, Material E), ComposedOf(Material E, Substance C), BannedIn(Substance C, Legislation Z2);",
  "v_rule": "If Organization X is involved in Event A which is regulated by Legislation Z2, and Drug Y is made from Material E which is composed of Substance C, and Substance C is banned in Legislation Z2, then Organization X cannot access Drug Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotUsedForPreparation(Tool X, Food Y):- ConstructedFrom(Tool X, Material C), Contains(Material C, Material A), MaterialCondition(Material A, Condition Z1), StoredIn(Food Y, Region E), AbsentIn(Region E, Condition Z1);",
  "v_rule": "If Tool X is constructed from Material C, which contains Material A, and Material A has Condition Z1, and if Food Y is stored in Region E where Condition Z1 is absent, then Tool X is not used for the preparation of Food Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAvailable(Drug X, Platform Y):- Require(Drug X, Technology Z), DevelopedIn(Platform Y, Time Period A), CreatedIn(Technology Z, Event E), OccurredIn(Event E, Time Period C), EarlierThan(Time Period A, Time Period C);",
  "v_rule": "If Drug X requires Technology Z, and Platform Y was developed in Time Period A, and Technology Z was created in Event E, and Event E occurred in Time Period C, and Time Period A is earlier than Time Period C, then Drug X is not available on Platform Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "2"
 },
 {
  "s_rule": "Incompatible(Electronic Device X, Game Y):- DesignedFor(Game Y, Platform Z), AssembledIn(Electronic Device X, Facility C), BuiltBy(Facility C, Organization E), MergedWith(Organization E, Organization A), NotSupport(Organization A, Platform Z);",
  "v_rule": "If Game Y is designed for Platform Z, and Electronic Device X is assembled in Facility C, which is built by Organization E that has merged with Organization A, and Organization A does not support Platform Z, then Electronic Device X is incompatible with Game Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 5,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanSponsor(Person X, Event Y):- Earn(Person X, Money Z1), PlannedBy(Event Y, Person C), EmployedBy(Person C, Organization E), SubOrganization(Organization E, Organization A), SetFee(Organization A, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X earns Money Z1 and Event Y is planned by Person C, who is employed by Organization E, which is a sub-organization of Organization A, and Organization A has set a fee of Money Z2, and Money Z1 is bigger than Money Z2, then Person X can sponsor Event Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Vehicle Y):- Win(Person X, Money Z1), AssembledIn(Vehicle Y, Facility C), PurchasedBy(Facility C, Organization E), SubsidiaryOf(Organization E, Organization A), SetPrice(Organization A, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has won Money Z1, and Vehicle Y is assembled in Facility C, which is purchased by Organization E, and Organization E is a subsidiary of Organization A, and Organization A has set the price of the vehicle as Money Z2, and Money Z1 is bigger than Money Z2, then Person X can buy Vehicle Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanBuy(Person X, Vehicle Y):- WorkAt(Person X, Job E), Pay(Job E, Money Z1), AssembledIn(Vehicle Y, Facility C), OwnedBy(Facility C, Organization A), SetPrice(Organization A, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X works at Job E which pays Money Z1, and Vehicle Y is assembled in Facility C which is owned by Organization A that has set the price for the vehicle at Money Z2, and if Money Z1 is bigger than Money Z2, then Person X can buy Vehicle Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanSponsor(Person X, Event Y):- WorkAt(Person X, Job A), Pay(Job A, Money Z1), PlannedBy(Event Y, Person E), WorksFor(Person E, Organization C), SetFee(Organization C, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X works at Job A which pays Money Z1, and Event Y is planned by Person E who works for Organization C that has set a fee of Money Z2, and Money Z1 is bigger than Money Z2, then Person X can sponsor Event Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanOwn(Person X, Vehicle Y):- Job(Person X, Job E), Pay(Job E, Money Z1), AssembledIn(Vehicle Y, Facility C), OwnedBy(Facility C, Organization A), SetPrice(Organization A, Money Z2), BiggerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X has a job E that pays Money Z1, and Vehicle Y is assembled in Facility C which is owned by Organization A that has set the price of the vehicle as Money Z2, and the money Person X earns from their job is more than the price of the vehicle, then Person X can own Vehicle Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Organization X, Material Y):- ActiveIn(Organization X, Event A), OccurIn(Event A, Time Period Z1), ManufacturedBy(Material Y, Organization C), ActiveIn(Organization C, Event E), OccurredIn(Event E, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Organization X is active in Event A which occurs in Time Period Z1, and Material Y is manufactured by Organization C which is active in Event E that occurred in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Organization X can use Material Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Financial Product Y):- ActiveIn(Organization X, Event A), OccurDuring(Event A, Time Period Z1), ManagedBy(Financial Product Y, Person E), WorksIn(Person E, Facility C), OperateDuring(Facility C, Time Period Z2), Overlap(Time Period Z1, Time Period Z2);",
  "v_rule": "If Organization X is active in Event A, which occurs during Time Period Z1, and Financial Product Y is managed by Person E who works in Facility C that operates during Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Organization X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Animal X, Disease Y):- SurviveIn(Animal X, Condition A), GovernedBy(Region Z, Facility C), Implement(Facility C, Legislation D), ResultIn(Legislation D, Condition A), SpreadIn(Disease Y, Animal E), CommonIn(Animal E, Region Z);",
  "v_rule": "If Animal X can survive in Condition A, and Region Z is governed by Facility C which implements Legislation D that results in Condition A, and Disease Y spreads in Animal E which is common in Region Z, then Animal X can access Disease Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Organization X, Financial Product Y):- OperateDuring(Organization X, Time Period Z1), PromotedBy(Financial Product Y, Organization A), ActiveIn(Organization A, Event C), HappenIn(Event C, Region E), TimeIn(Region E, Time Period Z2), Overlap(Time Period Z1, Time Period Z2);",
  "v_rule": "If Organization X operates during Time Period Z1 and Financial Product Y is promoted by Organization A, and Organization A is active in Event C which happens in Region E, and the time in Region E is Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Organization X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUtilize(Facility X, Financial Product Y):- ManagedBy(Facility X, Person A), AliveIn(Person A, Time Period Z1), PromotedBy(Financial Product Y, Organization C), HaveEvent(Organization C, Event E), HappenDuring(Event E, Time Period Z2), Overlap(Time Period Z1, Time Period Z2);",
  "v_rule": "If Facility X is managed by Person A, and Person A is alive in Time Period Z1, and Financial Product Y is promoted by Organization C, and Organization C has an event E, and Event E happens during Time Period Z2, and Time Period Z1 overlaps with Time Period Z2, then Facility X can utilize Financial Product Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Material Y):- Available(Facility X, Time Period Z1), ManufacturedIn(Material Y, Plant E), PartOf(Plant E, Facility C), OperatedBy(Facility C, Organization A), OperatedIn(Organization A, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Facility X is available during Time Period Z1 and Material Y is manufactured in Plant E, and Plant E is part of Facility C which is operated by Organization A during Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Facility X can access Material Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanUse(Facility X, Material Y):- OwnedBy(Facility X, Organization A), ActiveIn(Organization A, Time Period Z1), CreatedIn(Material Y, Facility E), OperatedBy(Facility E, Organization C), OperatedIn(Organization C, Time Period Z2), EarlierThan(Time Period Z2, Time Period Z1);",
  "v_rule": "If Facility X is owned by Organization A, and Organization A is active in Time Period Z1, and Material Y is created in Facility E, and Facility E is operated by Organization C, and Organization C is operating in Time Period Z2, and Time Period Z2 is earlier than Time Period Z1, then Facility X can use Material Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanAccess(Facility X, Financial Product Y):- OwnedBy(Facility X, Organization A), ActiveIn(Organization A, Time Period Z1), PromotedBy(Financial Product Y, Organization C), ActiveIn(Organization C, Event E), OccurDuring(Event E, Time Period Z2), StartBeforeEnd(Time Period Z1, Time Period Z2);",
  "v_rule": "If Facility X is owned by Organization A, and Organization A is active during Time Period Z1, and Financial Product Y is promoted by Organization C, and Organization C is active during Event E, and Event E occurs during Time Period Z2, and Time Period Z1 starts before the end of Time Period Z2, then Facility X can access Financial Product Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 6,
  "positive": true,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotBuy(Person X, Electronic Device Y):- WorkAt(Person X, Job E), Pay(Job E, Money Z1), AssembledIn(Electronic Device Y, Facility C), OwnedBy(Facility C, Organization A), PriceSetBy(Organization A, Money Z2), SmallerThan(Money Z1, Money Z2);",
  "v_rule": "If Person X works at Job E which pays Money Z1, and Electronic Device Y is assembled in Facility C which is owned by Organization A that sets the price as Money Z2, and Money Z1 is smaller than Money Z2, then Person X cannot buy Electronic Device Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotLead(Person X, Organization Y):- WorkIn(Person X, Job A), Require(Job A, Skill Z1), Goal(Organization Y, Skill Z2), UsedIn(Skill Z1, Game E), GameIn(Event C, Game E), NotInvolve(Skill Z2, Event C);",
  "v_rule": "If Person X works in Job A which requires Skill Z1, and Organization Y has a goal related to Skill Z2, and Skill Z1 is used in Game E which is part of Event C, but Skill Z2 is not involved in Event C, then Person X cannot lead Organization Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDesign(Person X, Furniture Y):- Job(Person X, Job E), Require(Job E, Skill Z1), ConstructedFrom(Furniture Y, Material C), DerivedFrom(Material C, Material A), WorkWith(Skill Z2, Material A), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has Job E and Job E requires Skill Z1, and Furniture Y is constructed from Material C which is derived from Material A, and Skill Z2 is needed to work with Material A, but Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDesign(Person X, Furniture Y):- Job(Person X, Job C), Use(Job C, Tool E), Operate(Tool E, Skill Z1), Assemble(Furniture Y, Tool A), Operate(Skill Z2, Tool A), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has Job C which uses Tool E, and to operate Tool E requires Skill Z1, and to assemble Furniture Y requires Tool A which is operated by Skill Z2, and Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotLead(Person X, Organization Y):- WorkIn(Person X, Job C), Use(Job C, Tool E), Operate(Tool E, Skill Z1), Goal(Organization Y, Skill Z2), UsedIn(Skill Z1, Job A), NotUsedIn(Skill Z2, Job A);",
  "v_rule": "If Person X works in Job C which uses Tool E, and to operate Tool E requires Skill Z1, and the goal of Organization Y is Skill Z2, and Skill Z1 is used in Job A but Skill Z2 is not used in Job A, then Person X cannot lead Organization Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAnArtist(Person X, Artwork Y):- MadeOf(Artwork Y, Material E), SkillNeeded(Skill Z1, Material E), WorkIn(Person X, Job A), Use(Job A, Tool C), Operate(Tool C, Skill Z2), LessThan(Skill Z2, Skill Z1);",
  "v_rule": "If Artwork Y is made of Material E and Skill Z1 is needed to work with Material E, and Person X works in Job A which uses Tool C, and Tool C operates with Skill Z2, and Skill Z2 is less than Skill Z1, then Person X is not an artist of Artwork Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "NotAnArtist(Person X, Artwork Y):- SkillRequired(Artwork Y, Skill Z1), WorkIn(Person X, Job A), TrainedIn(Job A, Skill E), NeededFor(Tool C, Skill E), Operate(Tool C, Skill Z2), LessThan(Skill Z2, Skill Z1);",
  "v_rule": "If Artwork Y requires Skill Z1 and Person X works in Job A, is trained in Skill E for Job A, and operates Tool C which is needed for Skill E but the level of Skill Z2 for operating Tool C is less than Skill Z1, then Person X is not an artist for Artwork Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "1",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotDesign(Person X, Furniture Y):- Job(Person X, Job A), TrainedIn(Job A, Skill E), NeededFor(Tool C, Skill E), Operate(Tool C, Skill Z1), RequireSkill(Furniture Y, Skill Z2), SmallerThan(Skill Z1, Skill Z2);",
  "v_rule": "If Person X has Job A and Job A is trained in Skill E, and Tool C is needed for Skill E and Tool C operates with Skill Z1, and if Furniture Y requires Skill Z2, but Skill Z1 is smaller than Skill Z2, then Person X cannot design Furniture Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotPerform(Person X, Job Y):- Survive(Person X, Event C), Demand(Event C, Strength Z1), Involve(Job Y, Event A), Require(Event A, Skill E), Require(Skill E, Strength Z2), SmallerThan(Strength Z1, Strength Z2);",
  "v_rule": "If Person X has survived Event C which demanded Strength Z1, and Job Y involves Event A which requires Skill E, and Skill E requires Strength Z2, but Strength Z1 is smaller than Strength Z2, then Person X cannot perform Job Y.",
  "domain": "affordance",
  "depth": 3,
  "length": 6,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Vehicle X, Animal Y):- OperatedBy(Vehicle X, Person A), WorkIn(Person A, Organization C), HaveActivityIn(Organization C, Event E), HappenIn(Event E, Time Period Z1), ExistIn(Animal Y, Time Period Z2), LaterThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Vehicle X is operated by Person A, and Person A works in Organization C, and Organization C has an activity in Event E, and Event E happens in Time Period Z1, and Animal Y exists in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Animal Y cannot access Vehicle X.",
  "domain": "accessibility",
  "depth": 3,
  "length": 6,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 },
 {
  "s_rule": "CanNotAccess(Substance X, Plant Y):- CreatedIn(Substance X, Event A), WitnessedBy(Event A, Person C), WorkIn(Person C, Organization E), OperateIn(Organization E, Time Period Z1), BloomsIn(Plant Y, Time Period Z2), LaterThan(Time Period Z1, Time Period Z2);",
  "v_rule": "If Substance X is created in Event A, and Event A is witnessed by Person C who works in Organization E, and Organization E operates in Time Period Z1, and Plant Y blooms in Time Period Z2, and Time Period Z1 is later than Time Period Z2, then Substance X cannot access Plant Y.",
  "domain": "accessibility",
  "depth": 3,
  "length": 6,
  "positive": false,
  "structure": "transitive-disjunctive",
  "label": true,
  "original_human_prediction": "2",
  "flipped_human_prediction": "1"
 }
]